// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artifacts/quotas/v1alpha1/registry_quotas_api.proto

#include "artifacts/quotas/v1alpha1/registry_quotas_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace artifacts {
namespace quotas {
namespace v1alpha1 {
constexpr UpdateQuotaRegistryRequest::UpdateQuotaRegistryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quota_registry_(nullptr){}
struct UpdateQuotaRegistryRequestDefaultTypeInternal {
  constexpr UpdateQuotaRegistryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateQuotaRegistryRequestDefaultTypeInternal() {}
  union {
    UpdateQuotaRegistryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateQuotaRegistryRequestDefaultTypeInternal _UpdateQuotaRegistryRequest_default_instance_;
constexpr UpdateQuotaRegistryResponse::UpdateQuotaRegistryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , quota_registry_(nullptr){}
struct UpdateQuotaRegistryResponseDefaultTypeInternal {
  constexpr UpdateQuotaRegistryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateQuotaRegistryResponseDefaultTypeInternal() {}
  union {
    UpdateQuotaRegistryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateQuotaRegistryResponseDefaultTypeInternal _UpdateQuotaRegistryResponse_default_instance_;
constexpr ListQuotasRegistryRequest::ListQuotasRegistryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : query_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sort_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reference_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_id_(0u)
  , project_id_(0u)
  , page_(0u)
  , page_size_(0u){}
struct ListQuotasRegistryRequestDefaultTypeInternal {
  constexpr ListQuotasRegistryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListQuotasRegistryRequestDefaultTypeInternal() {}
  union {
    ListQuotasRegistryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListQuotasRegistryRequestDefaultTypeInternal _ListQuotasRegistryRequest_default_instance_;
constexpr ListQuotasRegistryResponse::ListQuotasRegistryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quotas_registry_()
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListQuotasRegistryResponseDefaultTypeInternal {
  constexpr ListQuotasRegistryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListQuotasRegistryResponseDefaultTypeInternal() {}
  union {
    ListQuotasRegistryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListQuotasRegistryResponseDefaultTypeInternal _ListQuotasRegistryResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace quotas
}  // namespace artifacts
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest, quota_registry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse, quota_registry_),
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest, organization_id_),
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest, project_id_),
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest, query_),
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest, page_),
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest, page_size_),
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest, sort_),
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest, reference_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse, quotas_registry_),
  PROTOBUF_FIELD_OFFSET(::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest)},
  { 6, -1, sizeof(::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse)},
  { 13, -1, sizeof(::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest)},
  { 25, -1, sizeof(::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::quotas::v1alpha1::_UpdateQuotaRegistryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::quotas::v1alpha1::_UpdateQuotaRegistryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::quotas::v1alpha1::_ListQuotasRegistryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::quotas::v1alpha1::_ListQuotasRegistryResponse_default_instance_),
};

const char descriptor_table_protodef_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n3artifacts/quotas/v1alpha1/registry_quo"
  "tas_api.proto\022\031artifacts.quotas.v1alpha1"
  "\032/artifacts/quotas/v1alpha1/registry_quo"
  "tas.proto\"n\n\032UpdateQuotaRegistryRequest\022"
  "P\n\016quota_registry\030\001 \001(\0132).artifacts.quot"
  "as.v1alpha1.QuotasRegistryR\rquotaRegistr"
  "y\"\207\001\n\033UpdateQuotaRegistryResponse\022P\n\016quo"
  "ta_registry\030\001 \001(\0132).artifacts.quotas.v1a"
  "lpha1.QuotasRegistryR\rquotaRegistry\022\026\n\006s"
  "tatus\030\002 \001(\tR\006status\"\341\001\n\031ListQuotasRegist"
  "ryRequest\022\'\n\017organization_id\030\001 \001(\rR\016orga"
  "nizationId\022\035\n\nproject_id\030\002 \001(\rR\tprojectI"
  "d\022\024\n\005query\030\003 \001(\tR\005query\022\022\n\004page\030\004 \001(\rR\004p"
  "age\022\033\n\tpage_size\030\005 \001(\rR\010pageSize\022\022\n\004sort"
  "\030\006 \001(\tR\004sort\022!\n\014reference_id\030\007 \001(\tR\013refe"
  "renceId\"\210\001\n\032ListQuotasRegistryResponse\022R"
  "\n\017quotas_registry\030\001 \003(\0132).artifacts.quot"
  "as.v1alpha1.QuotasRegistryR\016quotasRegist"
  "ry\022\026\n\006status\030\002 \001(\tR\006status2\245\002\n\030RegistryQ"
  "uotasAPIService\022\201\001\n\022ListQuotasRegistry\0224"
  ".artifacts.quotas.v1alpha1.ListQuotasReg"
  "istryRequest\0325.artifacts.quotas.v1alpha1"
  ".ListQuotasRegistryResponse\022\204\001\n\023UpdateQu"
  "otaRegistry\0225.artifacts.quotas.v1alpha1."
  "UpdateQuotaRegistryRequest\0326.artifacts.q"
  "uotas.v1alpha1.UpdateQuotaRegistryRespon"
  "seB\271\001\n#io.cuemby.artifacts.quotas.v1alph"
  "a1B\026RegistryQuotasProtoAPIP\001Z:github.com"
  "/cuemby/ccp-sdk/gen/go/artifacts/quotas/"
  "v1alpha1\242\002\003PPX\252\002\031Artifacts.Quotas.V1Alph"
  "a1\312\002\031Artifacts\\Quotas\\V1Alpha1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto_deps[1] = {
  &::descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto = {
  false, false, 1238, descriptor_table_protodef_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto, "artifacts/quotas/v1alpha1/registry_quotas_api.proto", 
  &descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto_once, descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto::offsets,
  file_level_metadata_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto, file_level_enum_descriptors_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto, file_level_service_descriptors_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto_getter() {
  return &descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto(&descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto);
namespace artifacts {
namespace quotas {
namespace v1alpha1 {

// ===================================================================

class UpdateQuotaRegistryRequest::_Internal {
 public:
  static const ::artifacts::quotas::v1alpha1::QuotasRegistry& quota_registry(const UpdateQuotaRegistryRequest* msg);
};

const ::artifacts::quotas::v1alpha1::QuotasRegistry&
UpdateQuotaRegistryRequest::_Internal::quota_registry(const UpdateQuotaRegistryRequest* msg) {
  return *msg->quota_registry_;
}
void UpdateQuotaRegistryRequest::clear_quota_registry() {
  if (GetArenaForAllocation() == nullptr && quota_registry_ != nullptr) {
    delete quota_registry_;
  }
  quota_registry_ = nullptr;
}
UpdateQuotaRegistryRequest::UpdateQuotaRegistryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.quotas.v1alpha1.UpdateQuotaRegistryRequest)
}
UpdateQuotaRegistryRequest::UpdateQuotaRegistryRequest(const UpdateQuotaRegistryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_quota_registry()) {
    quota_registry_ = new ::artifacts::quotas::v1alpha1::QuotasRegistry(*from.quota_registry_);
  } else {
    quota_registry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:artifacts.quotas.v1alpha1.UpdateQuotaRegistryRequest)
}

inline void UpdateQuotaRegistryRequest::SharedCtor() {
quota_registry_ = nullptr;
}

UpdateQuotaRegistryRequest::~UpdateQuotaRegistryRequest() {
  // @@protoc_insertion_point(destructor:artifacts.quotas.v1alpha1.UpdateQuotaRegistryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateQuotaRegistryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete quota_registry_;
}

void UpdateQuotaRegistryRequest::ArenaDtor(void* object) {
  UpdateQuotaRegistryRequest* _this = reinterpret_cast< UpdateQuotaRegistryRequest* >(object);
  (void)_this;
}
void UpdateQuotaRegistryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateQuotaRegistryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateQuotaRegistryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.quotas.v1alpha1.UpdateQuotaRegistryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && quota_registry_ != nullptr) {
    delete quota_registry_;
  }
  quota_registry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateQuotaRegistryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .artifacts.quotas.v1alpha1.QuotasRegistry quota_registry = 1 [json_name = "quotaRegistry"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_quota_registry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateQuotaRegistryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.quotas.v1alpha1.UpdateQuotaRegistryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .artifacts.quotas.v1alpha1.QuotasRegistry quota_registry = 1 [json_name = "quotaRegistry"];
  if (this->_internal_has_quota_registry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::quota_registry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.quotas.v1alpha1.UpdateQuotaRegistryRequest)
  return target;
}

size_t UpdateQuotaRegistryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.quotas.v1alpha1.UpdateQuotaRegistryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .artifacts.quotas.v1alpha1.QuotasRegistry quota_registry = 1 [json_name = "quotaRegistry"];
  if (this->_internal_has_quota_registry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quota_registry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateQuotaRegistryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateQuotaRegistryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateQuotaRegistryRequest::GetClassData() const { return &_class_data_; }

void UpdateQuotaRegistryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateQuotaRegistryRequest *>(to)->MergeFrom(
      static_cast<const UpdateQuotaRegistryRequest &>(from));
}


void UpdateQuotaRegistryRequest::MergeFrom(const UpdateQuotaRegistryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.quotas.v1alpha1.UpdateQuotaRegistryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_quota_registry()) {
    _internal_mutable_quota_registry()->::artifacts::quotas::v1alpha1::QuotasRegistry::MergeFrom(from._internal_quota_registry());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateQuotaRegistryRequest::CopyFrom(const UpdateQuotaRegistryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.quotas.v1alpha1.UpdateQuotaRegistryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateQuotaRegistryRequest::IsInitialized() const {
  return true;
}

void UpdateQuotaRegistryRequest::InternalSwap(UpdateQuotaRegistryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(quota_registry_, other->quota_registry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateQuotaRegistryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto_getter, &descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto_once,
      file_level_metadata_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto[0]);
}

// ===================================================================

class UpdateQuotaRegistryResponse::_Internal {
 public:
  static const ::artifacts::quotas::v1alpha1::QuotasRegistry& quota_registry(const UpdateQuotaRegistryResponse* msg);
};

const ::artifacts::quotas::v1alpha1::QuotasRegistry&
UpdateQuotaRegistryResponse::_Internal::quota_registry(const UpdateQuotaRegistryResponse* msg) {
  return *msg->quota_registry_;
}
void UpdateQuotaRegistryResponse::clear_quota_registry() {
  if (GetArenaForAllocation() == nullptr && quota_registry_ != nullptr) {
    delete quota_registry_;
  }
  quota_registry_ = nullptr;
}
UpdateQuotaRegistryResponse::UpdateQuotaRegistryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.quotas.v1alpha1.UpdateQuotaRegistryResponse)
}
UpdateQuotaRegistryResponse::UpdateQuotaRegistryResponse(const UpdateQuotaRegistryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_quota_registry()) {
    quota_registry_ = new ::artifacts::quotas::v1alpha1::QuotasRegistry(*from.quota_registry_);
  } else {
    quota_registry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:artifacts.quotas.v1alpha1.UpdateQuotaRegistryResponse)
}

inline void UpdateQuotaRegistryResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
quota_registry_ = nullptr;
}

UpdateQuotaRegistryResponse::~UpdateQuotaRegistryResponse() {
  // @@protoc_insertion_point(destructor:artifacts.quotas.v1alpha1.UpdateQuotaRegistryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateQuotaRegistryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete quota_registry_;
}

void UpdateQuotaRegistryResponse::ArenaDtor(void* object) {
  UpdateQuotaRegistryResponse* _this = reinterpret_cast< UpdateQuotaRegistryResponse* >(object);
  (void)_this;
}
void UpdateQuotaRegistryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateQuotaRegistryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateQuotaRegistryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.quotas.v1alpha1.UpdateQuotaRegistryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && quota_registry_ != nullptr) {
    delete quota_registry_;
  }
  quota_registry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateQuotaRegistryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .artifacts.quotas.v1alpha1.QuotasRegistry quota_registry = 1 [json_name = "quotaRegistry"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_quota_registry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.quotas.v1alpha1.UpdateQuotaRegistryResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateQuotaRegistryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.quotas.v1alpha1.UpdateQuotaRegistryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .artifacts.quotas.v1alpha1.QuotasRegistry quota_registry = 1 [json_name = "quotaRegistry"];
  if (this->_internal_has_quota_registry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::quota_registry(this), target, stream);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.quotas.v1alpha1.UpdateQuotaRegistryResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.quotas.v1alpha1.UpdateQuotaRegistryResponse)
  return target;
}

size_t UpdateQuotaRegistryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.quotas.v1alpha1.UpdateQuotaRegistryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .artifacts.quotas.v1alpha1.QuotasRegistry quota_registry = 1 [json_name = "quotaRegistry"];
  if (this->_internal_has_quota_registry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *quota_registry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateQuotaRegistryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateQuotaRegistryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateQuotaRegistryResponse::GetClassData() const { return &_class_data_; }

void UpdateQuotaRegistryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateQuotaRegistryResponse *>(to)->MergeFrom(
      static_cast<const UpdateQuotaRegistryResponse &>(from));
}


void UpdateQuotaRegistryResponse::MergeFrom(const UpdateQuotaRegistryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.quotas.v1alpha1.UpdateQuotaRegistryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_quota_registry()) {
    _internal_mutable_quota_registry()->::artifacts::quotas::v1alpha1::QuotasRegistry::MergeFrom(from._internal_quota_registry());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateQuotaRegistryResponse::CopyFrom(const UpdateQuotaRegistryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.quotas.v1alpha1.UpdateQuotaRegistryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateQuotaRegistryResponse::IsInitialized() const {
  return true;
}

void UpdateQuotaRegistryResponse::InternalSwap(UpdateQuotaRegistryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
  swap(quota_registry_, other->quota_registry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateQuotaRegistryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto_getter, &descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto_once,
      file_level_metadata_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto[1]);
}

// ===================================================================

class ListQuotasRegistryRequest::_Internal {
 public:
};

ListQuotasRegistryRequest::ListQuotasRegistryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.quotas.v1alpha1.ListQuotasRegistryRequest)
}
ListQuotasRegistryRequest::ListQuotasRegistryRequest(const ListQuotasRegistryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query(), 
      GetArenaForAllocation());
  }
  sort_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sort().empty()) {
    sort_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sort(), 
      GetArenaForAllocation());
  }
  reference_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reference_id().empty()) {
    reference_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reference_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&organization_id_, &from.organization_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&organization_id_)) + sizeof(page_size_));
  // @@protoc_insertion_point(copy_constructor:artifacts.quotas.v1alpha1.ListQuotasRegistryRequest)
}

inline void ListQuotasRegistryRequest::SharedCtor() {
query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sort_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reference_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&organization_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&page_size_) -
    reinterpret_cast<char*>(&organization_id_)) + sizeof(page_size_));
}

ListQuotasRegistryRequest::~ListQuotasRegistryRequest() {
  // @@protoc_insertion_point(destructor:artifacts.quotas.v1alpha1.ListQuotasRegistryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListQuotasRegistryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sort_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reference_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListQuotasRegistryRequest::ArenaDtor(void* object) {
  ListQuotasRegistryRequest* _this = reinterpret_cast< ListQuotasRegistryRequest* >(object);
  (void)_this;
}
void ListQuotasRegistryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListQuotasRegistryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListQuotasRegistryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.quotas.v1alpha1.ListQuotasRegistryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  query_.ClearToEmpty();
  sort_.ClearToEmpty();
  reference_id_.ClearToEmpty();
  ::memset(&organization_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&page_size_) -
      reinterpret_cast<char*>(&organization_id_)) + sizeof(page_size_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListQuotasRegistryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 organization_id = 1 [json_name = "organizationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          organization_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 project_id = 2 [json_name = "projectId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          project_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string query = 3 [json_name = "query"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.quotas.v1alpha1.ListQuotasRegistryRequest.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 4 [json_name = "page"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page_size = 5 [json_name = "pageSize"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          page_size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sort = 6 [json_name = "sort"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_sort();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.quotas.v1alpha1.ListQuotasRegistryRequest.sort"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reference_id = 7 [json_name = "referenceId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_reference_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.quotas.v1alpha1.ListQuotasRegistryRequest.reference_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListQuotasRegistryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.quotas.v1alpha1.ListQuotasRegistryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 organization_id = 1 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_organization_id(), target);
  }

  // uint32 project_id = 2 [json_name = "projectId"];
  if (this->_internal_project_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_project_id(), target);
  }

  // string query = 3 [json_name = "query"];
  if (!this->_internal_query().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.quotas.v1alpha1.ListQuotasRegistryRequest.query");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_query(), target);
  }

  // uint32 page = 4 [json_name = "page"];
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_page(), target);
  }

  // uint32 page_size = 5 [json_name = "pageSize"];
  if (this->_internal_page_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_page_size(), target);
  }

  // string sort = 6 [json_name = "sort"];
  if (!this->_internal_sort().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sort().data(), static_cast<int>(this->_internal_sort().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.quotas.v1alpha1.ListQuotasRegistryRequest.sort");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sort(), target);
  }

  // string reference_id = 7 [json_name = "referenceId"];
  if (!this->_internal_reference_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reference_id().data(), static_cast<int>(this->_internal_reference_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.quotas.v1alpha1.ListQuotasRegistryRequest.reference_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_reference_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.quotas.v1alpha1.ListQuotasRegistryRequest)
  return target;
}

size_t ListQuotasRegistryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.quotas.v1alpha1.ListQuotasRegistryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string query = 3 [json_name = "query"];
  if (!this->_internal_query().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // string sort = 6 [json_name = "sort"];
  if (!this->_internal_sort().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sort());
  }

  // string reference_id = 7 [json_name = "referenceId"];
  if (!this->_internal_reference_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reference_id());
  }

  // uint32 organization_id = 1 [json_name = "organizationId"];
  if (this->_internal_organization_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_organization_id());
  }

  // uint32 project_id = 2 [json_name = "projectId"];
  if (this->_internal_project_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_project_id());
  }

  // uint32 page = 4 [json_name = "page"];
  if (this->_internal_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 page_size = 5 [json_name = "pageSize"];
  if (this->_internal_page_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page_size());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListQuotasRegistryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListQuotasRegistryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListQuotasRegistryRequest::GetClassData() const { return &_class_data_; }

void ListQuotasRegistryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListQuotasRegistryRequest *>(to)->MergeFrom(
      static_cast<const ListQuotasRegistryRequest &>(from));
}


void ListQuotasRegistryRequest::MergeFrom(const ListQuotasRegistryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.quotas.v1alpha1.ListQuotasRegistryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_query().empty()) {
    _internal_set_query(from._internal_query());
  }
  if (!from._internal_sort().empty()) {
    _internal_set_sort(from._internal_sort());
  }
  if (!from._internal_reference_id().empty()) {
    _internal_set_reference_id(from._internal_reference_id());
  }
  if (from._internal_organization_id() != 0) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (from._internal_project_id() != 0) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_page_size() != 0) {
    _internal_set_page_size(from._internal_page_size());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListQuotasRegistryRequest::CopyFrom(const ListQuotasRegistryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.quotas.v1alpha1.ListQuotasRegistryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListQuotasRegistryRequest::IsInitialized() const {
  return true;
}

void ListQuotasRegistryRequest::InternalSwap(ListQuotasRegistryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &query_, GetArenaForAllocation(),
      &other->query_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sort_, GetArenaForAllocation(),
      &other->sort_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reference_id_, GetArenaForAllocation(),
      &other->reference_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListQuotasRegistryRequest, page_size_)
      + sizeof(ListQuotasRegistryRequest::page_size_)
      - PROTOBUF_FIELD_OFFSET(ListQuotasRegistryRequest, organization_id_)>(
          reinterpret_cast<char*>(&organization_id_),
          reinterpret_cast<char*>(&other->organization_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListQuotasRegistryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto_getter, &descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto_once,
      file_level_metadata_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto[2]);
}

// ===================================================================

class ListQuotasRegistryResponse::_Internal {
 public:
};

void ListQuotasRegistryResponse::clear_quotas_registry() {
  quotas_registry_.Clear();
}
ListQuotasRegistryResponse::ListQuotasRegistryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  quotas_registry_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.quotas.v1alpha1.ListQuotasRegistryResponse)
}
ListQuotasRegistryResponse::ListQuotasRegistryResponse(const ListQuotasRegistryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      quotas_registry_(from.quotas_registry_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:artifacts.quotas.v1alpha1.ListQuotasRegistryResponse)
}

inline void ListQuotasRegistryResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListQuotasRegistryResponse::~ListQuotasRegistryResponse() {
  // @@protoc_insertion_point(destructor:artifacts.quotas.v1alpha1.ListQuotasRegistryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListQuotasRegistryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListQuotasRegistryResponse::ArenaDtor(void* object) {
  ListQuotasRegistryResponse* _this = reinterpret_cast< ListQuotasRegistryResponse* >(object);
  (void)_this;
}
void ListQuotasRegistryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListQuotasRegistryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListQuotasRegistryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.quotas.v1alpha1.ListQuotasRegistryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quotas_registry_.Clear();
  status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListQuotasRegistryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .artifacts.quotas.v1alpha1.QuotasRegistry quotas_registry = 1 [json_name = "quotasRegistry"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_quotas_registry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.quotas.v1alpha1.ListQuotasRegistryResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListQuotasRegistryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.quotas.v1alpha1.ListQuotasRegistryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .artifacts.quotas.v1alpha1.QuotasRegistry quotas_registry = 1 [json_name = "quotasRegistry"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_quotas_registry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_quotas_registry(i), target, stream);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.quotas.v1alpha1.ListQuotasRegistryResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.quotas.v1alpha1.ListQuotasRegistryResponse)
  return target;
}

size_t ListQuotasRegistryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.quotas.v1alpha1.ListQuotasRegistryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .artifacts.quotas.v1alpha1.QuotasRegistry quotas_registry = 1 [json_name = "quotasRegistry"];
  total_size += 1UL * this->_internal_quotas_registry_size();
  for (const auto& msg : this->quotas_registry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListQuotasRegistryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListQuotasRegistryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListQuotasRegistryResponse::GetClassData() const { return &_class_data_; }

void ListQuotasRegistryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListQuotasRegistryResponse *>(to)->MergeFrom(
      static_cast<const ListQuotasRegistryResponse &>(from));
}


void ListQuotasRegistryResponse::MergeFrom(const ListQuotasRegistryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.quotas.v1alpha1.ListQuotasRegistryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  quotas_registry_.MergeFrom(from.quotas_registry_);
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListQuotasRegistryResponse::CopyFrom(const ListQuotasRegistryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.quotas.v1alpha1.ListQuotasRegistryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListQuotasRegistryResponse::IsInitialized() const {
  return true;
}

void ListQuotasRegistryResponse::InternalSwap(ListQuotasRegistryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  quotas_registry_.InternalSwap(&other->quotas_registry_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListQuotasRegistryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto_getter, &descriptor_table_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto_once,
      file_level_metadata_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace quotas
}  // namespace artifacts
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest* Arena::CreateMaybeMessage< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse* Arena::CreateMaybeMessage< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest* Arena::CreateMaybeMessage< ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse* Arena::CreateMaybeMessage< ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
