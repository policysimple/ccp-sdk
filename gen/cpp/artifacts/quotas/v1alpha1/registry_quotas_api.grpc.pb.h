// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: artifacts/quotas/v1alpha1/registry_quotas_api.proto
#ifndef GRPC_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto__INCLUDED
#define GRPC_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto__INCLUDED

#include "artifacts/quotas/v1alpha1/registry_quotas_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace artifacts {
namespace quotas {
namespace v1alpha1 {

class RegistryQuotasAPIService final {
 public:
  static constexpr char const* service_full_name() {
    return "artifacts.quotas.v1alpha1.RegistryQuotasAPIService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status ListQuotasRegistry(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest& request, ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse>> AsyncListQuotasRegistry(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse>>(AsyncListQuotasRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse>> PrepareAsyncListQuotasRegistry(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse>>(PrepareAsyncListQuotasRegistryRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateQuotaRegistry(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest& request, ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse>> AsyncUpdateQuotaRegistry(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse>>(AsyncUpdateQuotaRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse>> PrepareAsyncUpdateQuotaRegistry(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse>>(PrepareAsyncUpdateQuotaRegistryRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void ListQuotasRegistry(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest* request, ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateQuotaRegistry(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest* request, ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse>* AsyncListQuotasRegistryRaw(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse>* PrepareAsyncListQuotasRegistryRaw(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse>* AsyncUpdateQuotaRegistryRaw(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse>* PrepareAsyncUpdateQuotaRegistryRaw(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status ListQuotasRegistry(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest& request, ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse>> AsyncListQuotasRegistry(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse>>(AsyncListQuotasRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse>> PrepareAsyncListQuotasRegistry(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse>>(PrepareAsyncListQuotasRegistryRaw(context, request, cq));
    }
    ::grpc::Status UpdateQuotaRegistry(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest& request, ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse>> AsyncUpdateQuotaRegistry(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse>>(AsyncUpdateQuotaRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse>> PrepareAsyncUpdateQuotaRegistry(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse>>(PrepareAsyncUpdateQuotaRegistryRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void ListQuotasRegistry(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest* request, ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateQuotaRegistry(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest* request, ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse>* AsyncListQuotasRegistryRaw(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse>* PrepareAsyncListQuotasRegistryRaw(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse>* AsyncUpdateQuotaRegistryRaw(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse>* PrepareAsyncUpdateQuotaRegistryRaw(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListQuotasRegistry_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateQuotaRegistry_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status ListQuotasRegistry(::grpc::ServerContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest* request, ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse* response);
    virtual ::grpc::Status UpdateQuotaRegistry(::grpc::ServerContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest* request, ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListQuotasRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListQuotasRegistry() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListQuotasRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListQuotasRegistry(::grpc::ServerContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest* request, ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListQuotasRegistry(::grpc::ServerContext* context, ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest* request, ::grpc::ServerAsyncResponseWriter< ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateQuotaRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateQuotaRegistry() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_UpdateQuotaRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateQuotaRegistry(::grpc::ServerContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest* request, ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateQuotaRegistry(::grpc::ServerContext* context, ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest* request, ::grpc::ServerAsyncResponseWriter< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListQuotasRegistry<WithAsyncMethod_UpdateQuotaRegistry<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_ListQuotasRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListQuotasRegistry() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListQuotasRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListQuotasRegistry(::grpc::ServerContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest* request, ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateQuotaRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateQuotaRegistry() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_UpdateQuotaRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateQuotaRegistry(::grpc::ServerContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest* request, ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListQuotasRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListQuotasRegistry() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListQuotasRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListQuotasRegistry(::grpc::ServerContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest* request, ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListQuotasRegistry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateQuotaRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateQuotaRegistry() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_UpdateQuotaRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateQuotaRegistry(::grpc::ServerContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest* request, ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateQuotaRegistry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListQuotasRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListQuotasRegistry() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest, ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse>(std::bind(&WithStreamedUnaryMethod_ListQuotasRegistry<BaseClass>::StreamedListQuotasRegistry, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListQuotasRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListQuotasRegistry(::grpc::ServerContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest* request, ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListQuotasRegistry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest,::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateQuotaRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateQuotaRegistry() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest, ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse>(std::bind(&WithStreamedUnaryMethod_UpdateQuotaRegistry<BaseClass>::StreamedUpdateQuotaRegistry, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateQuotaRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateQuotaRegistry(::grpc::ServerContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest* request, ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateQuotaRegistry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest,::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListQuotasRegistry<WithStreamedUnaryMethod_UpdateQuotaRegistry<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListQuotasRegistry<WithStreamedUnaryMethod_UpdateQuotaRegistry<Service > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace quotas
}  // namespace artifacts


#endif  // GRPC_artifacts_2fquotas_2fv1alpha1_2fregistry_5fquotas_5fapi_2eproto__INCLUDED
