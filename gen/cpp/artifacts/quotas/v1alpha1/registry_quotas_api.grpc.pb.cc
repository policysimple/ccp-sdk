// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: artifacts/quotas/v1alpha1/registry_quotas_api.proto

#include "artifacts/quotas/v1alpha1/registry_quotas_api.pb.h"
#include "artifacts/quotas/v1alpha1/registry_quotas_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace artifacts {
namespace quotas {
namespace v1alpha1 {

static const char* RegistryQuotasAPIService_method_names[] = {
  "/artifacts.quotas.v1alpha1.RegistryQuotasAPIService/ListQuotasRegistry",
  "/artifacts.quotas.v1alpha1.RegistryQuotasAPIService/UpdateQuotaRegistry",
};

std::unique_ptr< RegistryQuotasAPIService::Stub> RegistryQuotasAPIService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RegistryQuotasAPIService::Stub> stub(new RegistryQuotasAPIService::Stub(channel));
  return stub;
}

RegistryQuotasAPIService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_ListQuotasRegistry_(RegistryQuotasAPIService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateQuotaRegistry_(RegistryQuotasAPIService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RegistryQuotasAPIService::Stub::ListQuotasRegistry(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest& request, ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListQuotasRegistry_, context, request, response);
}

void RegistryQuotasAPIService::Stub::experimental_async::ListQuotasRegistry(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest* request, ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListQuotasRegistry_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse>* RegistryQuotasAPIService::Stub::AsyncListQuotasRegistryRaw(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse>::Create(channel_.get(), cq, rpcmethod_ListQuotasRegistry_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse>* RegistryQuotasAPIService::Stub::PrepareAsyncListQuotasRegistryRaw(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse>::Create(channel_.get(), cq, rpcmethod_ListQuotasRegistry_, context, request, false);
}

::grpc::Status RegistryQuotasAPIService::Stub::UpdateQuotaRegistry(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest& request, ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateQuotaRegistry_, context, request, response);
}

void RegistryQuotasAPIService::Stub::experimental_async::UpdateQuotaRegistry(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest* request, ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateQuotaRegistry_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse>* RegistryQuotasAPIService::Stub::AsyncUpdateQuotaRegistryRaw(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse>::Create(channel_.get(), cq, rpcmethod_UpdateQuotaRegistry_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse>* RegistryQuotasAPIService::Stub::PrepareAsyncUpdateQuotaRegistryRaw(::grpc::ClientContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse>::Create(channel_.get(), cq, rpcmethod_UpdateQuotaRegistry_, context, request, false);
}

RegistryQuotasAPIService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RegistryQuotasAPIService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RegistryQuotasAPIService::Service, ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest, ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse>(
          std::mem_fn(&RegistryQuotasAPIService::Service::ListQuotasRegistry), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RegistryQuotasAPIService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RegistryQuotasAPIService::Service, ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest, ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse>(
          std::mem_fn(&RegistryQuotasAPIService::Service::UpdateQuotaRegistry), this)));
}

RegistryQuotasAPIService::Service::~Service() {
}

::grpc::Status RegistryQuotasAPIService::Service::ListQuotasRegistry(::grpc::ServerContext* context, const ::artifacts::quotas::v1alpha1::ListQuotasRegistryRequest* request, ::artifacts::quotas::v1alpha1::ListQuotasRegistryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RegistryQuotasAPIService::Service::UpdateQuotaRegistry(::grpc::ServerContext* context, const ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryRequest* request, ::artifacts::quotas::v1alpha1::UpdateQuotaRegistryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace artifacts
}  // namespace quotas
}  // namespace v1alpha1

