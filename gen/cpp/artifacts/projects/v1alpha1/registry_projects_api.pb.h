// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artifacts/projects/v1alpha1/registry_projects_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "artifacts/projects/v1alpha1/registry_projects.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto;
namespace artifacts {
namespace projects {
namespace v1alpha1 {
class CreateProjectRegistryRequest;
struct CreateProjectRegistryRequestDefaultTypeInternal;
extern CreateProjectRegistryRequestDefaultTypeInternal _CreateProjectRegistryRequest_default_instance_;
class CreateProjectRegistryResponse;
struct CreateProjectRegistryResponseDefaultTypeInternal;
extern CreateProjectRegistryResponseDefaultTypeInternal _CreateProjectRegistryResponse_default_instance_;
class DeleteProjectRegistryRequest;
struct DeleteProjectRegistryRequestDefaultTypeInternal;
extern DeleteProjectRegistryRequestDefaultTypeInternal _DeleteProjectRegistryRequest_default_instance_;
class DeleteProjectRegistryResponse;
struct DeleteProjectRegistryResponseDefaultTypeInternal;
extern DeleteProjectRegistryResponseDefaultTypeInternal _DeleteProjectRegistryResponse_default_instance_;
class ListProjectsRegistryRequest;
struct ListProjectsRegistryRequestDefaultTypeInternal;
extern ListProjectsRegistryRequestDefaultTypeInternal _ListProjectsRegistryRequest_default_instance_;
class ListProjectsRegistryResponse;
struct ListProjectsRegistryResponseDefaultTypeInternal;
extern ListProjectsRegistryResponseDefaultTypeInternal _ListProjectsRegistryResponse_default_instance_;
class UpdateProjectRegistryRequest;
struct UpdateProjectRegistryRequestDefaultTypeInternal;
extern UpdateProjectRegistryRequestDefaultTypeInternal _UpdateProjectRegistryRequest_default_instance_;
class UpdateProjectRegistryResponse;
struct UpdateProjectRegistryResponseDefaultTypeInternal;
extern UpdateProjectRegistryResponseDefaultTypeInternal _UpdateProjectRegistryResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace projects
}  // namespace artifacts
PROTOBUF_NAMESPACE_OPEN
template<> ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest* Arena::CreateMaybeMessage<::artifacts::projects::v1alpha1::CreateProjectRegistryRequest>(Arena*);
template<> ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse* Arena::CreateMaybeMessage<::artifacts::projects::v1alpha1::CreateProjectRegistryResponse>(Arena*);
template<> ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest* Arena::CreateMaybeMessage<::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest>(Arena*);
template<> ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse* Arena::CreateMaybeMessage<::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse>(Arena*);
template<> ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest* Arena::CreateMaybeMessage<::artifacts::projects::v1alpha1::ListProjectsRegistryRequest>(Arena*);
template<> ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse* Arena::CreateMaybeMessage<::artifacts::projects::v1alpha1::ListProjectsRegistryResponse>(Arena*);
template<> ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest* Arena::CreateMaybeMessage<::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest>(Arena*);
template<> ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse* Arena::CreateMaybeMessage<::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace artifacts {
namespace projects {
namespace v1alpha1 {

// ===================================================================

class CreateProjectRegistryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artifacts.projects.v1alpha1.CreateProjectRegistryRequest) */ {
 public:
  inline CreateProjectRegistryRequest() : CreateProjectRegistryRequest(nullptr) {}
  ~CreateProjectRegistryRequest() override;
  explicit constexpr CreateProjectRegistryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateProjectRegistryRequest(const CreateProjectRegistryRequest& from);
  CreateProjectRegistryRequest(CreateProjectRegistryRequest&& from) noexcept
    : CreateProjectRegistryRequest() {
    *this = ::std::move(from);
  }

  inline CreateProjectRegistryRequest& operator=(const CreateProjectRegistryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateProjectRegistryRequest& operator=(CreateProjectRegistryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateProjectRegistryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateProjectRegistryRequest* internal_default_instance() {
    return reinterpret_cast<const CreateProjectRegistryRequest*>(
               &_CreateProjectRegistryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateProjectRegistryRequest& a, CreateProjectRegistryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateProjectRegistryRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateProjectRegistryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateProjectRegistryRequest* New() const final {
    return new CreateProjectRegistryRequest();
  }

  CreateProjectRegistryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateProjectRegistryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateProjectRegistryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateProjectRegistryRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateProjectRegistryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artifacts.projects.v1alpha1.CreateProjectRegistryRequest";
  }
  protected:
  explicit CreateProjectRegistryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectRegistryFieldNumber = 1,
  };
  // .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
  bool has_project_registry() const;
  private:
  bool _internal_has_project_registry() const;
  public:
  void clear_project_registry();
  const ::artifacts::projects::v1alpha1::ProjectsRegistry& project_registry() const;
  PROTOBUF_MUST_USE_RESULT ::artifacts::projects::v1alpha1::ProjectsRegistry* release_project_registry();
  ::artifacts::projects::v1alpha1::ProjectsRegistry* mutable_project_registry();
  void set_allocated_project_registry(::artifacts::projects::v1alpha1::ProjectsRegistry* project_registry);
  private:
  const ::artifacts::projects::v1alpha1::ProjectsRegistry& _internal_project_registry() const;
  ::artifacts::projects::v1alpha1::ProjectsRegistry* _internal_mutable_project_registry();
  public:
  void unsafe_arena_set_allocated_project_registry(
      ::artifacts::projects::v1alpha1::ProjectsRegistry* project_registry);
  ::artifacts::projects::v1alpha1::ProjectsRegistry* unsafe_arena_release_project_registry();

  // @@protoc_insertion_point(class_scope:artifacts.projects.v1alpha1.CreateProjectRegistryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::artifacts::projects::v1alpha1::ProjectsRegistry* project_registry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateProjectRegistryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artifacts.projects.v1alpha1.CreateProjectRegistryResponse) */ {
 public:
  inline CreateProjectRegistryResponse() : CreateProjectRegistryResponse(nullptr) {}
  ~CreateProjectRegistryResponse() override;
  explicit constexpr CreateProjectRegistryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateProjectRegistryResponse(const CreateProjectRegistryResponse& from);
  CreateProjectRegistryResponse(CreateProjectRegistryResponse&& from) noexcept
    : CreateProjectRegistryResponse() {
    *this = ::std::move(from);
  }

  inline CreateProjectRegistryResponse& operator=(const CreateProjectRegistryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateProjectRegistryResponse& operator=(CreateProjectRegistryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateProjectRegistryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateProjectRegistryResponse* internal_default_instance() {
    return reinterpret_cast<const CreateProjectRegistryResponse*>(
               &_CreateProjectRegistryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateProjectRegistryResponse& a, CreateProjectRegistryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateProjectRegistryResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateProjectRegistryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateProjectRegistryResponse* New() const final {
    return new CreateProjectRegistryResponse();
  }

  CreateProjectRegistryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateProjectRegistryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateProjectRegistryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateProjectRegistryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateProjectRegistryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artifacts.projects.v1alpha1.CreateProjectRegistryResponse";
  }
  protected:
  explicit CreateProjectRegistryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kProjectRegistryFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
  bool has_project_registry() const;
  private:
  bool _internal_has_project_registry() const;
  public:
  void clear_project_registry();
  const ::artifacts::projects::v1alpha1::ProjectsRegistry& project_registry() const;
  PROTOBUF_MUST_USE_RESULT ::artifacts::projects::v1alpha1::ProjectsRegistry* release_project_registry();
  ::artifacts::projects::v1alpha1::ProjectsRegistry* mutable_project_registry();
  void set_allocated_project_registry(::artifacts::projects::v1alpha1::ProjectsRegistry* project_registry);
  private:
  const ::artifacts::projects::v1alpha1::ProjectsRegistry& _internal_project_registry() const;
  ::artifacts::projects::v1alpha1::ProjectsRegistry* _internal_mutable_project_registry();
  public:
  void unsafe_arena_set_allocated_project_registry(
      ::artifacts::projects::v1alpha1::ProjectsRegistry* project_registry);
  ::artifacts::projects::v1alpha1::ProjectsRegistry* unsafe_arena_release_project_registry();

  // @@protoc_insertion_point(class_scope:artifacts.projects.v1alpha1.CreateProjectRegistryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::artifacts::projects::v1alpha1::ProjectsRegistry* project_registry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UpdateProjectRegistryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artifacts.projects.v1alpha1.UpdateProjectRegistryRequest) */ {
 public:
  inline UpdateProjectRegistryRequest() : UpdateProjectRegistryRequest(nullptr) {}
  ~UpdateProjectRegistryRequest() override;
  explicit constexpr UpdateProjectRegistryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateProjectRegistryRequest(const UpdateProjectRegistryRequest& from);
  UpdateProjectRegistryRequest(UpdateProjectRegistryRequest&& from) noexcept
    : UpdateProjectRegistryRequest() {
    *this = ::std::move(from);
  }

  inline UpdateProjectRegistryRequest& operator=(const UpdateProjectRegistryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateProjectRegistryRequest& operator=(UpdateProjectRegistryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateProjectRegistryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateProjectRegistryRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateProjectRegistryRequest*>(
               &_UpdateProjectRegistryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateProjectRegistryRequest& a, UpdateProjectRegistryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateProjectRegistryRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateProjectRegistryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateProjectRegistryRequest* New() const final {
    return new UpdateProjectRegistryRequest();
  }

  UpdateProjectRegistryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateProjectRegistryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateProjectRegistryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateProjectRegistryRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateProjectRegistryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artifacts.projects.v1alpha1.UpdateProjectRegistryRequest";
  }
  protected:
  explicit UpdateProjectRegistryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectRegistryFieldNumber = 1,
  };
  // .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
  bool has_project_registry() const;
  private:
  bool _internal_has_project_registry() const;
  public:
  void clear_project_registry();
  const ::artifacts::projects::v1alpha1::ProjectsRegistry& project_registry() const;
  PROTOBUF_MUST_USE_RESULT ::artifacts::projects::v1alpha1::ProjectsRegistry* release_project_registry();
  ::artifacts::projects::v1alpha1::ProjectsRegistry* mutable_project_registry();
  void set_allocated_project_registry(::artifacts::projects::v1alpha1::ProjectsRegistry* project_registry);
  private:
  const ::artifacts::projects::v1alpha1::ProjectsRegistry& _internal_project_registry() const;
  ::artifacts::projects::v1alpha1::ProjectsRegistry* _internal_mutable_project_registry();
  public:
  void unsafe_arena_set_allocated_project_registry(
      ::artifacts::projects::v1alpha1::ProjectsRegistry* project_registry);
  ::artifacts::projects::v1alpha1::ProjectsRegistry* unsafe_arena_release_project_registry();

  // @@protoc_insertion_point(class_scope:artifacts.projects.v1alpha1.UpdateProjectRegistryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::artifacts::projects::v1alpha1::ProjectsRegistry* project_registry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UpdateProjectRegistryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artifacts.projects.v1alpha1.UpdateProjectRegistryResponse) */ {
 public:
  inline UpdateProjectRegistryResponse() : UpdateProjectRegistryResponse(nullptr) {}
  ~UpdateProjectRegistryResponse() override;
  explicit constexpr UpdateProjectRegistryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateProjectRegistryResponse(const UpdateProjectRegistryResponse& from);
  UpdateProjectRegistryResponse(UpdateProjectRegistryResponse&& from) noexcept
    : UpdateProjectRegistryResponse() {
    *this = ::std::move(from);
  }

  inline UpdateProjectRegistryResponse& operator=(const UpdateProjectRegistryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateProjectRegistryResponse& operator=(UpdateProjectRegistryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateProjectRegistryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateProjectRegistryResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateProjectRegistryResponse*>(
               &_UpdateProjectRegistryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateProjectRegistryResponse& a, UpdateProjectRegistryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateProjectRegistryResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateProjectRegistryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateProjectRegistryResponse* New() const final {
    return new UpdateProjectRegistryResponse();
  }

  UpdateProjectRegistryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateProjectRegistryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateProjectRegistryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateProjectRegistryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateProjectRegistryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artifacts.projects.v1alpha1.UpdateProjectRegistryResponse";
  }
  protected:
  explicit UpdateProjectRegistryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kProjectRegistryFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
  bool has_project_registry() const;
  private:
  bool _internal_has_project_registry() const;
  public:
  void clear_project_registry();
  const ::artifacts::projects::v1alpha1::ProjectsRegistry& project_registry() const;
  PROTOBUF_MUST_USE_RESULT ::artifacts::projects::v1alpha1::ProjectsRegistry* release_project_registry();
  ::artifacts::projects::v1alpha1::ProjectsRegistry* mutable_project_registry();
  void set_allocated_project_registry(::artifacts::projects::v1alpha1::ProjectsRegistry* project_registry);
  private:
  const ::artifacts::projects::v1alpha1::ProjectsRegistry& _internal_project_registry() const;
  ::artifacts::projects::v1alpha1::ProjectsRegistry* _internal_mutable_project_registry();
  public:
  void unsafe_arena_set_allocated_project_registry(
      ::artifacts::projects::v1alpha1::ProjectsRegistry* project_registry);
  ::artifacts::projects::v1alpha1::ProjectsRegistry* unsafe_arena_release_project_registry();

  // @@protoc_insertion_point(class_scope:artifacts.projects.v1alpha1.UpdateProjectRegistryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::artifacts::projects::v1alpha1::ProjectsRegistry* project_registry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ListProjectsRegistryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artifacts.projects.v1alpha1.ListProjectsRegistryRequest) */ {
 public:
  inline ListProjectsRegistryRequest() : ListProjectsRegistryRequest(nullptr) {}
  ~ListProjectsRegistryRequest() override;
  explicit constexpr ListProjectsRegistryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProjectsRegistryRequest(const ListProjectsRegistryRequest& from);
  ListProjectsRegistryRequest(ListProjectsRegistryRequest&& from) noexcept
    : ListProjectsRegistryRequest() {
    *this = ::std::move(from);
  }

  inline ListProjectsRegistryRequest& operator=(const ListProjectsRegistryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProjectsRegistryRequest& operator=(ListProjectsRegistryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListProjectsRegistryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProjectsRegistryRequest* internal_default_instance() {
    return reinterpret_cast<const ListProjectsRegistryRequest*>(
               &_ListProjectsRegistryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListProjectsRegistryRequest& a, ListProjectsRegistryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProjectsRegistryRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProjectsRegistryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListProjectsRegistryRequest* New() const final {
    return new ListProjectsRegistryRequest();
  }

  ListProjectsRegistryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListProjectsRegistryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListProjectsRegistryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListProjectsRegistryRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProjectsRegistryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artifacts.projects.v1alpha1.ListProjectsRegistryRequest";
  }
  protected:
  explicit ListProjectsRegistryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueryFieldNumber = 3,
    kSortFieldNumber = 6,
    kOrganizationIdFieldNumber = 1,
    kProjectIdFieldNumber = 2,
    kPageFieldNumber = 4,
    kSizeFieldNumber = 5,
    kPublicFieldNumber = 7,
    kWithDetailFieldNumber = 8,
  };
  // string query = 3 [json_name = "query"];
  void clear_query();
  const std::string& query() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_query(ArgT0&& arg0, ArgT... args);
  std::string* mutable_query();
  PROTOBUF_MUST_USE_RESULT std::string* release_query();
  void set_allocated_query(std::string* query);
  private:
  const std::string& _internal_query() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_query(const std::string& value);
  std::string* _internal_mutable_query();
  public:

  // string sort = 6 [json_name = "sort"];
  void clear_sort();
  const std::string& sort() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sort(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sort();
  PROTOBUF_MUST_USE_RESULT std::string* release_sort();
  void set_allocated_sort(std::string* sort);
  private:
  const std::string& _internal_sort() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sort(const std::string& value);
  std::string* _internal_mutable_sort();
  public:

  // uint32 organization_id = 1 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 project_id = 2 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 page = 4 [json_name = "page"];
  void clear_page();
  ::PROTOBUF_NAMESPACE_ID::uint32 page() const;
  void set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_page() const;
  void _internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 size = 5 [json_name = "size"];
  void clear_size();
  ::PROTOBUF_NAMESPACE_ID::uint32 size() const;
  void set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_size() const;
  void _internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool public = 7 [json_name = "public"];
  void clear_public_();
  bool public_() const;
  void set_public_(bool value);
  private:
  bool _internal_public_() const;
  void _internal_set_public_(bool value);
  public:

  // bool with_detail = 8 [json_name = "withDetail"];
  void clear_with_detail();
  bool with_detail() const;
  void set_with_detail(bool value);
  private:
  bool _internal_with_detail() const;
  void _internal_set_with_detail(bool value);
  public:

  // @@protoc_insertion_point(class_scope:artifacts.projects.v1alpha1.ListProjectsRegistryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr query_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sort_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 page_;
  ::PROTOBUF_NAMESPACE_ID::uint32 size_;
  bool public__;
  bool with_detail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ListProjectsRegistryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artifacts.projects.v1alpha1.ListProjectsRegistryResponse) */ {
 public:
  inline ListProjectsRegistryResponse() : ListProjectsRegistryResponse(nullptr) {}
  ~ListProjectsRegistryResponse() override;
  explicit constexpr ListProjectsRegistryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListProjectsRegistryResponse(const ListProjectsRegistryResponse& from);
  ListProjectsRegistryResponse(ListProjectsRegistryResponse&& from) noexcept
    : ListProjectsRegistryResponse() {
    *this = ::std::move(from);
  }

  inline ListProjectsRegistryResponse& operator=(const ListProjectsRegistryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListProjectsRegistryResponse& operator=(ListProjectsRegistryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListProjectsRegistryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListProjectsRegistryResponse* internal_default_instance() {
    return reinterpret_cast<const ListProjectsRegistryResponse*>(
               &_ListProjectsRegistryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListProjectsRegistryResponse& a, ListProjectsRegistryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListProjectsRegistryResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListProjectsRegistryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListProjectsRegistryResponse* New() const final {
    return new ListProjectsRegistryResponse();
  }

  ListProjectsRegistryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListProjectsRegistryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListProjectsRegistryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListProjectsRegistryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListProjectsRegistryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artifacts.projects.v1alpha1.ListProjectsRegistryResponse";
  }
  protected:
  explicit ListProjectsRegistryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectRegistryFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // repeated .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
  int project_registry_size() const;
  private:
  int _internal_project_registry_size() const;
  public:
  void clear_project_registry();
  ::artifacts::projects::v1alpha1::ProjectsRegistry* mutable_project_registry(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artifacts::projects::v1alpha1::ProjectsRegistry >*
      mutable_project_registry();
  private:
  const ::artifacts::projects::v1alpha1::ProjectsRegistry& _internal_project_registry(int index) const;
  ::artifacts::projects::v1alpha1::ProjectsRegistry* _internal_add_project_registry();
  public:
  const ::artifacts::projects::v1alpha1::ProjectsRegistry& project_registry(int index) const;
  ::artifacts::projects::v1alpha1::ProjectsRegistry* add_project_registry();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artifacts::projects::v1alpha1::ProjectsRegistry >&
      project_registry() const;

  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:artifacts.projects.v1alpha1.ListProjectsRegistryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artifacts::projects::v1alpha1::ProjectsRegistry > project_registry_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteProjectRegistryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artifacts.projects.v1alpha1.DeleteProjectRegistryRequest) */ {
 public:
  inline DeleteProjectRegistryRequest() : DeleteProjectRegistryRequest(nullptr) {}
  ~DeleteProjectRegistryRequest() override;
  explicit constexpr DeleteProjectRegistryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteProjectRegistryRequest(const DeleteProjectRegistryRequest& from);
  DeleteProjectRegistryRequest(DeleteProjectRegistryRequest&& from) noexcept
    : DeleteProjectRegistryRequest() {
    *this = ::std::move(from);
  }

  inline DeleteProjectRegistryRequest& operator=(const DeleteProjectRegistryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteProjectRegistryRequest& operator=(DeleteProjectRegistryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteProjectRegistryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteProjectRegistryRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteProjectRegistryRequest*>(
               &_DeleteProjectRegistryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteProjectRegistryRequest& a, DeleteProjectRegistryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteProjectRegistryRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteProjectRegistryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteProjectRegistryRequest* New() const final {
    return new DeleteProjectRegistryRequest();
  }

  DeleteProjectRegistryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteProjectRegistryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteProjectRegistryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteProjectRegistryRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteProjectRegistryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artifacts.projects.v1alpha1.DeleteProjectRegistryRequest";
  }
  protected:
  explicit DeleteProjectRegistryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectRegistryIdFieldNumber = 1,
  };
  // uint32 project_registry_id = 1 [json_name = "projectRegistryId"];
  void clear_project_registry_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_registry_id() const;
  void set_project_registry_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_registry_id() const;
  void _internal_set_project_registry_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:artifacts.projects.v1alpha1.DeleteProjectRegistryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_registry_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteProjectRegistryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artifacts.projects.v1alpha1.DeleteProjectRegistryResponse) */ {
 public:
  inline DeleteProjectRegistryResponse() : DeleteProjectRegistryResponse(nullptr) {}
  ~DeleteProjectRegistryResponse() override;
  explicit constexpr DeleteProjectRegistryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteProjectRegistryResponse(const DeleteProjectRegistryResponse& from);
  DeleteProjectRegistryResponse(DeleteProjectRegistryResponse&& from) noexcept
    : DeleteProjectRegistryResponse() {
    *this = ::std::move(from);
  }

  inline DeleteProjectRegistryResponse& operator=(const DeleteProjectRegistryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteProjectRegistryResponse& operator=(DeleteProjectRegistryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteProjectRegistryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteProjectRegistryResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteProjectRegistryResponse*>(
               &_DeleteProjectRegistryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteProjectRegistryResponse& a, DeleteProjectRegistryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteProjectRegistryResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteProjectRegistryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteProjectRegistryResponse* New() const final {
    return new DeleteProjectRegistryResponse();
  }

  DeleteProjectRegistryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteProjectRegistryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteProjectRegistryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteProjectRegistryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteProjectRegistryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artifacts.projects.v1alpha1.DeleteProjectRegistryResponse";
  }
  protected:
  explicit DeleteProjectRegistryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:artifacts.projects.v1alpha1.DeleteProjectRegistryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateProjectRegistryRequest

// .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
inline bool CreateProjectRegistryRequest::_internal_has_project_registry() const {
  return this != internal_default_instance() && project_registry_ != nullptr;
}
inline bool CreateProjectRegistryRequest::has_project_registry() const {
  return _internal_has_project_registry();
}
inline const ::artifacts::projects::v1alpha1::ProjectsRegistry& CreateProjectRegistryRequest::_internal_project_registry() const {
  const ::artifacts::projects::v1alpha1::ProjectsRegistry* p = project_registry_;
  return p != nullptr ? *p : reinterpret_cast<const ::artifacts::projects::v1alpha1::ProjectsRegistry&>(
      ::artifacts::projects::v1alpha1::_ProjectsRegistry_default_instance_);
}
inline const ::artifacts::projects::v1alpha1::ProjectsRegistry& CreateProjectRegistryRequest::project_registry() const {
  // @@protoc_insertion_point(field_get:artifacts.projects.v1alpha1.CreateProjectRegistryRequest.project_registry)
  return _internal_project_registry();
}
inline void CreateProjectRegistryRequest::unsafe_arena_set_allocated_project_registry(
    ::artifacts::projects::v1alpha1::ProjectsRegistry* project_registry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(project_registry_);
  }
  project_registry_ = project_registry;
  if (project_registry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:artifacts.projects.v1alpha1.CreateProjectRegistryRequest.project_registry)
}
inline ::artifacts::projects::v1alpha1::ProjectsRegistry* CreateProjectRegistryRequest::release_project_registry() {
  
  ::artifacts::projects::v1alpha1::ProjectsRegistry* temp = project_registry_;
  project_registry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::artifacts::projects::v1alpha1::ProjectsRegistry* CreateProjectRegistryRequest::unsafe_arena_release_project_registry() {
  // @@protoc_insertion_point(field_release:artifacts.projects.v1alpha1.CreateProjectRegistryRequest.project_registry)
  
  ::artifacts::projects::v1alpha1::ProjectsRegistry* temp = project_registry_;
  project_registry_ = nullptr;
  return temp;
}
inline ::artifacts::projects::v1alpha1::ProjectsRegistry* CreateProjectRegistryRequest::_internal_mutable_project_registry() {
  
  if (project_registry_ == nullptr) {
    auto* p = CreateMaybeMessage<::artifacts::projects::v1alpha1::ProjectsRegistry>(GetArenaForAllocation());
    project_registry_ = p;
  }
  return project_registry_;
}
inline ::artifacts::projects::v1alpha1::ProjectsRegistry* CreateProjectRegistryRequest::mutable_project_registry() {
  ::artifacts::projects::v1alpha1::ProjectsRegistry* _msg = _internal_mutable_project_registry();
  // @@protoc_insertion_point(field_mutable:artifacts.projects.v1alpha1.CreateProjectRegistryRequest.project_registry)
  return _msg;
}
inline void CreateProjectRegistryRequest::set_allocated_project_registry(::artifacts::projects::v1alpha1::ProjectsRegistry* project_registry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(project_registry_);
  }
  if (project_registry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(project_registry));
    if (message_arena != submessage_arena) {
      project_registry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, project_registry, submessage_arena);
    }
    
  } else {
    
  }
  project_registry_ = project_registry;
  // @@protoc_insertion_point(field_set_allocated:artifacts.projects.v1alpha1.CreateProjectRegistryRequest.project_registry)
}

// -------------------------------------------------------------------

// CreateProjectRegistryResponse

// .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
inline bool CreateProjectRegistryResponse::_internal_has_project_registry() const {
  return this != internal_default_instance() && project_registry_ != nullptr;
}
inline bool CreateProjectRegistryResponse::has_project_registry() const {
  return _internal_has_project_registry();
}
inline const ::artifacts::projects::v1alpha1::ProjectsRegistry& CreateProjectRegistryResponse::_internal_project_registry() const {
  const ::artifacts::projects::v1alpha1::ProjectsRegistry* p = project_registry_;
  return p != nullptr ? *p : reinterpret_cast<const ::artifacts::projects::v1alpha1::ProjectsRegistry&>(
      ::artifacts::projects::v1alpha1::_ProjectsRegistry_default_instance_);
}
inline const ::artifacts::projects::v1alpha1::ProjectsRegistry& CreateProjectRegistryResponse::project_registry() const {
  // @@protoc_insertion_point(field_get:artifacts.projects.v1alpha1.CreateProjectRegistryResponse.project_registry)
  return _internal_project_registry();
}
inline void CreateProjectRegistryResponse::unsafe_arena_set_allocated_project_registry(
    ::artifacts::projects::v1alpha1::ProjectsRegistry* project_registry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(project_registry_);
  }
  project_registry_ = project_registry;
  if (project_registry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:artifacts.projects.v1alpha1.CreateProjectRegistryResponse.project_registry)
}
inline ::artifacts::projects::v1alpha1::ProjectsRegistry* CreateProjectRegistryResponse::release_project_registry() {
  
  ::artifacts::projects::v1alpha1::ProjectsRegistry* temp = project_registry_;
  project_registry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::artifacts::projects::v1alpha1::ProjectsRegistry* CreateProjectRegistryResponse::unsafe_arena_release_project_registry() {
  // @@protoc_insertion_point(field_release:artifacts.projects.v1alpha1.CreateProjectRegistryResponse.project_registry)
  
  ::artifacts::projects::v1alpha1::ProjectsRegistry* temp = project_registry_;
  project_registry_ = nullptr;
  return temp;
}
inline ::artifacts::projects::v1alpha1::ProjectsRegistry* CreateProjectRegistryResponse::_internal_mutable_project_registry() {
  
  if (project_registry_ == nullptr) {
    auto* p = CreateMaybeMessage<::artifacts::projects::v1alpha1::ProjectsRegistry>(GetArenaForAllocation());
    project_registry_ = p;
  }
  return project_registry_;
}
inline ::artifacts::projects::v1alpha1::ProjectsRegistry* CreateProjectRegistryResponse::mutable_project_registry() {
  ::artifacts::projects::v1alpha1::ProjectsRegistry* _msg = _internal_mutable_project_registry();
  // @@protoc_insertion_point(field_mutable:artifacts.projects.v1alpha1.CreateProjectRegistryResponse.project_registry)
  return _msg;
}
inline void CreateProjectRegistryResponse::set_allocated_project_registry(::artifacts::projects::v1alpha1::ProjectsRegistry* project_registry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(project_registry_);
  }
  if (project_registry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(project_registry));
    if (message_arena != submessage_arena) {
      project_registry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, project_registry, submessage_arena);
    }
    
  } else {
    
  }
  project_registry_ = project_registry;
  // @@protoc_insertion_point(field_set_allocated:artifacts.projects.v1alpha1.CreateProjectRegistryResponse.project_registry)
}

// string status = 2 [json_name = "status"];
inline void CreateProjectRegistryResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& CreateProjectRegistryResponse::status() const {
  // @@protoc_insertion_point(field_get:artifacts.projects.v1alpha1.CreateProjectRegistryResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateProjectRegistryResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.projects.v1alpha1.CreateProjectRegistryResponse.status)
}
inline std::string* CreateProjectRegistryResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:artifacts.projects.v1alpha1.CreateProjectRegistryResponse.status)
  return _s;
}
inline const std::string& CreateProjectRegistryResponse::_internal_status() const {
  return status_.Get();
}
inline void CreateProjectRegistryResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateProjectRegistryResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateProjectRegistryResponse::release_status() {
  // @@protoc_insertion_point(field_release:artifacts.projects.v1alpha1.CreateProjectRegistryResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateProjectRegistryResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.projects.v1alpha1.CreateProjectRegistryResponse.status)
}

// -------------------------------------------------------------------

// UpdateProjectRegistryRequest

// .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
inline bool UpdateProjectRegistryRequest::_internal_has_project_registry() const {
  return this != internal_default_instance() && project_registry_ != nullptr;
}
inline bool UpdateProjectRegistryRequest::has_project_registry() const {
  return _internal_has_project_registry();
}
inline const ::artifacts::projects::v1alpha1::ProjectsRegistry& UpdateProjectRegistryRequest::_internal_project_registry() const {
  const ::artifacts::projects::v1alpha1::ProjectsRegistry* p = project_registry_;
  return p != nullptr ? *p : reinterpret_cast<const ::artifacts::projects::v1alpha1::ProjectsRegistry&>(
      ::artifacts::projects::v1alpha1::_ProjectsRegistry_default_instance_);
}
inline const ::artifacts::projects::v1alpha1::ProjectsRegistry& UpdateProjectRegistryRequest::project_registry() const {
  // @@protoc_insertion_point(field_get:artifacts.projects.v1alpha1.UpdateProjectRegistryRequest.project_registry)
  return _internal_project_registry();
}
inline void UpdateProjectRegistryRequest::unsafe_arena_set_allocated_project_registry(
    ::artifacts::projects::v1alpha1::ProjectsRegistry* project_registry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(project_registry_);
  }
  project_registry_ = project_registry;
  if (project_registry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:artifacts.projects.v1alpha1.UpdateProjectRegistryRequest.project_registry)
}
inline ::artifacts::projects::v1alpha1::ProjectsRegistry* UpdateProjectRegistryRequest::release_project_registry() {
  
  ::artifacts::projects::v1alpha1::ProjectsRegistry* temp = project_registry_;
  project_registry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::artifacts::projects::v1alpha1::ProjectsRegistry* UpdateProjectRegistryRequest::unsafe_arena_release_project_registry() {
  // @@protoc_insertion_point(field_release:artifacts.projects.v1alpha1.UpdateProjectRegistryRequest.project_registry)
  
  ::artifacts::projects::v1alpha1::ProjectsRegistry* temp = project_registry_;
  project_registry_ = nullptr;
  return temp;
}
inline ::artifacts::projects::v1alpha1::ProjectsRegistry* UpdateProjectRegistryRequest::_internal_mutable_project_registry() {
  
  if (project_registry_ == nullptr) {
    auto* p = CreateMaybeMessage<::artifacts::projects::v1alpha1::ProjectsRegistry>(GetArenaForAllocation());
    project_registry_ = p;
  }
  return project_registry_;
}
inline ::artifacts::projects::v1alpha1::ProjectsRegistry* UpdateProjectRegistryRequest::mutable_project_registry() {
  ::artifacts::projects::v1alpha1::ProjectsRegistry* _msg = _internal_mutable_project_registry();
  // @@protoc_insertion_point(field_mutable:artifacts.projects.v1alpha1.UpdateProjectRegistryRequest.project_registry)
  return _msg;
}
inline void UpdateProjectRegistryRequest::set_allocated_project_registry(::artifacts::projects::v1alpha1::ProjectsRegistry* project_registry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(project_registry_);
  }
  if (project_registry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(project_registry));
    if (message_arena != submessage_arena) {
      project_registry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, project_registry, submessage_arena);
    }
    
  } else {
    
  }
  project_registry_ = project_registry;
  // @@protoc_insertion_point(field_set_allocated:artifacts.projects.v1alpha1.UpdateProjectRegistryRequest.project_registry)
}

// -------------------------------------------------------------------

// UpdateProjectRegistryResponse

// .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
inline bool UpdateProjectRegistryResponse::_internal_has_project_registry() const {
  return this != internal_default_instance() && project_registry_ != nullptr;
}
inline bool UpdateProjectRegistryResponse::has_project_registry() const {
  return _internal_has_project_registry();
}
inline const ::artifacts::projects::v1alpha1::ProjectsRegistry& UpdateProjectRegistryResponse::_internal_project_registry() const {
  const ::artifacts::projects::v1alpha1::ProjectsRegistry* p = project_registry_;
  return p != nullptr ? *p : reinterpret_cast<const ::artifacts::projects::v1alpha1::ProjectsRegistry&>(
      ::artifacts::projects::v1alpha1::_ProjectsRegistry_default_instance_);
}
inline const ::artifacts::projects::v1alpha1::ProjectsRegistry& UpdateProjectRegistryResponse::project_registry() const {
  // @@protoc_insertion_point(field_get:artifacts.projects.v1alpha1.UpdateProjectRegistryResponse.project_registry)
  return _internal_project_registry();
}
inline void UpdateProjectRegistryResponse::unsafe_arena_set_allocated_project_registry(
    ::artifacts::projects::v1alpha1::ProjectsRegistry* project_registry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(project_registry_);
  }
  project_registry_ = project_registry;
  if (project_registry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:artifacts.projects.v1alpha1.UpdateProjectRegistryResponse.project_registry)
}
inline ::artifacts::projects::v1alpha1::ProjectsRegistry* UpdateProjectRegistryResponse::release_project_registry() {
  
  ::artifacts::projects::v1alpha1::ProjectsRegistry* temp = project_registry_;
  project_registry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::artifacts::projects::v1alpha1::ProjectsRegistry* UpdateProjectRegistryResponse::unsafe_arena_release_project_registry() {
  // @@protoc_insertion_point(field_release:artifacts.projects.v1alpha1.UpdateProjectRegistryResponse.project_registry)
  
  ::artifacts::projects::v1alpha1::ProjectsRegistry* temp = project_registry_;
  project_registry_ = nullptr;
  return temp;
}
inline ::artifacts::projects::v1alpha1::ProjectsRegistry* UpdateProjectRegistryResponse::_internal_mutable_project_registry() {
  
  if (project_registry_ == nullptr) {
    auto* p = CreateMaybeMessage<::artifacts::projects::v1alpha1::ProjectsRegistry>(GetArenaForAllocation());
    project_registry_ = p;
  }
  return project_registry_;
}
inline ::artifacts::projects::v1alpha1::ProjectsRegistry* UpdateProjectRegistryResponse::mutable_project_registry() {
  ::artifacts::projects::v1alpha1::ProjectsRegistry* _msg = _internal_mutable_project_registry();
  // @@protoc_insertion_point(field_mutable:artifacts.projects.v1alpha1.UpdateProjectRegistryResponse.project_registry)
  return _msg;
}
inline void UpdateProjectRegistryResponse::set_allocated_project_registry(::artifacts::projects::v1alpha1::ProjectsRegistry* project_registry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(project_registry_);
  }
  if (project_registry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(project_registry));
    if (message_arena != submessage_arena) {
      project_registry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, project_registry, submessage_arena);
    }
    
  } else {
    
  }
  project_registry_ = project_registry;
  // @@protoc_insertion_point(field_set_allocated:artifacts.projects.v1alpha1.UpdateProjectRegistryResponse.project_registry)
}

// string status = 2 [json_name = "status"];
inline void UpdateProjectRegistryResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& UpdateProjectRegistryResponse::status() const {
  // @@protoc_insertion_point(field_get:artifacts.projects.v1alpha1.UpdateProjectRegistryResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateProjectRegistryResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.projects.v1alpha1.UpdateProjectRegistryResponse.status)
}
inline std::string* UpdateProjectRegistryResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:artifacts.projects.v1alpha1.UpdateProjectRegistryResponse.status)
  return _s;
}
inline const std::string& UpdateProjectRegistryResponse::_internal_status() const {
  return status_.Get();
}
inline void UpdateProjectRegistryResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateProjectRegistryResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateProjectRegistryResponse::release_status() {
  // @@protoc_insertion_point(field_release:artifacts.projects.v1alpha1.UpdateProjectRegistryResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateProjectRegistryResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.projects.v1alpha1.UpdateProjectRegistryResponse.status)
}

// -------------------------------------------------------------------

// ListProjectsRegistryRequest

// uint32 organization_id = 1 [json_name = "organizationId"];
inline void ListProjectsRegistryRequest::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListProjectsRegistryRequest::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListProjectsRegistryRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.organization_id)
  return _internal_organization_id();
}
inline void ListProjectsRegistryRequest::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void ListProjectsRegistryRequest::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.organization_id)
}

// uint32 project_id = 2 [json_name = "projectId"];
inline void ListProjectsRegistryRequest::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListProjectsRegistryRequest::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListProjectsRegistryRequest::project_id() const {
  // @@protoc_insertion_point(field_get:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.project_id)
  return _internal_project_id();
}
inline void ListProjectsRegistryRequest::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void ListProjectsRegistryRequest::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.project_id)
}

// string query = 3 [json_name = "query"];
inline void ListProjectsRegistryRequest::clear_query() {
  query_.ClearToEmpty();
}
inline const std::string& ListProjectsRegistryRequest::query() const {
  // @@protoc_insertion_point(field_get:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.query)
  return _internal_query();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListProjectsRegistryRequest::set_query(ArgT0&& arg0, ArgT... args) {
 
 query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.query)
}
inline std::string* ListProjectsRegistryRequest::mutable_query() {
  std::string* _s = _internal_mutable_query();
  // @@protoc_insertion_point(field_mutable:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.query)
  return _s;
}
inline const std::string& ListProjectsRegistryRequest::_internal_query() const {
  return query_.Get();
}
inline void ListProjectsRegistryRequest::_internal_set_query(const std::string& value) {
  
  query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListProjectsRegistryRequest::_internal_mutable_query() {
  
  return query_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListProjectsRegistryRequest::release_query() {
  // @@protoc_insertion_point(field_release:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.query)
  return query_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListProjectsRegistryRequest::set_allocated_query(std::string* query) {
  if (query != nullptr) {
    
  } else {
    
  }
  query_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), query,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.query)
}

// uint32 page = 4 [json_name = "page"];
inline void ListProjectsRegistryRequest::clear_page() {
  page_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListProjectsRegistryRequest::_internal_page() const {
  return page_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListProjectsRegistryRequest::page() const {
  // @@protoc_insertion_point(field_get:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.page)
  return _internal_page();
}
inline void ListProjectsRegistryRequest::_internal_set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  page_ = value;
}
inline void ListProjectsRegistryRequest::set_page(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.page)
}

// uint32 size = 5 [json_name = "size"];
inline void ListProjectsRegistryRequest::clear_size() {
  size_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListProjectsRegistryRequest::_internal_size() const {
  return size_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListProjectsRegistryRequest::size() const {
  // @@protoc_insertion_point(field_get:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.size)
  return _internal_size();
}
inline void ListProjectsRegistryRequest::_internal_set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  size_ = value;
}
inline void ListProjectsRegistryRequest::set_size(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_size(value);
  // @@protoc_insertion_point(field_set:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.size)
}

// string sort = 6 [json_name = "sort"];
inline void ListProjectsRegistryRequest::clear_sort() {
  sort_.ClearToEmpty();
}
inline const std::string& ListProjectsRegistryRequest::sort() const {
  // @@protoc_insertion_point(field_get:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.sort)
  return _internal_sort();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListProjectsRegistryRequest::set_sort(ArgT0&& arg0, ArgT... args) {
 
 sort_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.sort)
}
inline std::string* ListProjectsRegistryRequest::mutable_sort() {
  std::string* _s = _internal_mutable_sort();
  // @@protoc_insertion_point(field_mutable:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.sort)
  return _s;
}
inline const std::string& ListProjectsRegistryRequest::_internal_sort() const {
  return sort_.Get();
}
inline void ListProjectsRegistryRequest::_internal_set_sort(const std::string& value) {
  
  sort_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListProjectsRegistryRequest::_internal_mutable_sort() {
  
  return sort_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListProjectsRegistryRequest::release_sort() {
  // @@protoc_insertion_point(field_release:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.sort)
  return sort_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListProjectsRegistryRequest::set_allocated_sort(std::string* sort) {
  if (sort != nullptr) {
    
  } else {
    
  }
  sort_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sort,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.sort)
}

// bool public = 7 [json_name = "public"];
inline void ListProjectsRegistryRequest::clear_public_() {
  public__ = false;
}
inline bool ListProjectsRegistryRequest::_internal_public_() const {
  return public__;
}
inline bool ListProjectsRegistryRequest::public_() const {
  // @@protoc_insertion_point(field_get:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.public)
  return _internal_public_();
}
inline void ListProjectsRegistryRequest::_internal_set_public_(bool value) {
  
  public__ = value;
}
inline void ListProjectsRegistryRequest::set_public_(bool value) {
  _internal_set_public_(value);
  // @@protoc_insertion_point(field_set:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.public)
}

// bool with_detail = 8 [json_name = "withDetail"];
inline void ListProjectsRegistryRequest::clear_with_detail() {
  with_detail_ = false;
}
inline bool ListProjectsRegistryRequest::_internal_with_detail() const {
  return with_detail_;
}
inline bool ListProjectsRegistryRequest::with_detail() const {
  // @@protoc_insertion_point(field_get:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.with_detail)
  return _internal_with_detail();
}
inline void ListProjectsRegistryRequest::_internal_set_with_detail(bool value) {
  
  with_detail_ = value;
}
inline void ListProjectsRegistryRequest::set_with_detail(bool value) {
  _internal_set_with_detail(value);
  // @@protoc_insertion_point(field_set:artifacts.projects.v1alpha1.ListProjectsRegistryRequest.with_detail)
}

// -------------------------------------------------------------------

// ListProjectsRegistryResponse

// repeated .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
inline int ListProjectsRegistryResponse::_internal_project_registry_size() const {
  return project_registry_.size();
}
inline int ListProjectsRegistryResponse::project_registry_size() const {
  return _internal_project_registry_size();
}
inline ::artifacts::projects::v1alpha1::ProjectsRegistry* ListProjectsRegistryResponse::mutable_project_registry(int index) {
  // @@protoc_insertion_point(field_mutable:artifacts.projects.v1alpha1.ListProjectsRegistryResponse.project_registry)
  return project_registry_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artifacts::projects::v1alpha1::ProjectsRegistry >*
ListProjectsRegistryResponse::mutable_project_registry() {
  // @@protoc_insertion_point(field_mutable_list:artifacts.projects.v1alpha1.ListProjectsRegistryResponse.project_registry)
  return &project_registry_;
}
inline const ::artifacts::projects::v1alpha1::ProjectsRegistry& ListProjectsRegistryResponse::_internal_project_registry(int index) const {
  return project_registry_.Get(index);
}
inline const ::artifacts::projects::v1alpha1::ProjectsRegistry& ListProjectsRegistryResponse::project_registry(int index) const {
  // @@protoc_insertion_point(field_get:artifacts.projects.v1alpha1.ListProjectsRegistryResponse.project_registry)
  return _internal_project_registry(index);
}
inline ::artifacts::projects::v1alpha1::ProjectsRegistry* ListProjectsRegistryResponse::_internal_add_project_registry() {
  return project_registry_.Add();
}
inline ::artifacts::projects::v1alpha1::ProjectsRegistry* ListProjectsRegistryResponse::add_project_registry() {
  ::artifacts::projects::v1alpha1::ProjectsRegistry* _add = _internal_add_project_registry();
  // @@protoc_insertion_point(field_add:artifacts.projects.v1alpha1.ListProjectsRegistryResponse.project_registry)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artifacts::projects::v1alpha1::ProjectsRegistry >&
ListProjectsRegistryResponse::project_registry() const {
  // @@protoc_insertion_point(field_list:artifacts.projects.v1alpha1.ListProjectsRegistryResponse.project_registry)
  return project_registry_;
}

// string status = 2 [json_name = "status"];
inline void ListProjectsRegistryResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& ListProjectsRegistryResponse::status() const {
  // @@protoc_insertion_point(field_get:artifacts.projects.v1alpha1.ListProjectsRegistryResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListProjectsRegistryResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.projects.v1alpha1.ListProjectsRegistryResponse.status)
}
inline std::string* ListProjectsRegistryResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:artifacts.projects.v1alpha1.ListProjectsRegistryResponse.status)
  return _s;
}
inline const std::string& ListProjectsRegistryResponse::_internal_status() const {
  return status_.Get();
}
inline void ListProjectsRegistryResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListProjectsRegistryResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListProjectsRegistryResponse::release_status() {
  // @@protoc_insertion_point(field_release:artifacts.projects.v1alpha1.ListProjectsRegistryResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListProjectsRegistryResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.projects.v1alpha1.ListProjectsRegistryResponse.status)
}

// -------------------------------------------------------------------

// DeleteProjectRegistryRequest

// uint32 project_registry_id = 1 [json_name = "projectRegistryId"];
inline void DeleteProjectRegistryRequest::clear_project_registry_id() {
  project_registry_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteProjectRegistryRequest::_internal_project_registry_id() const {
  return project_registry_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteProjectRegistryRequest::project_registry_id() const {
  // @@protoc_insertion_point(field_get:artifacts.projects.v1alpha1.DeleteProjectRegistryRequest.project_registry_id)
  return _internal_project_registry_id();
}
inline void DeleteProjectRegistryRequest::_internal_set_project_registry_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_registry_id_ = value;
}
inline void DeleteProjectRegistryRequest::set_project_registry_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_registry_id(value);
  // @@protoc_insertion_point(field_set:artifacts.projects.v1alpha1.DeleteProjectRegistryRequest.project_registry_id)
}

// -------------------------------------------------------------------

// DeleteProjectRegistryResponse

// string status = 2 [json_name = "status"];
inline void DeleteProjectRegistryResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& DeleteProjectRegistryResponse::status() const {
  // @@protoc_insertion_point(field_get:artifacts.projects.v1alpha1.DeleteProjectRegistryResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteProjectRegistryResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.projects.v1alpha1.DeleteProjectRegistryResponse.status)
}
inline std::string* DeleteProjectRegistryResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:artifacts.projects.v1alpha1.DeleteProjectRegistryResponse.status)
  return _s;
}
inline const std::string& DeleteProjectRegistryResponse::_internal_status() const {
  return status_.Get();
}
inline void DeleteProjectRegistryResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteProjectRegistryResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteProjectRegistryResponse::release_status() {
  // @@protoc_insertion_point(field_release:artifacts.projects.v1alpha1.DeleteProjectRegistryResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteProjectRegistryResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.projects.v1alpha1.DeleteProjectRegistryResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace projects
}  // namespace artifacts

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto
