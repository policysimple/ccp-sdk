// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: artifacts/projects/v1alpha1/registry_projects_api.proto
#ifndef GRPC_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto__INCLUDED
#define GRPC_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto__INCLUDED

#include "artifacts/projects/v1alpha1/registry_projects_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace artifacts {
namespace projects {
namespace v1alpha1 {

class RegistryProjectsAPIService final {
 public:
  static constexpr char const* service_full_name() {
    return "artifacts.projects.v1alpha1.RegistryProjectsAPIService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest& request, ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse>> AsyncCreateProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse>>(AsyncCreateProjectRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse>> PrepareAsyncCreateProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse>>(PrepareAsyncCreateProjectRegistryRaw(context, request, cq));
    }
    virtual ::grpc::Status ListProjectsRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest& request, ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse>> AsyncListProjectsRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse>>(AsyncListProjectsRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse>> PrepareAsyncListProjectsRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse>>(PrepareAsyncListProjectsRegistryRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest& request, ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse>> AsyncUpdateProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse>>(AsyncUpdateProjectRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse>> PrepareAsyncUpdateProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse>>(PrepareAsyncUpdateProjectRegistryRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest& request, ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse>> AsyncDeleteProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse>>(AsyncDeleteProjectRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse>> PrepareAsyncDeleteProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse>>(PrepareAsyncDeleteProjectRegistryRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreateProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListProjectsRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest* request, ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse>* AsyncCreateProjectRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse>* PrepareAsyncCreateProjectRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse>* AsyncListProjectsRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse>* PrepareAsyncListProjectsRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse>* AsyncUpdateProjectRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse>* PrepareAsyncUpdateProjectRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse>* AsyncDeleteProjectRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse>* PrepareAsyncDeleteProjectRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest& request, ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse>> AsyncCreateProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse>>(AsyncCreateProjectRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse>> PrepareAsyncCreateProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse>>(PrepareAsyncCreateProjectRegistryRaw(context, request, cq));
    }
    ::grpc::Status ListProjectsRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest& request, ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse>> AsyncListProjectsRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse>>(AsyncListProjectsRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse>> PrepareAsyncListProjectsRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse>>(PrepareAsyncListProjectsRegistryRaw(context, request, cq));
    }
    ::grpc::Status UpdateProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest& request, ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse>> AsyncUpdateProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse>>(AsyncUpdateProjectRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse>> PrepareAsyncUpdateProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse>>(PrepareAsyncUpdateProjectRegistryRaw(context, request, cq));
    }
    ::grpc::Status DeleteProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest& request, ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse>> AsyncDeleteProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse>>(AsyncDeleteProjectRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse>> PrepareAsyncDeleteProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse>>(PrepareAsyncDeleteProjectRegistryRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse* response, std::function<void(::grpc::Status)>) override;
      void ListProjectsRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest* request, ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse>* AsyncCreateProjectRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse>* PrepareAsyncCreateProjectRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse>* AsyncListProjectsRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse>* PrepareAsyncListProjectsRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse>* AsyncUpdateProjectRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse>* PrepareAsyncUpdateProjectRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse>* AsyncDeleteProjectRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse>* PrepareAsyncDeleteProjectRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateProjectRegistry_;
    const ::grpc::internal::RpcMethod rpcmethod_ListProjectsRegistry_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateProjectRegistry_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteProjectRegistry_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateProjectRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse* response);
    virtual ::grpc::Status ListProjectsRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest* request, ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse* response);
    virtual ::grpc::Status UpdateProjectRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse* response);
    virtual ::grpc::Status DeleteProjectRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateProjectRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateProjectRegistry() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateProjectRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProjectRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProjectRegistry(::grpc::ServerContext* context, ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest* request, ::grpc::ServerAsyncResponseWriter< ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListProjectsRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListProjectsRegistry() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_ListProjectsRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProjectsRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest* request, ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListProjectsRegistry(::grpc::ServerContext* context, ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest* request, ::grpc::ServerAsyncResponseWriter< ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateProjectRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateProjectRegistry() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateProjectRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProjectRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateProjectRegistry(::grpc::ServerContext* context, ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest* request, ::grpc::ServerAsyncResponseWriter< ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteProjectRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteProjectRegistry() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_DeleteProjectRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProjectRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteProjectRegistry(::grpc::ServerContext* context, ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest* request, ::grpc::ServerAsyncResponseWriter< ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateProjectRegistry<WithAsyncMethod_ListProjectsRegistry<WithAsyncMethod_UpdateProjectRegistry<WithAsyncMethod_DeleteProjectRegistry<Service > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateProjectRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateProjectRegistry() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateProjectRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProjectRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListProjectsRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListProjectsRegistry() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_ListProjectsRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProjectsRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest* request, ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateProjectRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateProjectRegistry() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateProjectRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProjectRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteProjectRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteProjectRegistry() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_DeleteProjectRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProjectRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateProjectRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateProjectRegistry() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateProjectRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateProjectRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateProjectRegistry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListProjectsRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListProjectsRegistry() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_ListProjectsRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListProjectsRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest* request, ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListProjectsRegistry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateProjectRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateProjectRegistry() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateProjectRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateProjectRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateProjectRegistry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteProjectRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteProjectRegistry() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_DeleteProjectRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteProjectRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteProjectRegistry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateProjectRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateProjectRegistry() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest, ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse>(std::bind(&WithStreamedUnaryMethod_CreateProjectRegistry<BaseClass>::StreamedCreateProjectRegistry, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateProjectRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateProjectRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateProjectRegistry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest,::artifacts::projects::v1alpha1::CreateProjectRegistryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListProjectsRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListProjectsRegistry() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest, ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse>(std::bind(&WithStreamedUnaryMethod_ListProjectsRegistry<BaseClass>::StreamedListProjectsRegistry, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListProjectsRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListProjectsRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest* request, ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListProjectsRegistry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest,::artifacts::projects::v1alpha1::ListProjectsRegistryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateProjectRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateProjectRegistry() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest, ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse>(std::bind(&WithStreamedUnaryMethod_UpdateProjectRegistry<BaseClass>::StreamedUpdateProjectRegistry, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateProjectRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateProjectRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateProjectRegistry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest,::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteProjectRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteProjectRegistry() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest, ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse>(std::bind(&WithStreamedUnaryMethod_DeleteProjectRegistry<BaseClass>::StreamedDeleteProjectRegistry, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteProjectRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteProjectRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteProjectRegistry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest,::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateProjectRegistry<WithStreamedUnaryMethod_ListProjectsRegistry<WithStreamedUnaryMethod_UpdateProjectRegistry<WithStreamedUnaryMethod_DeleteProjectRegistry<Service > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateProjectRegistry<WithStreamedUnaryMethod_ListProjectsRegistry<WithStreamedUnaryMethod_UpdateProjectRegistry<WithStreamedUnaryMethod_DeleteProjectRegistry<Service > > > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace projects
}  // namespace artifacts


#endif  // GRPC_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto__INCLUDED
