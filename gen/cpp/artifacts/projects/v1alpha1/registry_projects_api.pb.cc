// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artifacts/projects/v1alpha1/registry_projects_api.proto

#include "artifacts/projects/v1alpha1/registry_projects_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace artifacts {
namespace projects {
namespace v1alpha1 {
constexpr CreateProjectRegistryRequest::CreateProjectRegistryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_registry_(nullptr){}
struct CreateProjectRegistryRequestDefaultTypeInternal {
  constexpr CreateProjectRegistryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateProjectRegistryRequestDefaultTypeInternal() {}
  union {
    CreateProjectRegistryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateProjectRegistryRequestDefaultTypeInternal _CreateProjectRegistryRequest_default_instance_;
constexpr CreateProjectRegistryResponse::CreateProjectRegistryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_registry_(nullptr){}
struct CreateProjectRegistryResponseDefaultTypeInternal {
  constexpr CreateProjectRegistryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateProjectRegistryResponseDefaultTypeInternal() {}
  union {
    CreateProjectRegistryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateProjectRegistryResponseDefaultTypeInternal _CreateProjectRegistryResponse_default_instance_;
constexpr UpdateProjectRegistryRequest::UpdateProjectRegistryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_registry_(nullptr){}
struct UpdateProjectRegistryRequestDefaultTypeInternal {
  constexpr UpdateProjectRegistryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateProjectRegistryRequestDefaultTypeInternal() {}
  union {
    UpdateProjectRegistryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateProjectRegistryRequestDefaultTypeInternal _UpdateProjectRegistryRequest_default_instance_;
constexpr UpdateProjectRegistryResponse::UpdateProjectRegistryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_registry_(nullptr){}
struct UpdateProjectRegistryResponseDefaultTypeInternal {
  constexpr UpdateProjectRegistryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateProjectRegistryResponseDefaultTypeInternal() {}
  union {
    UpdateProjectRegistryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateProjectRegistryResponseDefaultTypeInternal _UpdateProjectRegistryResponse_default_instance_;
constexpr ListProjectsRegistryRequest::ListProjectsRegistryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , query_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sort_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , page_(0u)
  , size_(0u)
  , public__(false)
  , with_detail_(false){}
struct ListProjectsRegistryRequestDefaultTypeInternal {
  constexpr ListProjectsRegistryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListProjectsRegistryRequestDefaultTypeInternal() {}
  union {
    ListProjectsRegistryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListProjectsRegistryRequestDefaultTypeInternal _ListProjectsRegistryRequest_default_instance_;
constexpr ListProjectsRegistryResponse::ListProjectsRegistryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_registry_()
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListProjectsRegistryResponseDefaultTypeInternal {
  constexpr ListProjectsRegistryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListProjectsRegistryResponseDefaultTypeInternal() {}
  union {
    ListProjectsRegistryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListProjectsRegistryResponseDefaultTypeInternal _ListProjectsRegistryResponse_default_instance_;
constexpr DeleteProjectRegistryRequest::DeleteProjectRegistryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : project_registry_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteProjectRegistryRequestDefaultTypeInternal {
  constexpr DeleteProjectRegistryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteProjectRegistryRequestDefaultTypeInternal() {}
  union {
    DeleteProjectRegistryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteProjectRegistryRequestDefaultTypeInternal _DeleteProjectRegistryRequest_default_instance_;
constexpr DeleteProjectRegistryResponse::DeleteProjectRegistryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteProjectRegistryResponseDefaultTypeInternal {
  constexpr DeleteProjectRegistryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteProjectRegistryResponseDefaultTypeInternal() {}
  union {
    DeleteProjectRegistryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteProjectRegistryResponseDefaultTypeInternal _DeleteProjectRegistryResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace projects
}  // namespace artifacts
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto[8];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::CreateProjectRegistryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::CreateProjectRegistryRequest, project_registry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::CreateProjectRegistryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::CreateProjectRegistryResponse, project_registry_),
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::CreateProjectRegistryResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest, project_registry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse, project_registry_),
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::ListProjectsRegistryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::ListProjectsRegistryRequest, organization_id_),
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::ListProjectsRegistryRequest, project_id_),
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::ListProjectsRegistryRequest, query_),
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::ListProjectsRegistryRequest, page_),
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::ListProjectsRegistryRequest, size_),
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::ListProjectsRegistryRequest, sort_),
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::ListProjectsRegistryRequest, public__),
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::ListProjectsRegistryRequest, with_detail_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::ListProjectsRegistryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::ListProjectsRegistryResponse, project_registry_),
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::ListProjectsRegistryResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest, project_registry_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::artifacts::projects::v1alpha1::CreateProjectRegistryRequest)},
  { 6, -1, sizeof(::artifacts::projects::v1alpha1::CreateProjectRegistryResponse)},
  { 13, -1, sizeof(::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest)},
  { 19, -1, sizeof(::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse)},
  { 26, -1, sizeof(::artifacts::projects::v1alpha1::ListProjectsRegistryRequest)},
  { 39, -1, sizeof(::artifacts::projects::v1alpha1::ListProjectsRegistryResponse)},
  { 46, -1, sizeof(::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest)},
  { 52, -1, sizeof(::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::projects::v1alpha1::_CreateProjectRegistryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::projects::v1alpha1::_CreateProjectRegistryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::projects::v1alpha1::_UpdateProjectRegistryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::projects::v1alpha1::_UpdateProjectRegistryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::projects::v1alpha1::_ListProjectsRegistryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::projects::v1alpha1::_ListProjectsRegistryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::projects::v1alpha1::_DeleteProjectRegistryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::projects::v1alpha1::_DeleteProjectRegistryResponse_default_instance_),
};

const char descriptor_table_protodef_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n7artifacts/projects/v1alpha1/registry_p"
  "rojects_api.proto\022\033artifacts.projects.v1"
  "alpha1\0323artifacts/projects/v1alpha1/regi"
  "stry_projects.proto\"x\n\034CreateProjectRegi"
  "stryRequest\022X\n\020project_registry\030\001 \001(\0132-."
  "artifacts.projects.v1alpha1.ProjectsRegi"
  "stryR\017projectRegistry\"\221\001\n\035CreateProjectR"
  "egistryResponse\022X\n\020project_registry\030\001 \001("
  "\0132-.artifacts.projects.v1alpha1.Projects"
  "RegistryR\017projectRegistry\022\026\n\006status\030\002 \001("
  "\tR\006status\"x\n\034UpdateProjectRegistryReques"
  "t\022X\n\020project_registry\030\001 \001(\0132-.artifacts."
  "projects.v1alpha1.ProjectsRegistryR\017proj"
  "ectRegistry\"\221\001\n\035UpdateProjectRegistryRes"
  "ponse\022X\n\020project_registry\030\001 \001(\0132-.artifa"
  "cts.projects.v1alpha1.ProjectsRegistryR\017"
  "projectRegistry\022\026\n\006status\030\002 \001(\tR\006status\""
  "\360\001\n\033ListProjectsRegistryRequest\022\'\n\017organ"
  "ization_id\030\001 \001(\tR\016organizationId\022\035\n\nproj"
  "ect_id\030\002 \001(\tR\tprojectId\022\024\n\005query\030\003 \001(\tR\005"
  "query\022\022\n\004page\030\004 \001(\rR\004page\022\022\n\004size\030\005 \001(\rR"
  "\004size\022\022\n\004sort\030\006 \001(\tR\004sort\022\026\n\006public\030\007 \001("
  "\010R\006public\022\037\n\013with_detail\030\010 \001(\010R\nwithDeta"
  "il\"\220\001\n\034ListProjectsRegistryResponse\022X\n\020p"
  "roject_registry\030\001 \003(\0132-.artifacts.projec"
  "ts.v1alpha1.ProjectsRegistryR\017projectReg"
  "istry\022\026\n\006status\030\002 \001(\tR\006status\"N\n\034DeleteP"
  "rojectRegistryRequest\022.\n\023project_registr"
  "y_id\030\001 \001(\tR\021projectRegistryId\"7\n\035DeleteP"
  "rojectRegistryResponse\022\026\n\006status\030\002 \001(\tR\006"
  "status2\335\004\n\032RegistryProjectsAPIService\022\216\001"
  "\n\025CreateProjectRegistry\0229.artifacts.proj"
  "ects.v1alpha1.CreateProjectRegistryReque"
  "st\032:.artifacts.projects.v1alpha1.CreateP"
  "rojectRegistryResponse\022\213\001\n\024ListProjectsR"
  "egistry\0228.artifacts.projects.v1alpha1.Li"
  "stProjectsRegistryRequest\0329.artifacts.pr"
  "ojects.v1alpha1.ListProjectsRegistryResp"
  "onse\022\216\001\n\025UpdateProjectRegistry\0229.artifac"
  "ts.projects.v1alpha1.UpdateProjectRegist"
  "ryRequest\032:.artifacts.projects.v1alpha1."
  "UpdateProjectRegistryResponse\022\216\001\n\025Delete"
  "ProjectRegistry\0229.artifacts.projects.v1a"
  "lpha1.DeleteProjectRegistryRequest\032:.art"
  "ifacts.projects.v1alpha1.DeleteProjectRe"
  "gistryResponseB\303\001\n%io.cuemby.artifacts.p"
  "rojects.v1alpha1B\030RegistryProjectsProtoA"
  "PIP\001Z<github.com/cuemby/ccp-sdk/gen/go/a"
  "rtifacts/projects/v1alpha1\242\002\003PPX\252\002\033Artif"
  "acts.Projects.V1Alpha1\312\002\033Artifacts\\Proje"
  "cts\\V1Alpha1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto_deps[1] = {
  &::descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto = {
  false, false, 2020, descriptor_table_protodef_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto, "artifacts/projects/v1alpha1/registry_projects_api.proto", 
  &descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto_once, descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto_deps, 1, 8,
  schemas, file_default_instances, TableStruct_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto::offsets,
  file_level_metadata_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto, file_level_enum_descriptors_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto, file_level_service_descriptors_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto_getter() {
  return &descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto(&descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto);
namespace artifacts {
namespace projects {
namespace v1alpha1 {

// ===================================================================

class CreateProjectRegistryRequest::_Internal {
 public:
  static const ::artifacts::projects::v1alpha1::ProjectsRegistry& project_registry(const CreateProjectRegistryRequest* msg);
};

const ::artifacts::projects::v1alpha1::ProjectsRegistry&
CreateProjectRegistryRequest::_Internal::project_registry(const CreateProjectRegistryRequest* msg) {
  return *msg->project_registry_;
}
void CreateProjectRegistryRequest::clear_project_registry() {
  if (GetArenaForAllocation() == nullptr && project_registry_ != nullptr) {
    delete project_registry_;
  }
  project_registry_ = nullptr;
}
CreateProjectRegistryRequest::CreateProjectRegistryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.projects.v1alpha1.CreateProjectRegistryRequest)
}
CreateProjectRegistryRequest::CreateProjectRegistryRequest(const CreateProjectRegistryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_project_registry()) {
    project_registry_ = new ::artifacts::projects::v1alpha1::ProjectsRegistry(*from.project_registry_);
  } else {
    project_registry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:artifacts.projects.v1alpha1.CreateProjectRegistryRequest)
}

inline void CreateProjectRegistryRequest::SharedCtor() {
project_registry_ = nullptr;
}

CreateProjectRegistryRequest::~CreateProjectRegistryRequest() {
  // @@protoc_insertion_point(destructor:artifacts.projects.v1alpha1.CreateProjectRegistryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateProjectRegistryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete project_registry_;
}

void CreateProjectRegistryRequest::ArenaDtor(void* object) {
  CreateProjectRegistryRequest* _this = reinterpret_cast< CreateProjectRegistryRequest* >(object);
  (void)_this;
}
void CreateProjectRegistryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateProjectRegistryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateProjectRegistryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.projects.v1alpha1.CreateProjectRegistryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && project_registry_ != nullptr) {
    delete project_registry_;
  }
  project_registry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateProjectRegistryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_project_registry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateProjectRegistryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.projects.v1alpha1.CreateProjectRegistryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
  if (this->_internal_has_project_registry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::project_registry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.projects.v1alpha1.CreateProjectRegistryRequest)
  return target;
}

size_t CreateProjectRegistryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.projects.v1alpha1.CreateProjectRegistryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
  if (this->_internal_has_project_registry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *project_registry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateProjectRegistryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateProjectRegistryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateProjectRegistryRequest::GetClassData() const { return &_class_data_; }

void CreateProjectRegistryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateProjectRegistryRequest *>(to)->MergeFrom(
      static_cast<const CreateProjectRegistryRequest &>(from));
}


void CreateProjectRegistryRequest::MergeFrom(const CreateProjectRegistryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.projects.v1alpha1.CreateProjectRegistryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_project_registry()) {
    _internal_mutable_project_registry()->::artifacts::projects::v1alpha1::ProjectsRegistry::MergeFrom(from._internal_project_registry());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateProjectRegistryRequest::CopyFrom(const CreateProjectRegistryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.projects.v1alpha1.CreateProjectRegistryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateProjectRegistryRequest::IsInitialized() const {
  return true;
}

void CreateProjectRegistryRequest::InternalSwap(CreateProjectRegistryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(project_registry_, other->project_registry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateProjectRegistryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto_getter, &descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto_once,
      file_level_metadata_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto[0]);
}

// ===================================================================

class CreateProjectRegistryResponse::_Internal {
 public:
  static const ::artifacts::projects::v1alpha1::ProjectsRegistry& project_registry(const CreateProjectRegistryResponse* msg);
};

const ::artifacts::projects::v1alpha1::ProjectsRegistry&
CreateProjectRegistryResponse::_Internal::project_registry(const CreateProjectRegistryResponse* msg) {
  return *msg->project_registry_;
}
void CreateProjectRegistryResponse::clear_project_registry() {
  if (GetArenaForAllocation() == nullptr && project_registry_ != nullptr) {
    delete project_registry_;
  }
  project_registry_ = nullptr;
}
CreateProjectRegistryResponse::CreateProjectRegistryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.projects.v1alpha1.CreateProjectRegistryResponse)
}
CreateProjectRegistryResponse::CreateProjectRegistryResponse(const CreateProjectRegistryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_project_registry()) {
    project_registry_ = new ::artifacts::projects::v1alpha1::ProjectsRegistry(*from.project_registry_);
  } else {
    project_registry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:artifacts.projects.v1alpha1.CreateProjectRegistryResponse)
}

inline void CreateProjectRegistryResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
project_registry_ = nullptr;
}

CreateProjectRegistryResponse::~CreateProjectRegistryResponse() {
  // @@protoc_insertion_point(destructor:artifacts.projects.v1alpha1.CreateProjectRegistryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateProjectRegistryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete project_registry_;
}

void CreateProjectRegistryResponse::ArenaDtor(void* object) {
  CreateProjectRegistryResponse* _this = reinterpret_cast< CreateProjectRegistryResponse* >(object);
  (void)_this;
}
void CreateProjectRegistryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateProjectRegistryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateProjectRegistryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.projects.v1alpha1.CreateProjectRegistryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && project_registry_ != nullptr) {
    delete project_registry_;
  }
  project_registry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateProjectRegistryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_project_registry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.projects.v1alpha1.CreateProjectRegistryResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateProjectRegistryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.projects.v1alpha1.CreateProjectRegistryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
  if (this->_internal_has_project_registry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::project_registry(this), target, stream);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.projects.v1alpha1.CreateProjectRegistryResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.projects.v1alpha1.CreateProjectRegistryResponse)
  return target;
}

size_t CreateProjectRegistryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.projects.v1alpha1.CreateProjectRegistryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
  if (this->_internal_has_project_registry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *project_registry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateProjectRegistryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateProjectRegistryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateProjectRegistryResponse::GetClassData() const { return &_class_data_; }

void CreateProjectRegistryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateProjectRegistryResponse *>(to)->MergeFrom(
      static_cast<const CreateProjectRegistryResponse &>(from));
}


void CreateProjectRegistryResponse::MergeFrom(const CreateProjectRegistryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.projects.v1alpha1.CreateProjectRegistryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_project_registry()) {
    _internal_mutable_project_registry()->::artifacts::projects::v1alpha1::ProjectsRegistry::MergeFrom(from._internal_project_registry());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateProjectRegistryResponse::CopyFrom(const CreateProjectRegistryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.projects.v1alpha1.CreateProjectRegistryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateProjectRegistryResponse::IsInitialized() const {
  return true;
}

void CreateProjectRegistryResponse::InternalSwap(CreateProjectRegistryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
  swap(project_registry_, other->project_registry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateProjectRegistryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto_getter, &descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto_once,
      file_level_metadata_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto[1]);
}

// ===================================================================

class UpdateProjectRegistryRequest::_Internal {
 public:
  static const ::artifacts::projects::v1alpha1::ProjectsRegistry& project_registry(const UpdateProjectRegistryRequest* msg);
};

const ::artifacts::projects::v1alpha1::ProjectsRegistry&
UpdateProjectRegistryRequest::_Internal::project_registry(const UpdateProjectRegistryRequest* msg) {
  return *msg->project_registry_;
}
void UpdateProjectRegistryRequest::clear_project_registry() {
  if (GetArenaForAllocation() == nullptr && project_registry_ != nullptr) {
    delete project_registry_;
  }
  project_registry_ = nullptr;
}
UpdateProjectRegistryRequest::UpdateProjectRegistryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.projects.v1alpha1.UpdateProjectRegistryRequest)
}
UpdateProjectRegistryRequest::UpdateProjectRegistryRequest(const UpdateProjectRegistryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_project_registry()) {
    project_registry_ = new ::artifacts::projects::v1alpha1::ProjectsRegistry(*from.project_registry_);
  } else {
    project_registry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:artifacts.projects.v1alpha1.UpdateProjectRegistryRequest)
}

inline void UpdateProjectRegistryRequest::SharedCtor() {
project_registry_ = nullptr;
}

UpdateProjectRegistryRequest::~UpdateProjectRegistryRequest() {
  // @@protoc_insertion_point(destructor:artifacts.projects.v1alpha1.UpdateProjectRegistryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateProjectRegistryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete project_registry_;
}

void UpdateProjectRegistryRequest::ArenaDtor(void* object) {
  UpdateProjectRegistryRequest* _this = reinterpret_cast< UpdateProjectRegistryRequest* >(object);
  (void)_this;
}
void UpdateProjectRegistryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateProjectRegistryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateProjectRegistryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.projects.v1alpha1.UpdateProjectRegistryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && project_registry_ != nullptr) {
    delete project_registry_;
  }
  project_registry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateProjectRegistryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_project_registry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateProjectRegistryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.projects.v1alpha1.UpdateProjectRegistryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
  if (this->_internal_has_project_registry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::project_registry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.projects.v1alpha1.UpdateProjectRegistryRequest)
  return target;
}

size_t UpdateProjectRegistryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.projects.v1alpha1.UpdateProjectRegistryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
  if (this->_internal_has_project_registry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *project_registry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateProjectRegistryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateProjectRegistryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateProjectRegistryRequest::GetClassData() const { return &_class_data_; }

void UpdateProjectRegistryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateProjectRegistryRequest *>(to)->MergeFrom(
      static_cast<const UpdateProjectRegistryRequest &>(from));
}


void UpdateProjectRegistryRequest::MergeFrom(const UpdateProjectRegistryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.projects.v1alpha1.UpdateProjectRegistryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_project_registry()) {
    _internal_mutable_project_registry()->::artifacts::projects::v1alpha1::ProjectsRegistry::MergeFrom(from._internal_project_registry());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateProjectRegistryRequest::CopyFrom(const UpdateProjectRegistryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.projects.v1alpha1.UpdateProjectRegistryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateProjectRegistryRequest::IsInitialized() const {
  return true;
}

void UpdateProjectRegistryRequest::InternalSwap(UpdateProjectRegistryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(project_registry_, other->project_registry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateProjectRegistryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto_getter, &descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto_once,
      file_level_metadata_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto[2]);
}

// ===================================================================

class UpdateProjectRegistryResponse::_Internal {
 public:
  static const ::artifacts::projects::v1alpha1::ProjectsRegistry& project_registry(const UpdateProjectRegistryResponse* msg);
};

const ::artifacts::projects::v1alpha1::ProjectsRegistry&
UpdateProjectRegistryResponse::_Internal::project_registry(const UpdateProjectRegistryResponse* msg) {
  return *msg->project_registry_;
}
void UpdateProjectRegistryResponse::clear_project_registry() {
  if (GetArenaForAllocation() == nullptr && project_registry_ != nullptr) {
    delete project_registry_;
  }
  project_registry_ = nullptr;
}
UpdateProjectRegistryResponse::UpdateProjectRegistryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.projects.v1alpha1.UpdateProjectRegistryResponse)
}
UpdateProjectRegistryResponse::UpdateProjectRegistryResponse(const UpdateProjectRegistryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_project_registry()) {
    project_registry_ = new ::artifacts::projects::v1alpha1::ProjectsRegistry(*from.project_registry_);
  } else {
    project_registry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:artifacts.projects.v1alpha1.UpdateProjectRegistryResponse)
}

inline void UpdateProjectRegistryResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
project_registry_ = nullptr;
}

UpdateProjectRegistryResponse::~UpdateProjectRegistryResponse() {
  // @@protoc_insertion_point(destructor:artifacts.projects.v1alpha1.UpdateProjectRegistryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateProjectRegistryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete project_registry_;
}

void UpdateProjectRegistryResponse::ArenaDtor(void* object) {
  UpdateProjectRegistryResponse* _this = reinterpret_cast< UpdateProjectRegistryResponse* >(object);
  (void)_this;
}
void UpdateProjectRegistryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateProjectRegistryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateProjectRegistryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.projects.v1alpha1.UpdateProjectRegistryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && project_registry_ != nullptr) {
    delete project_registry_;
  }
  project_registry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateProjectRegistryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_project_registry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.projects.v1alpha1.UpdateProjectRegistryResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateProjectRegistryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.projects.v1alpha1.UpdateProjectRegistryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
  if (this->_internal_has_project_registry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::project_registry(this), target, stream);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.projects.v1alpha1.UpdateProjectRegistryResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.projects.v1alpha1.UpdateProjectRegistryResponse)
  return target;
}

size_t UpdateProjectRegistryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.projects.v1alpha1.UpdateProjectRegistryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
  if (this->_internal_has_project_registry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *project_registry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateProjectRegistryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateProjectRegistryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateProjectRegistryResponse::GetClassData() const { return &_class_data_; }

void UpdateProjectRegistryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateProjectRegistryResponse *>(to)->MergeFrom(
      static_cast<const UpdateProjectRegistryResponse &>(from));
}


void UpdateProjectRegistryResponse::MergeFrom(const UpdateProjectRegistryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.projects.v1alpha1.UpdateProjectRegistryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_project_registry()) {
    _internal_mutable_project_registry()->::artifacts::projects::v1alpha1::ProjectsRegistry::MergeFrom(from._internal_project_registry());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateProjectRegistryResponse::CopyFrom(const UpdateProjectRegistryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.projects.v1alpha1.UpdateProjectRegistryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateProjectRegistryResponse::IsInitialized() const {
  return true;
}

void UpdateProjectRegistryResponse::InternalSwap(UpdateProjectRegistryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
  swap(project_registry_, other->project_registry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateProjectRegistryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto_getter, &descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto_once,
      file_level_metadata_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto[3]);
}

// ===================================================================

class ListProjectsRegistryRequest::_Internal {
 public:
};

ListProjectsRegistryRequest::ListProjectsRegistryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.projects.v1alpha1.ListProjectsRegistryRequest)
}
ListProjectsRegistryRequest::ListProjectsRegistryRequest(const ListProjectsRegistryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization_id().empty()) {
    organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization_id(), 
      GetArenaForAllocation());
  }
  project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_id().empty()) {
    project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_id(), 
      GetArenaForAllocation());
  }
  query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_query().empty()) {
    query_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_query(), 
      GetArenaForAllocation());
  }
  sort_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sort().empty()) {
    sort_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sort(), 
      GetArenaForAllocation());
  }
  ::memcpy(&page_, &from.page_,
    static_cast<size_t>(reinterpret_cast<char*>(&with_detail_) -
    reinterpret_cast<char*>(&page_)) + sizeof(with_detail_));
  // @@protoc_insertion_point(copy_constructor:artifacts.projects.v1alpha1.ListProjectsRegistryRequest)
}

inline void ListProjectsRegistryRequest::SharedCtor() {
organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
query_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sort_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&page_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&with_detail_) -
    reinterpret_cast<char*>(&page_)) + sizeof(with_detail_));
}

ListProjectsRegistryRequest::~ListProjectsRegistryRequest() {
  // @@protoc_insertion_point(destructor:artifacts.projects.v1alpha1.ListProjectsRegistryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListProjectsRegistryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  query_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sort_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListProjectsRegistryRequest::ArenaDtor(void* object) {
  ListProjectsRegistryRequest* _this = reinterpret_cast< ListProjectsRegistryRequest* >(object);
  (void)_this;
}
void ListProjectsRegistryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListProjectsRegistryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListProjectsRegistryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.projects.v1alpha1.ListProjectsRegistryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  organization_id_.ClearToEmpty();
  project_id_.ClearToEmpty();
  query_.ClearToEmpty();
  sort_.ClearToEmpty();
  ::memset(&page_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&with_detail_) -
      reinterpret_cast<char*>(&page_)) + sizeof(with_detail_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProjectsRegistryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string organization_id = 1 [json_name = "organizationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.projects.v1alpha1.ListProjectsRegistryRequest.organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string project_id = 2 [json_name = "projectId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.projects.v1alpha1.ListProjectsRegistryRequest.project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string query = 3 [json_name = "query"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_query();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.projects.v1alpha1.ListProjectsRegistryRequest.query"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 page = 4 [json_name = "page"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          page_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 size = 5 [json_name = "size"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          size_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sort = 6 [json_name = "sort"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_sort();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.projects.v1alpha1.ListProjectsRegistryRequest.sort"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool public = 7 [json_name = "public"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          public__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool with_detail = 8 [json_name = "withDetail"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          with_detail_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListProjectsRegistryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.projects.v1alpha1.ListProjectsRegistryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string organization_id = 1 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.projects.v1alpha1.ListProjectsRegistryRequest.organization_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_organization_id(), target);
  }

  // string project_id = 2 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_id().data(), static_cast<int>(this->_internal_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.projects.v1alpha1.ListProjectsRegistryRequest.project_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_project_id(), target);
  }

  // string query = 3 [json_name = "query"];
  if (!this->_internal_query().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_query().data(), static_cast<int>(this->_internal_query().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.projects.v1alpha1.ListProjectsRegistryRequest.query");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_query(), target);
  }

  // uint32 page = 4 [json_name = "page"];
  if (this->_internal_page() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_page(), target);
  }

  // uint32 size = 5 [json_name = "size"];
  if (this->_internal_size() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_size(), target);
  }

  // string sort = 6 [json_name = "sort"];
  if (!this->_internal_sort().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sort().data(), static_cast<int>(this->_internal_sort().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.projects.v1alpha1.ListProjectsRegistryRequest.sort");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sort(), target);
  }

  // bool public = 7 [json_name = "public"];
  if (this->_internal_public_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_public_(), target);
  }

  // bool with_detail = 8 [json_name = "withDetail"];
  if (this->_internal_with_detail() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(8, this->_internal_with_detail(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.projects.v1alpha1.ListProjectsRegistryRequest)
  return target;
}

size_t ListProjectsRegistryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.projects.v1alpha1.ListProjectsRegistryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string organization_id = 1 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  // string project_id = 2 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_id());
  }

  // string query = 3 [json_name = "query"];
  if (!this->_internal_query().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_query());
  }

  // string sort = 6 [json_name = "sort"];
  if (!this->_internal_sort().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sort());
  }

  // uint32 page = 4 [json_name = "page"];
  if (this->_internal_page() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_page());
  }

  // uint32 size = 5 [json_name = "size"];
  if (this->_internal_size() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_size());
  }

  // bool public = 7 [json_name = "public"];
  if (this->_internal_public_() != 0) {
    total_size += 1 + 1;
  }

  // bool with_detail = 8 [json_name = "withDetail"];
  if (this->_internal_with_detail() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProjectsRegistryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListProjectsRegistryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProjectsRegistryRequest::GetClassData() const { return &_class_data_; }

void ListProjectsRegistryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListProjectsRegistryRequest *>(to)->MergeFrom(
      static_cast<const ListProjectsRegistryRequest &>(from));
}


void ListProjectsRegistryRequest::MergeFrom(const ListProjectsRegistryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.projects.v1alpha1.ListProjectsRegistryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_organization_id().empty()) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (!from._internal_project_id().empty()) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (!from._internal_query().empty()) {
    _internal_set_query(from._internal_query());
  }
  if (!from._internal_sort().empty()) {
    _internal_set_sort(from._internal_sort());
  }
  if (from._internal_page() != 0) {
    _internal_set_page(from._internal_page());
  }
  if (from._internal_size() != 0) {
    _internal_set_size(from._internal_size());
  }
  if (from._internal_public_() != 0) {
    _internal_set_public_(from._internal_public_());
  }
  if (from._internal_with_detail() != 0) {
    _internal_set_with_detail(from._internal_with_detail());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListProjectsRegistryRequest::CopyFrom(const ListProjectsRegistryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.projects.v1alpha1.ListProjectsRegistryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProjectsRegistryRequest::IsInitialized() const {
  return true;
}

void ListProjectsRegistryRequest::InternalSwap(ListProjectsRegistryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_id_, GetArenaForAllocation(),
      &other->organization_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_id_, GetArenaForAllocation(),
      &other->project_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &query_, GetArenaForAllocation(),
      &other->query_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sort_, GetArenaForAllocation(),
      &other->sort_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ListProjectsRegistryRequest, with_detail_)
      + sizeof(ListProjectsRegistryRequest::with_detail_)
      - PROTOBUF_FIELD_OFFSET(ListProjectsRegistryRequest, page_)>(
          reinterpret_cast<char*>(&page_),
          reinterpret_cast<char*>(&other->page_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProjectsRegistryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto_getter, &descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto_once,
      file_level_metadata_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto[4]);
}

// ===================================================================

class ListProjectsRegistryResponse::_Internal {
 public:
};

void ListProjectsRegistryResponse::clear_project_registry() {
  project_registry_.Clear();
}
ListProjectsRegistryResponse::ListProjectsRegistryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  project_registry_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.projects.v1alpha1.ListProjectsRegistryResponse)
}
ListProjectsRegistryResponse::ListProjectsRegistryResponse(const ListProjectsRegistryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      project_registry_(from.project_registry_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:artifacts.projects.v1alpha1.ListProjectsRegistryResponse)
}

inline void ListProjectsRegistryResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListProjectsRegistryResponse::~ListProjectsRegistryResponse() {
  // @@protoc_insertion_point(destructor:artifacts.projects.v1alpha1.ListProjectsRegistryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListProjectsRegistryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListProjectsRegistryResponse::ArenaDtor(void* object) {
  ListProjectsRegistryResponse* _this = reinterpret_cast< ListProjectsRegistryResponse* >(object);
  (void)_this;
}
void ListProjectsRegistryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListProjectsRegistryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListProjectsRegistryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.projects.v1alpha1.ListProjectsRegistryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_registry_.Clear();
  status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListProjectsRegistryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_project_registry(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.projects.v1alpha1.ListProjectsRegistryResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListProjectsRegistryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.projects.v1alpha1.ListProjectsRegistryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_project_registry_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_project_registry(i), target, stream);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.projects.v1alpha1.ListProjectsRegistryResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.projects.v1alpha1.ListProjectsRegistryResponse)
  return target;
}

size_t ListProjectsRegistryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.projects.v1alpha1.ListProjectsRegistryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .artifacts.projects.v1alpha1.ProjectsRegistry project_registry = 1 [json_name = "projectRegistry"];
  total_size += 1UL * this->_internal_project_registry_size();
  for (const auto& msg : this->project_registry_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListProjectsRegistryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListProjectsRegistryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListProjectsRegistryResponse::GetClassData() const { return &_class_data_; }

void ListProjectsRegistryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListProjectsRegistryResponse *>(to)->MergeFrom(
      static_cast<const ListProjectsRegistryResponse &>(from));
}


void ListProjectsRegistryResponse::MergeFrom(const ListProjectsRegistryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.projects.v1alpha1.ListProjectsRegistryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  project_registry_.MergeFrom(from.project_registry_);
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListProjectsRegistryResponse::CopyFrom(const ListProjectsRegistryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.projects.v1alpha1.ListProjectsRegistryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListProjectsRegistryResponse::IsInitialized() const {
  return true;
}

void ListProjectsRegistryResponse::InternalSwap(ListProjectsRegistryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  project_registry_.InternalSwap(&other->project_registry_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListProjectsRegistryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto_getter, &descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto_once,
      file_level_metadata_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto[5]);
}

// ===================================================================

class DeleteProjectRegistryRequest::_Internal {
 public:
};

DeleteProjectRegistryRequest::DeleteProjectRegistryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.projects.v1alpha1.DeleteProjectRegistryRequest)
}
DeleteProjectRegistryRequest::DeleteProjectRegistryRequest(const DeleteProjectRegistryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  project_registry_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_registry_id().empty()) {
    project_registry_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_registry_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:artifacts.projects.v1alpha1.DeleteProjectRegistryRequest)
}

inline void DeleteProjectRegistryRequest::SharedCtor() {
project_registry_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteProjectRegistryRequest::~DeleteProjectRegistryRequest() {
  // @@protoc_insertion_point(destructor:artifacts.projects.v1alpha1.DeleteProjectRegistryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteProjectRegistryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  project_registry_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteProjectRegistryRequest::ArenaDtor(void* object) {
  DeleteProjectRegistryRequest* _this = reinterpret_cast< DeleteProjectRegistryRequest* >(object);
  (void)_this;
}
void DeleteProjectRegistryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteProjectRegistryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteProjectRegistryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.projects.v1alpha1.DeleteProjectRegistryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  project_registry_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteProjectRegistryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string project_registry_id = 1 [json_name = "projectRegistryId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_project_registry_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.projects.v1alpha1.DeleteProjectRegistryRequest.project_registry_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteProjectRegistryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.projects.v1alpha1.DeleteProjectRegistryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string project_registry_id = 1 [json_name = "projectRegistryId"];
  if (!this->_internal_project_registry_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_registry_id().data(), static_cast<int>(this->_internal_project_registry_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.projects.v1alpha1.DeleteProjectRegistryRequest.project_registry_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_project_registry_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.projects.v1alpha1.DeleteProjectRegistryRequest)
  return target;
}

size_t DeleteProjectRegistryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.projects.v1alpha1.DeleteProjectRegistryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string project_registry_id = 1 [json_name = "projectRegistryId"];
  if (!this->_internal_project_registry_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_registry_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteProjectRegistryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteProjectRegistryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteProjectRegistryRequest::GetClassData() const { return &_class_data_; }

void DeleteProjectRegistryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteProjectRegistryRequest *>(to)->MergeFrom(
      static_cast<const DeleteProjectRegistryRequest &>(from));
}


void DeleteProjectRegistryRequest::MergeFrom(const DeleteProjectRegistryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.projects.v1alpha1.DeleteProjectRegistryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_project_registry_id().empty()) {
    _internal_set_project_registry_id(from._internal_project_registry_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteProjectRegistryRequest::CopyFrom(const DeleteProjectRegistryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.projects.v1alpha1.DeleteProjectRegistryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteProjectRegistryRequest::IsInitialized() const {
  return true;
}

void DeleteProjectRegistryRequest::InternalSwap(DeleteProjectRegistryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_registry_id_, GetArenaForAllocation(),
      &other->project_registry_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteProjectRegistryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto_getter, &descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto_once,
      file_level_metadata_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto[6]);
}

// ===================================================================

class DeleteProjectRegistryResponse::_Internal {
 public:
};

DeleteProjectRegistryResponse::DeleteProjectRegistryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.projects.v1alpha1.DeleteProjectRegistryResponse)
}
DeleteProjectRegistryResponse::DeleteProjectRegistryResponse(const DeleteProjectRegistryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:artifacts.projects.v1alpha1.DeleteProjectRegistryResponse)
}

inline void DeleteProjectRegistryResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteProjectRegistryResponse::~DeleteProjectRegistryResponse() {
  // @@protoc_insertion_point(destructor:artifacts.projects.v1alpha1.DeleteProjectRegistryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteProjectRegistryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteProjectRegistryResponse::ArenaDtor(void* object) {
  DeleteProjectRegistryResponse* _this = reinterpret_cast< DeleteProjectRegistryResponse* >(object);
  (void)_this;
}
void DeleteProjectRegistryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteProjectRegistryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteProjectRegistryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.projects.v1alpha1.DeleteProjectRegistryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteProjectRegistryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.projects.v1alpha1.DeleteProjectRegistryResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteProjectRegistryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.projects.v1alpha1.DeleteProjectRegistryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.projects.v1alpha1.DeleteProjectRegistryResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.projects.v1alpha1.DeleteProjectRegistryResponse)
  return target;
}

size_t DeleteProjectRegistryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.projects.v1alpha1.DeleteProjectRegistryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteProjectRegistryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteProjectRegistryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteProjectRegistryResponse::GetClassData() const { return &_class_data_; }

void DeleteProjectRegistryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteProjectRegistryResponse *>(to)->MergeFrom(
      static_cast<const DeleteProjectRegistryResponse &>(from));
}


void DeleteProjectRegistryResponse::MergeFrom(const DeleteProjectRegistryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.projects.v1alpha1.DeleteProjectRegistryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteProjectRegistryResponse::CopyFrom(const DeleteProjectRegistryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.projects.v1alpha1.DeleteProjectRegistryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteProjectRegistryResponse::IsInitialized() const {
  return true;
}

void DeleteProjectRegistryResponse::InternalSwap(DeleteProjectRegistryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteProjectRegistryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto_getter, &descriptor_table_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto_once,
      file_level_metadata_artifacts_2fprojects_2fv1alpha1_2fregistry_5fprojects_5fapi_2eproto[7]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace projects
}  // namespace artifacts
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest* Arena::CreateMaybeMessage< ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse* Arena::CreateMaybeMessage< ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest* Arena::CreateMaybeMessage< ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse* Arena::CreateMaybeMessage< ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest* Arena::CreateMaybeMessage< ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse* Arena::CreateMaybeMessage< ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest* Arena::CreateMaybeMessage< ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse* Arena::CreateMaybeMessage< ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
