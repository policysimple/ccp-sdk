// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: artifacts/projects/v1alpha1/registry_projects_api.proto

#include "artifacts/projects/v1alpha1/registry_projects_api.pb.h"
#include "artifacts/projects/v1alpha1/registry_projects_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace artifacts {
namespace projects {
namespace v1alpha1 {

static const char* RegistryProjectsAPIService_method_names[] = {
  "/artifacts.projects.v1alpha1.RegistryProjectsAPIService/CreateProjectRegistry",
  "/artifacts.projects.v1alpha1.RegistryProjectsAPIService/ListProjectsRegistry",
  "/artifacts.projects.v1alpha1.RegistryProjectsAPIService/UpdateProjectRegistry",
  "/artifacts.projects.v1alpha1.RegistryProjectsAPIService/DeleteProjectRegistry",
};

std::unique_ptr< RegistryProjectsAPIService::Stub> RegistryProjectsAPIService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RegistryProjectsAPIService::Stub> stub(new RegistryProjectsAPIService::Stub(channel));
  return stub;
}

RegistryProjectsAPIService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateProjectRegistry_(RegistryProjectsAPIService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListProjectsRegistry_(RegistryProjectsAPIService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateProjectRegistry_(RegistryProjectsAPIService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteProjectRegistry_(RegistryProjectsAPIService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RegistryProjectsAPIService::Stub::CreateProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest& request, ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateProjectRegistry_, context, request, response);
}

void RegistryProjectsAPIService::Stub::experimental_async::CreateProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateProjectRegistry_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse>* RegistryProjectsAPIService::Stub::AsyncCreateProjectRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse>::Create(channel_.get(), cq, rpcmethod_CreateProjectRegistry_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse>* RegistryProjectsAPIService::Stub::PrepareAsyncCreateProjectRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse>::Create(channel_.get(), cq, rpcmethod_CreateProjectRegistry_, context, request, false);
}

::grpc::Status RegistryProjectsAPIService::Stub::ListProjectsRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest& request, ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListProjectsRegistry_, context, request, response);
}

void RegistryProjectsAPIService::Stub::experimental_async::ListProjectsRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest* request, ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListProjectsRegistry_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse>* RegistryProjectsAPIService::Stub::AsyncListProjectsRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse>::Create(channel_.get(), cq, rpcmethod_ListProjectsRegistry_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse>* RegistryProjectsAPIService::Stub::PrepareAsyncListProjectsRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse>::Create(channel_.get(), cq, rpcmethod_ListProjectsRegistry_, context, request, false);
}

::grpc::Status RegistryProjectsAPIService::Stub::UpdateProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest& request, ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateProjectRegistry_, context, request, response);
}

void RegistryProjectsAPIService::Stub::experimental_async::UpdateProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateProjectRegistry_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse>* RegistryProjectsAPIService::Stub::AsyncUpdateProjectRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse>::Create(channel_.get(), cq, rpcmethod_UpdateProjectRegistry_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse>* RegistryProjectsAPIService::Stub::PrepareAsyncUpdateProjectRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse>::Create(channel_.get(), cq, rpcmethod_UpdateProjectRegistry_, context, request, false);
}

::grpc::Status RegistryProjectsAPIService::Stub::DeleteProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest& request, ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteProjectRegistry_, context, request, response);
}

void RegistryProjectsAPIService::Stub::experimental_async::DeleteProjectRegistry(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteProjectRegistry_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse>* RegistryProjectsAPIService::Stub::AsyncDeleteProjectRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse>::Create(channel_.get(), cq, rpcmethod_DeleteProjectRegistry_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse>* RegistryProjectsAPIService::Stub::PrepareAsyncDeleteProjectRegistryRaw(::grpc::ClientContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse>::Create(channel_.get(), cq, rpcmethod_DeleteProjectRegistry_, context, request, false);
}

RegistryProjectsAPIService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RegistryProjectsAPIService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RegistryProjectsAPIService::Service, ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest, ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse>(
          std::mem_fn(&RegistryProjectsAPIService::Service::CreateProjectRegistry), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RegistryProjectsAPIService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RegistryProjectsAPIService::Service, ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest, ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse>(
          std::mem_fn(&RegistryProjectsAPIService::Service::ListProjectsRegistry), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RegistryProjectsAPIService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RegistryProjectsAPIService::Service, ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest, ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse>(
          std::mem_fn(&RegistryProjectsAPIService::Service::UpdateProjectRegistry), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RegistryProjectsAPIService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RegistryProjectsAPIService::Service, ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest, ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse>(
          std::mem_fn(&RegistryProjectsAPIService::Service::DeleteProjectRegistry), this)));
}

RegistryProjectsAPIService::Service::~Service() {
}

::grpc::Status RegistryProjectsAPIService::Service::CreateProjectRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::CreateProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::CreateProjectRegistryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RegistryProjectsAPIService::Service::ListProjectsRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::ListProjectsRegistryRequest* request, ::artifacts::projects::v1alpha1::ListProjectsRegistryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RegistryProjectsAPIService::Service::UpdateProjectRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::UpdateProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::UpdateProjectRegistryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RegistryProjectsAPIService::Service::DeleteProjectRegistry(::grpc::ServerContext* context, const ::artifacts::projects::v1alpha1::DeleteProjectRegistryRequest* request, ::artifacts::projects::v1alpha1::DeleteProjectRegistryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace artifacts
}  // namespace projects
}  // namespace v1alpha1

