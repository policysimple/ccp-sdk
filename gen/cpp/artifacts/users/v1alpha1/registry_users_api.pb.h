// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artifacts/users/v1alpha1/registry_users_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "artifacts/users/v1alpha1/registry_users.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto;
namespace artifacts {
namespace users {
namespace v1alpha1 {
class CreateUserRegistryRequest;
struct CreateUserRegistryRequestDefaultTypeInternal;
extern CreateUserRegistryRequestDefaultTypeInternal _CreateUserRegistryRequest_default_instance_;
class CreateUserRegistryResponse;
struct CreateUserRegistryResponseDefaultTypeInternal;
extern CreateUserRegistryResponseDefaultTypeInternal _CreateUserRegistryResponse_default_instance_;
class DeleteUserRegistryRequest;
struct DeleteUserRegistryRequestDefaultTypeInternal;
extern DeleteUserRegistryRequestDefaultTypeInternal _DeleteUserRegistryRequest_default_instance_;
class DeleteUserRegistryResponse;
struct DeleteUserRegistryResponseDefaultTypeInternal;
extern DeleteUserRegistryResponseDefaultTypeInternal _DeleteUserRegistryResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace users
}  // namespace artifacts
PROTOBUF_NAMESPACE_OPEN
template<> ::artifacts::users::v1alpha1::CreateUserRegistryRequest* Arena::CreateMaybeMessage<::artifacts::users::v1alpha1::CreateUserRegistryRequest>(Arena*);
template<> ::artifacts::users::v1alpha1::CreateUserRegistryResponse* Arena::CreateMaybeMessage<::artifacts::users::v1alpha1::CreateUserRegistryResponse>(Arena*);
template<> ::artifacts::users::v1alpha1::DeleteUserRegistryRequest* Arena::CreateMaybeMessage<::artifacts::users::v1alpha1::DeleteUserRegistryRequest>(Arena*);
template<> ::artifacts::users::v1alpha1::DeleteUserRegistryResponse* Arena::CreateMaybeMessage<::artifacts::users::v1alpha1::DeleteUserRegistryResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace artifacts {
namespace users {
namespace v1alpha1 {

// ===================================================================

class CreateUserRegistryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artifacts.users.v1alpha1.CreateUserRegistryRequest) */ {
 public:
  inline CreateUserRegistryRequest() : CreateUserRegistryRequest(nullptr) {}
  ~CreateUserRegistryRequest() override;
  explicit constexpr CreateUserRegistryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUserRegistryRequest(const CreateUserRegistryRequest& from);
  CreateUserRegistryRequest(CreateUserRegistryRequest&& from) noexcept
    : CreateUserRegistryRequest() {
    *this = ::std::move(from);
  }

  inline CreateUserRegistryRequest& operator=(const CreateUserRegistryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUserRegistryRequest& operator=(CreateUserRegistryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUserRegistryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUserRegistryRequest* internal_default_instance() {
    return reinterpret_cast<const CreateUserRegistryRequest*>(
               &_CreateUserRegistryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateUserRegistryRequest& a, CreateUserRegistryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUserRegistryRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUserRegistryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateUserRegistryRequest* New() const final {
    return new CreateUserRegistryRequest();
  }

  CreateUserRegistryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateUserRegistryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateUserRegistryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateUserRegistryRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUserRegistryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artifacts.users.v1alpha1.CreateUserRegistryRequest";
  }
  protected:
  explicit CreateUserRegistryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserRegistryFieldNumber = 1,
  };
  // .artifacts.users.v1alpha1.UsersRegistry user_registry = 1 [json_name = "userRegistry"];
  bool has_user_registry() const;
  private:
  bool _internal_has_user_registry() const;
  public:
  void clear_user_registry();
  const ::artifacts::users::v1alpha1::UsersRegistry& user_registry() const;
  PROTOBUF_MUST_USE_RESULT ::artifacts::users::v1alpha1::UsersRegistry* release_user_registry();
  ::artifacts::users::v1alpha1::UsersRegistry* mutable_user_registry();
  void set_allocated_user_registry(::artifacts::users::v1alpha1::UsersRegistry* user_registry);
  private:
  const ::artifacts::users::v1alpha1::UsersRegistry& _internal_user_registry() const;
  ::artifacts::users::v1alpha1::UsersRegistry* _internal_mutable_user_registry();
  public:
  void unsafe_arena_set_allocated_user_registry(
      ::artifacts::users::v1alpha1::UsersRegistry* user_registry);
  ::artifacts::users::v1alpha1::UsersRegistry* unsafe_arena_release_user_registry();

  // @@protoc_insertion_point(class_scope:artifacts.users.v1alpha1.CreateUserRegistryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::artifacts::users::v1alpha1::UsersRegistry* user_registry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateUserRegistryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artifacts.users.v1alpha1.CreateUserRegistryResponse) */ {
 public:
  inline CreateUserRegistryResponse() : CreateUserRegistryResponse(nullptr) {}
  ~CreateUserRegistryResponse() override;
  explicit constexpr CreateUserRegistryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateUserRegistryResponse(const CreateUserRegistryResponse& from);
  CreateUserRegistryResponse(CreateUserRegistryResponse&& from) noexcept
    : CreateUserRegistryResponse() {
    *this = ::std::move(from);
  }

  inline CreateUserRegistryResponse& operator=(const CreateUserRegistryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateUserRegistryResponse& operator=(CreateUserRegistryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateUserRegistryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateUserRegistryResponse* internal_default_instance() {
    return reinterpret_cast<const CreateUserRegistryResponse*>(
               &_CreateUserRegistryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateUserRegistryResponse& a, CreateUserRegistryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateUserRegistryResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateUserRegistryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateUserRegistryResponse* New() const final {
    return new CreateUserRegistryResponse();
  }

  CreateUserRegistryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateUserRegistryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateUserRegistryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateUserRegistryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateUserRegistryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artifacts.users.v1alpha1.CreateUserRegistryResponse";
  }
  protected:
  explicit CreateUserRegistryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kUserRegistryFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .artifacts.users.v1alpha1.UsersRegistry user_registry = 1 [json_name = "userRegistry"];
  bool has_user_registry() const;
  private:
  bool _internal_has_user_registry() const;
  public:
  void clear_user_registry();
  const ::artifacts::users::v1alpha1::UsersRegistry& user_registry() const;
  PROTOBUF_MUST_USE_RESULT ::artifacts::users::v1alpha1::UsersRegistry* release_user_registry();
  ::artifacts::users::v1alpha1::UsersRegistry* mutable_user_registry();
  void set_allocated_user_registry(::artifacts::users::v1alpha1::UsersRegistry* user_registry);
  private:
  const ::artifacts::users::v1alpha1::UsersRegistry& _internal_user_registry() const;
  ::artifacts::users::v1alpha1::UsersRegistry* _internal_mutable_user_registry();
  public:
  void unsafe_arena_set_allocated_user_registry(
      ::artifacts::users::v1alpha1::UsersRegistry* user_registry);
  ::artifacts::users::v1alpha1::UsersRegistry* unsafe_arena_release_user_registry();

  // @@protoc_insertion_point(class_scope:artifacts.users.v1alpha1.CreateUserRegistryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::artifacts::users::v1alpha1::UsersRegistry* user_registry_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteUserRegistryRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artifacts.users.v1alpha1.DeleteUserRegistryRequest) */ {
 public:
  inline DeleteUserRegistryRequest() : DeleteUserRegistryRequest(nullptr) {}
  ~DeleteUserRegistryRequest() override;
  explicit constexpr DeleteUserRegistryRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteUserRegistryRequest(const DeleteUserRegistryRequest& from);
  DeleteUserRegistryRequest(DeleteUserRegistryRequest&& from) noexcept
    : DeleteUserRegistryRequest() {
    *this = ::std::move(from);
  }

  inline DeleteUserRegistryRequest& operator=(const DeleteUserRegistryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUserRegistryRequest& operator=(DeleteUserRegistryRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteUserRegistryRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUserRegistryRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteUserRegistryRequest*>(
               &_DeleteUserRegistryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DeleteUserRegistryRequest& a, DeleteUserRegistryRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUserRegistryRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUserRegistryRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteUserRegistryRequest* New() const final {
    return new DeleteUserRegistryRequest();
  }

  DeleteUserRegistryRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteUserRegistryRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteUserRegistryRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteUserRegistryRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUserRegistryRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artifacts.users.v1alpha1.DeleteUserRegistryRequest";
  }
  protected:
  explicit DeleteUserRegistryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserRegistryIdFieldNumber = 1,
  };
  // uint32 user_registry_id = 1 [json_name = "userRegistryId"];
  void clear_user_registry_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 user_registry_id() const;
  void set_user_registry_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_user_registry_id() const;
  void _internal_set_user_registry_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:artifacts.users.v1alpha1.DeleteUserRegistryRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 user_registry_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteUserRegistryResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artifacts.users.v1alpha1.DeleteUserRegistryResponse) */ {
 public:
  inline DeleteUserRegistryResponse() : DeleteUserRegistryResponse(nullptr) {}
  ~DeleteUserRegistryResponse() override;
  explicit constexpr DeleteUserRegistryResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteUserRegistryResponse(const DeleteUserRegistryResponse& from);
  DeleteUserRegistryResponse(DeleteUserRegistryResponse&& from) noexcept
    : DeleteUserRegistryResponse() {
    *this = ::std::move(from);
  }

  inline DeleteUserRegistryResponse& operator=(const DeleteUserRegistryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteUserRegistryResponse& operator=(DeleteUserRegistryResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteUserRegistryResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteUserRegistryResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteUserRegistryResponse*>(
               &_DeleteUserRegistryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(DeleteUserRegistryResponse& a, DeleteUserRegistryResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteUserRegistryResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteUserRegistryResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteUserRegistryResponse* New() const final {
    return new DeleteUserRegistryResponse();
  }

  DeleteUserRegistryResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteUserRegistryResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteUserRegistryResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteUserRegistryResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteUserRegistryResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artifacts.users.v1alpha1.DeleteUserRegistryResponse";
  }
  protected:
  explicit DeleteUserRegistryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:artifacts.users.v1alpha1.DeleteUserRegistryResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateUserRegistryRequest

// .artifacts.users.v1alpha1.UsersRegistry user_registry = 1 [json_name = "userRegistry"];
inline bool CreateUserRegistryRequest::_internal_has_user_registry() const {
  return this != internal_default_instance() && user_registry_ != nullptr;
}
inline bool CreateUserRegistryRequest::has_user_registry() const {
  return _internal_has_user_registry();
}
inline const ::artifacts::users::v1alpha1::UsersRegistry& CreateUserRegistryRequest::_internal_user_registry() const {
  const ::artifacts::users::v1alpha1::UsersRegistry* p = user_registry_;
  return p != nullptr ? *p : reinterpret_cast<const ::artifacts::users::v1alpha1::UsersRegistry&>(
      ::artifacts::users::v1alpha1::_UsersRegistry_default_instance_);
}
inline const ::artifacts::users::v1alpha1::UsersRegistry& CreateUserRegistryRequest::user_registry() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.CreateUserRegistryRequest.user_registry)
  return _internal_user_registry();
}
inline void CreateUserRegistryRequest::unsafe_arena_set_allocated_user_registry(
    ::artifacts::users::v1alpha1::UsersRegistry* user_registry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_registry_);
  }
  user_registry_ = user_registry;
  if (user_registry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:artifacts.users.v1alpha1.CreateUserRegistryRequest.user_registry)
}
inline ::artifacts::users::v1alpha1::UsersRegistry* CreateUserRegistryRequest::release_user_registry() {
  
  ::artifacts::users::v1alpha1::UsersRegistry* temp = user_registry_;
  user_registry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::artifacts::users::v1alpha1::UsersRegistry* CreateUserRegistryRequest::unsafe_arena_release_user_registry() {
  // @@protoc_insertion_point(field_release:artifacts.users.v1alpha1.CreateUserRegistryRequest.user_registry)
  
  ::artifacts::users::v1alpha1::UsersRegistry* temp = user_registry_;
  user_registry_ = nullptr;
  return temp;
}
inline ::artifacts::users::v1alpha1::UsersRegistry* CreateUserRegistryRequest::_internal_mutable_user_registry() {
  
  if (user_registry_ == nullptr) {
    auto* p = CreateMaybeMessage<::artifacts::users::v1alpha1::UsersRegistry>(GetArenaForAllocation());
    user_registry_ = p;
  }
  return user_registry_;
}
inline ::artifacts::users::v1alpha1::UsersRegistry* CreateUserRegistryRequest::mutable_user_registry() {
  ::artifacts::users::v1alpha1::UsersRegistry* _msg = _internal_mutable_user_registry();
  // @@protoc_insertion_point(field_mutable:artifacts.users.v1alpha1.CreateUserRegistryRequest.user_registry)
  return _msg;
}
inline void CreateUserRegistryRequest::set_allocated_user_registry(::artifacts::users::v1alpha1::UsersRegistry* user_registry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_registry_);
  }
  if (user_registry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_registry));
    if (message_arena != submessage_arena) {
      user_registry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_registry, submessage_arena);
    }
    
  } else {
    
  }
  user_registry_ = user_registry;
  // @@protoc_insertion_point(field_set_allocated:artifacts.users.v1alpha1.CreateUserRegistryRequest.user_registry)
}

// -------------------------------------------------------------------

// CreateUserRegistryResponse

// .artifacts.users.v1alpha1.UsersRegistry user_registry = 1 [json_name = "userRegistry"];
inline bool CreateUserRegistryResponse::_internal_has_user_registry() const {
  return this != internal_default_instance() && user_registry_ != nullptr;
}
inline bool CreateUserRegistryResponse::has_user_registry() const {
  return _internal_has_user_registry();
}
inline const ::artifacts::users::v1alpha1::UsersRegistry& CreateUserRegistryResponse::_internal_user_registry() const {
  const ::artifacts::users::v1alpha1::UsersRegistry* p = user_registry_;
  return p != nullptr ? *p : reinterpret_cast<const ::artifacts::users::v1alpha1::UsersRegistry&>(
      ::artifacts::users::v1alpha1::_UsersRegistry_default_instance_);
}
inline const ::artifacts::users::v1alpha1::UsersRegistry& CreateUserRegistryResponse::user_registry() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.CreateUserRegistryResponse.user_registry)
  return _internal_user_registry();
}
inline void CreateUserRegistryResponse::unsafe_arena_set_allocated_user_registry(
    ::artifacts::users::v1alpha1::UsersRegistry* user_registry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_registry_);
  }
  user_registry_ = user_registry;
  if (user_registry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:artifacts.users.v1alpha1.CreateUserRegistryResponse.user_registry)
}
inline ::artifacts::users::v1alpha1::UsersRegistry* CreateUserRegistryResponse::release_user_registry() {
  
  ::artifacts::users::v1alpha1::UsersRegistry* temp = user_registry_;
  user_registry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::artifacts::users::v1alpha1::UsersRegistry* CreateUserRegistryResponse::unsafe_arena_release_user_registry() {
  // @@protoc_insertion_point(field_release:artifacts.users.v1alpha1.CreateUserRegistryResponse.user_registry)
  
  ::artifacts::users::v1alpha1::UsersRegistry* temp = user_registry_;
  user_registry_ = nullptr;
  return temp;
}
inline ::artifacts::users::v1alpha1::UsersRegistry* CreateUserRegistryResponse::_internal_mutable_user_registry() {
  
  if (user_registry_ == nullptr) {
    auto* p = CreateMaybeMessage<::artifacts::users::v1alpha1::UsersRegistry>(GetArenaForAllocation());
    user_registry_ = p;
  }
  return user_registry_;
}
inline ::artifacts::users::v1alpha1::UsersRegistry* CreateUserRegistryResponse::mutable_user_registry() {
  ::artifacts::users::v1alpha1::UsersRegistry* _msg = _internal_mutable_user_registry();
  // @@protoc_insertion_point(field_mutable:artifacts.users.v1alpha1.CreateUserRegistryResponse.user_registry)
  return _msg;
}
inline void CreateUserRegistryResponse::set_allocated_user_registry(::artifacts::users::v1alpha1::UsersRegistry* user_registry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_registry_);
  }
  if (user_registry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(user_registry));
    if (message_arena != submessage_arena) {
      user_registry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user_registry, submessage_arena);
    }
    
  } else {
    
  }
  user_registry_ = user_registry;
  // @@protoc_insertion_point(field_set_allocated:artifacts.users.v1alpha1.CreateUserRegistryResponse.user_registry)
}

// string status = 2 [json_name = "status"];
inline void CreateUserRegistryResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& CreateUserRegistryResponse::status() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.CreateUserRegistryResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateUserRegistryResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.users.v1alpha1.CreateUserRegistryResponse.status)
}
inline std::string* CreateUserRegistryResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:artifacts.users.v1alpha1.CreateUserRegistryResponse.status)
  return _s;
}
inline const std::string& CreateUserRegistryResponse::_internal_status() const {
  return status_.Get();
}
inline void CreateUserRegistryResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateUserRegistryResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateUserRegistryResponse::release_status() {
  // @@protoc_insertion_point(field_release:artifacts.users.v1alpha1.CreateUserRegistryResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateUserRegistryResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.users.v1alpha1.CreateUserRegistryResponse.status)
}

// -------------------------------------------------------------------

// DeleteUserRegistryRequest

// uint32 user_registry_id = 1 [json_name = "userRegistryId"];
inline void DeleteUserRegistryRequest::clear_user_registry_id() {
  user_registry_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteUserRegistryRequest::_internal_user_registry_id() const {
  return user_registry_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeleteUserRegistryRequest::user_registry_id() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.DeleteUserRegistryRequest.user_registry_id)
  return _internal_user_registry_id();
}
inline void DeleteUserRegistryRequest::_internal_set_user_registry_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  user_registry_id_ = value;
}
inline void DeleteUserRegistryRequest::set_user_registry_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_user_registry_id(value);
  // @@protoc_insertion_point(field_set:artifacts.users.v1alpha1.DeleteUserRegistryRequest.user_registry_id)
}

// -------------------------------------------------------------------

// DeleteUserRegistryResponse

// string status = 2 [json_name = "status"];
inline void DeleteUserRegistryResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& DeleteUserRegistryResponse::status() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.DeleteUserRegistryResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteUserRegistryResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.users.v1alpha1.DeleteUserRegistryResponse.status)
}
inline std::string* DeleteUserRegistryResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:artifacts.users.v1alpha1.DeleteUserRegistryResponse.status)
  return _s;
}
inline const std::string& DeleteUserRegistryResponse::_internal_status() const {
  return status_.Get();
}
inline void DeleteUserRegistryResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteUserRegistryResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteUserRegistryResponse::release_status() {
  // @@protoc_insertion_point(field_release:artifacts.users.v1alpha1.DeleteUserRegistryResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteUserRegistryResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.users.v1alpha1.DeleteUserRegistryResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace users
}  // namespace artifacts

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto
