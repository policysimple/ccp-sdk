// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artifacts/users/v1alpha1/registry_users.proto

#include "artifacts/users/v1alpha1/registry_users.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace artifacts {
namespace users {
namespace v1alpha1 {
constexpr AccessHarbor::AccessHarbor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : action_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , resource_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , effect_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct AccessHarborDefaultTypeInternal {
  constexpr AccessHarborDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AccessHarborDefaultTypeInternal() {}
  union {
    AccessHarbor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AccessHarborDefaultTypeInternal _AccessHarbor_default_instance_;
constexpr PermissionsHarbor::PermissionsHarbor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : access_()
  , kind_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , namespace__(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PermissionsHarborDefaultTypeInternal {
  constexpr PermissionsHarborDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PermissionsHarborDefaultTypeInternal() {}
  union {
    PermissionsHarbor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PermissionsHarborDefaultTypeInternal _PermissionsHarbor_default_instance_;
constexpr Harbor::Harbor(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : permissions_harbor_()
  , secret_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , level_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , disable_(false)
  , duration_(0u){}
struct HarborDefaultTypeInternal {
  constexpr HarborDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HarborDefaultTypeInternal() {}
  union {
    Harbor _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HarborDefaultTypeInternal _Harbor_default_instance_;
constexpr UsersRegistry::UsersRegistry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , environment_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , environment_internal_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , harbor_(nullptr)
  , active_(false){}
struct UsersRegistryDefaultTypeInternal {
  constexpr UsersRegistryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UsersRegistryDefaultTypeInternal() {}
  union {
    UsersRegistry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UsersRegistryDefaultTypeInternal _UsersRegistry_default_instance_;
}  // namespace v1alpha1
}  // namespace users
}  // namespace artifacts
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::AccessHarbor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::AccessHarbor, action_),
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::AccessHarbor, resource_),
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::AccessHarbor, effect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::PermissionsHarbor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::PermissionsHarbor, access_),
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::PermissionsHarbor, kind_),
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::PermissionsHarbor, namespace__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::Harbor, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::Harbor, secret_),
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::Harbor, disable_),
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::Harbor, name_),
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::Harbor, level_),
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::Harbor, duration_),
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::Harbor, description_),
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::Harbor, permissions_harbor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::UsersRegistry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::UsersRegistry, id_),
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::UsersRegistry, organization_id_),
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::UsersRegistry, project_id_),
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::UsersRegistry, environment_id_),
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::UsersRegistry, environment_internal_name_),
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::UsersRegistry, active_),
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::UsersRegistry, harbor_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::artifacts::users::v1alpha1::AccessHarbor)},
  { 8, -1, sizeof(::artifacts::users::v1alpha1::PermissionsHarbor)},
  { 16, -1, sizeof(::artifacts::users::v1alpha1::Harbor)},
  { 28, -1, sizeof(::artifacts::users::v1alpha1::UsersRegistry)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::users::v1alpha1::_AccessHarbor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::users::v1alpha1::_PermissionsHarbor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::users::v1alpha1::_Harbor_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::users::v1alpha1::_UsersRegistry_default_instance_),
};

const char descriptor_table_protodef_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n-artifacts/users/v1alpha1/registry_user"
  "s.proto\022\030artifacts.users.v1alpha1\"Z\n\014Acc"
  "essHarbor\022\026\n\006action\030\001 \001(\tR\006action\022\032\n\010res"
  "ource\030\002 \001(\tR\010resource\022\026\n\006effect\030\003 \001(\tR\006e"
  "ffect\"\205\001\n\021PermissionsHarbor\022>\n\006access\030\001 "
  "\003(\0132&.artifacts.users.v1alpha1.AccessHar"
  "borR\006access\022\022\n\004kind\030\002 \001(\tR\004kind\022\034\n\tnames"
  "pace\030\003 \001(\tR\tnamespace\"\376\001\n\006Harbor\022\026\n\006secr"
  "et\030\001 \001(\tR\006secret\022\030\n\007disable\030\002 \001(\010R\007disab"
  "le\022\022\n\004name\030\003 \001(\tR\004name\022\024\n\005level\030\004 \001(\tR\005l"
  "evel\022\032\n\010duration\030\005 \001(\rR\010duration\022 \n\013desc"
  "ription\030\006 \001(\tR\013description\022Z\n\022permission"
  "s_harbor\030\007 \003(\0132+.artifacts.users.v1alpha"
  "1.PermissionsHarborR\021permissionsHarbor\"\234"
  "\002\n\rUsersRegistry\022\016\n\002id\030\001 \001(\tR\002id\022\'\n\017orga"
  "nization_id\030\002 \001(\tR\016organizationId\022\035\n\npro"
  "ject_id\030\003 \001(\tR\tprojectId\022%\n\016environment_"
  "id\030\004 \001(\tR\renvironmentId\022:\n\031environment_i"
  "nternal_name\030\005 \001(\tR\027environmentInternalN"
  "ame\022\026\n\006active\030\006 \001(\010R\006active\0228\n\006harbor\030\007 "
  "\001(\0132 .artifacts.users.v1alpha1.HarborR\006h"
  "arborB\261\001\n\"io.cuemby.artifacts.users.v1al"
  "pha1B\022RegistryUsersProtoP\001Z9github.com/c"
  "uemby/ccp-sdk/gen/go/artifacts/users/v1a"
  "lpha1\242\002\003PPX\252\002\030Artifacts.Users.V1Alpha1\312\002"
  "\030Artifacts\\Users\\V1Alpha1b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto = {
  false, false, 1033, descriptor_table_protodef_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto, "artifacts/users/v1alpha1/registry_users.proto", 
  &descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto_once, nullptr, 0, 4,
  schemas, file_default_instances, TableStruct_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto::offsets,
  file_level_metadata_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto, file_level_enum_descriptors_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto, file_level_service_descriptors_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto_getter() {
  return &descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto(&descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto);
namespace artifacts {
namespace users {
namespace v1alpha1 {

// ===================================================================

class AccessHarbor::_Internal {
 public:
};

AccessHarbor::AccessHarbor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.users.v1alpha1.AccessHarbor)
}
AccessHarbor::AccessHarbor(const AccessHarbor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_action().empty()) {
    action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_action(), 
      GetArenaForAllocation());
  }
  resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_resource().empty()) {
    resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_resource(), 
      GetArenaForAllocation());
  }
  effect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_effect().empty()) {
    effect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_effect(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:artifacts.users.v1alpha1.AccessHarbor)
}

inline void AccessHarbor::SharedCtor() {
action_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
resource_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
effect_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

AccessHarbor::~AccessHarbor() {
  // @@protoc_insertion_point(destructor:artifacts.users.v1alpha1.AccessHarbor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AccessHarbor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  action_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  resource_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  effect_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AccessHarbor::ArenaDtor(void* object) {
  AccessHarbor* _this = reinterpret_cast< AccessHarbor* >(object);
  (void)_this;
}
void AccessHarbor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AccessHarbor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AccessHarbor::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.users.v1alpha1.AccessHarbor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  action_.ClearToEmpty();
  resource_.ClearToEmpty();
  effect_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AccessHarbor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string action = 1 [json_name = "action"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_action();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.users.v1alpha1.AccessHarbor.action"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string resource = 2 [json_name = "resource"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_resource();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.users.v1alpha1.AccessHarbor.resource"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string effect = 3 [json_name = "effect"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_effect();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.users.v1alpha1.AccessHarbor.effect"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AccessHarbor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.users.v1alpha1.AccessHarbor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string action = 1 [json_name = "action"];
  if (!this->_internal_action().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_action().data(), static_cast<int>(this->_internal_action().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.users.v1alpha1.AccessHarbor.action");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_action(), target);
  }

  // string resource = 2 [json_name = "resource"];
  if (!this->_internal_resource().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_resource().data(), static_cast<int>(this->_internal_resource().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.users.v1alpha1.AccessHarbor.resource");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_resource(), target);
  }

  // string effect = 3 [json_name = "effect"];
  if (!this->_internal_effect().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_effect().data(), static_cast<int>(this->_internal_effect().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.users.v1alpha1.AccessHarbor.effect");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_effect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.users.v1alpha1.AccessHarbor)
  return target;
}

size_t AccessHarbor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.users.v1alpha1.AccessHarbor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string action = 1 [json_name = "action"];
  if (!this->_internal_action().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_action());
  }

  // string resource = 2 [json_name = "resource"];
  if (!this->_internal_resource().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_resource());
  }

  // string effect = 3 [json_name = "effect"];
  if (!this->_internal_effect().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_effect());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AccessHarbor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AccessHarbor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AccessHarbor::GetClassData() const { return &_class_data_; }

void AccessHarbor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<AccessHarbor *>(to)->MergeFrom(
      static_cast<const AccessHarbor &>(from));
}


void AccessHarbor::MergeFrom(const AccessHarbor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.users.v1alpha1.AccessHarbor)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_action().empty()) {
    _internal_set_action(from._internal_action());
  }
  if (!from._internal_resource().empty()) {
    _internal_set_resource(from._internal_resource());
  }
  if (!from._internal_effect().empty()) {
    _internal_set_effect(from._internal_effect());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AccessHarbor::CopyFrom(const AccessHarbor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.users.v1alpha1.AccessHarbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AccessHarbor::IsInitialized() const {
  return true;
}

void AccessHarbor::InternalSwap(AccessHarbor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &action_, GetArenaForAllocation(),
      &other->action_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &resource_, GetArenaForAllocation(),
      &other->resource_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &effect_, GetArenaForAllocation(),
      &other->effect_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata AccessHarbor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto_getter, &descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto_once,
      file_level_metadata_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto[0]);
}

// ===================================================================

class PermissionsHarbor::_Internal {
 public:
};

PermissionsHarbor::PermissionsHarbor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  access_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.users.v1alpha1.PermissionsHarbor)
}
PermissionsHarbor::PermissionsHarbor(const PermissionsHarbor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      access_(from.access_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_kind().empty()) {
    kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_kind(), 
      GetArenaForAllocation());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:artifacts.users.v1alpha1.PermissionsHarbor)
}

inline void PermissionsHarbor::SharedCtor() {
kind_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PermissionsHarbor::~PermissionsHarbor() {
  // @@protoc_insertion_point(destructor:artifacts.users.v1alpha1.PermissionsHarbor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PermissionsHarbor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  kind_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PermissionsHarbor::ArenaDtor(void* object) {
  PermissionsHarbor* _this = reinterpret_cast< PermissionsHarbor* >(object);
  (void)_this;
}
void PermissionsHarbor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PermissionsHarbor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PermissionsHarbor::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.users.v1alpha1.PermissionsHarbor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  access_.Clear();
  kind_.ClearToEmpty();
  namespace__.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PermissionsHarbor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .artifacts.users.v1alpha1.AccessHarbor access = 1 [json_name = "access"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_access(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string kind = 2 [json_name = "kind"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_kind();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.users.v1alpha1.PermissionsHarbor.kind"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string namespace = 3 [json_name = "namespace"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.users.v1alpha1.PermissionsHarbor.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PermissionsHarbor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.users.v1alpha1.PermissionsHarbor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .artifacts.users.v1alpha1.AccessHarbor access = 1 [json_name = "access"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_access_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_access(i), target, stream);
  }

  // string kind = 2 [json_name = "kind"];
  if (!this->_internal_kind().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_kind().data(), static_cast<int>(this->_internal_kind().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.users.v1alpha1.PermissionsHarbor.kind");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_kind(), target);
  }

  // string namespace = 3 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.users.v1alpha1.PermissionsHarbor.namespace");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_namespace_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.users.v1alpha1.PermissionsHarbor)
  return target;
}

size_t PermissionsHarbor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.users.v1alpha1.PermissionsHarbor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .artifacts.users.v1alpha1.AccessHarbor access = 1 [json_name = "access"];
  total_size += 1UL * this->_internal_access_size();
  for (const auto& msg : this->access_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string kind = 2 [json_name = "kind"];
  if (!this->_internal_kind().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_kind());
  }

  // string namespace = 3 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PermissionsHarbor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PermissionsHarbor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PermissionsHarbor::GetClassData() const { return &_class_data_; }

void PermissionsHarbor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PermissionsHarbor *>(to)->MergeFrom(
      static_cast<const PermissionsHarbor &>(from));
}


void PermissionsHarbor::MergeFrom(const PermissionsHarbor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.users.v1alpha1.PermissionsHarbor)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  access_.MergeFrom(from.access_);
  if (!from._internal_kind().empty()) {
    _internal_set_kind(from._internal_kind());
  }
  if (!from._internal_namespace_().empty()) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PermissionsHarbor::CopyFrom(const PermissionsHarbor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.users.v1alpha1.PermissionsHarbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PermissionsHarbor::IsInitialized() const {
  return true;
}

void PermissionsHarbor::InternalSwap(PermissionsHarbor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  access_.InternalSwap(&other->access_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &kind_, GetArenaForAllocation(),
      &other->kind_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &namespace__, GetArenaForAllocation(),
      &other->namespace__, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PermissionsHarbor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto_getter, &descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto_once,
      file_level_metadata_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto[1]);
}

// ===================================================================

class Harbor::_Internal {
 public:
};

Harbor::Harbor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  permissions_harbor_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.users.v1alpha1.Harbor)
}
Harbor::Harbor(const Harbor& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      permissions_harbor_(from.permissions_harbor_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_secret().empty()) {
    secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_secret(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_level().empty()) {
    level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_level(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  ::memcpy(&disable_, &from.disable_,
    static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&disable_)) + sizeof(duration_));
  // @@protoc_insertion_point(copy_constructor:artifacts.users.v1alpha1.Harbor)
}

inline void Harbor::SharedCtor() {
secret_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
level_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&disable_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&duration_) -
    reinterpret_cast<char*>(&disable_)) + sizeof(duration_));
}

Harbor::~Harbor() {
  // @@protoc_insertion_point(destructor:artifacts.users.v1alpha1.Harbor)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Harbor::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  secret_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  level_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Harbor::ArenaDtor(void* object) {
  Harbor* _this = reinterpret_cast< Harbor* >(object);
  (void)_this;
}
void Harbor::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Harbor::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Harbor::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.users.v1alpha1.Harbor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  permissions_harbor_.Clear();
  secret_.ClearToEmpty();
  name_.ClearToEmpty();
  level_.ClearToEmpty();
  description_.ClearToEmpty();
  ::memset(&disable_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&duration_) -
      reinterpret_cast<char*>(&disable_)) + sizeof(duration_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Harbor::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string secret = 1 [json_name = "secret"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_secret();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.users.v1alpha1.Harbor.secret"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool disable = 2 [json_name = "disable"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          disable_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 3 [json_name = "name"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.users.v1alpha1.Harbor.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string level = 4 [json_name = "level"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_level();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.users.v1alpha1.Harbor.level"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 duration = 5 [json_name = "duration"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 6 [json_name = "description"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.users.v1alpha1.Harbor.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .artifacts.users.v1alpha1.PermissionsHarbor permissions_harbor = 7 [json_name = "permissionsHarbor"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_permissions_harbor(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Harbor::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.users.v1alpha1.Harbor)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string secret = 1 [json_name = "secret"];
  if (!this->_internal_secret().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_secret().data(), static_cast<int>(this->_internal_secret().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.users.v1alpha1.Harbor.secret");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_secret(), target);
  }

  // bool disable = 2 [json_name = "disable"];
  if (this->_internal_disable() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_disable(), target);
  }

  // string name = 3 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.users.v1alpha1.Harbor.name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_name(), target);
  }

  // string level = 4 [json_name = "level"];
  if (!this->_internal_level().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_level().data(), static_cast<int>(this->_internal_level().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.users.v1alpha1.Harbor.level");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_level(), target);
  }

  // uint32 duration = 5 [json_name = "duration"];
  if (this->_internal_duration() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_duration(), target);
  }

  // string description = 6 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.users.v1alpha1.Harbor.description");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_description(), target);
  }

  // repeated .artifacts.users.v1alpha1.PermissionsHarbor permissions_harbor = 7 [json_name = "permissionsHarbor"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_permissions_harbor_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_permissions_harbor(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.users.v1alpha1.Harbor)
  return target;
}

size_t Harbor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.users.v1alpha1.Harbor)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .artifacts.users.v1alpha1.PermissionsHarbor permissions_harbor = 7 [json_name = "permissionsHarbor"];
  total_size += 1UL * this->_internal_permissions_harbor_size();
  for (const auto& msg : this->permissions_harbor_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string secret = 1 [json_name = "secret"];
  if (!this->_internal_secret().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_secret());
  }

  // string name = 3 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string level = 4 [json_name = "level"];
  if (!this->_internal_level().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_level());
  }

  // string description = 6 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // bool disable = 2 [json_name = "disable"];
  if (this->_internal_disable() != 0) {
    total_size += 1 + 1;
  }

  // uint32 duration = 5 [json_name = "duration"];
  if (this->_internal_duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Harbor::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Harbor::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Harbor::GetClassData() const { return &_class_data_; }

void Harbor::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Harbor *>(to)->MergeFrom(
      static_cast<const Harbor &>(from));
}


void Harbor::MergeFrom(const Harbor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.users.v1alpha1.Harbor)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  permissions_harbor_.MergeFrom(from.permissions_harbor_);
  if (!from._internal_secret().empty()) {
    _internal_set_secret(from._internal_secret());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_level().empty()) {
    _internal_set_level(from._internal_level());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (from._internal_disable() != 0) {
    _internal_set_disable(from._internal_disable());
  }
  if (from._internal_duration() != 0) {
    _internal_set_duration(from._internal_duration());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Harbor::CopyFrom(const Harbor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.users.v1alpha1.Harbor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Harbor::IsInitialized() const {
  return true;
}

void Harbor::InternalSwap(Harbor* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  permissions_harbor_.InternalSwap(&other->permissions_harbor_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &secret_, GetArenaForAllocation(),
      &other->secret_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &level_, GetArenaForAllocation(),
      &other->level_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Harbor, duration_)
      + sizeof(Harbor::duration_)
      - PROTOBUF_FIELD_OFFSET(Harbor, disable_)>(
          reinterpret_cast<char*>(&disable_),
          reinterpret_cast<char*>(&other->disable_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Harbor::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto_getter, &descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto_once,
      file_level_metadata_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto[2]);
}

// ===================================================================

class UsersRegistry::_Internal {
 public:
  static const ::artifacts::users::v1alpha1::Harbor& harbor(const UsersRegistry* msg);
};

const ::artifacts::users::v1alpha1::Harbor&
UsersRegistry::_Internal::harbor(const UsersRegistry* msg) {
  return *msg->harbor_;
}
UsersRegistry::UsersRegistry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.users.v1alpha1.UsersRegistry)
}
UsersRegistry::UsersRegistry(const UsersRegistry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization_id().empty()) {
    organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization_id(), 
      GetArenaForAllocation());
  }
  project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_id().empty()) {
    project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_id(), 
      GetArenaForAllocation());
  }
  environment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_environment_id().empty()) {
    environment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_environment_id(), 
      GetArenaForAllocation());
  }
  environment_internal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_environment_internal_name().empty()) {
    environment_internal_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_environment_internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_harbor()) {
    harbor_ = new ::artifacts::users::v1alpha1::Harbor(*from.harbor_);
  } else {
    harbor_ = nullptr;
  }
  active_ = from.active_;
  // @@protoc_insertion_point(copy_constructor:artifacts.users.v1alpha1.UsersRegistry)
}

inline void UsersRegistry::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
environment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
environment_internal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&harbor_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&active_) -
    reinterpret_cast<char*>(&harbor_)) + sizeof(active_));
}

UsersRegistry::~UsersRegistry() {
  // @@protoc_insertion_point(destructor:artifacts.users.v1alpha1.UsersRegistry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UsersRegistry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  environment_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  environment_internal_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete harbor_;
}

void UsersRegistry::ArenaDtor(void* object) {
  UsersRegistry* _this = reinterpret_cast< UsersRegistry* >(object);
  (void)_this;
}
void UsersRegistry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UsersRegistry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UsersRegistry::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.users.v1alpha1.UsersRegistry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  organization_id_.ClearToEmpty();
  project_id_.ClearToEmpty();
  environment_id_.ClearToEmpty();
  environment_internal_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && harbor_ != nullptr) {
    delete harbor_;
  }
  harbor_ = nullptr;
  active_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UsersRegistry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.users.v1alpha1.UsersRegistry.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string organization_id = 2 [json_name = "organizationId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.users.v1alpha1.UsersRegistry.organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string project_id = 3 [json_name = "projectId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.users.v1alpha1.UsersRegistry.project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string environment_id = 4 [json_name = "environmentId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_environment_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.users.v1alpha1.UsersRegistry.environment_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string environment_internal_name = 5 [json_name = "environmentInternalName"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_environment_internal_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.users.v1alpha1.UsersRegistry.environment_internal_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool active = 6 [json_name = "active"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          active_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .artifacts.users.v1alpha1.Harbor harbor = 7 [json_name = "harbor"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_harbor(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UsersRegistry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.users.v1alpha1.UsersRegistry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.users.v1alpha1.UsersRegistry.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string organization_id = 2 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.users.v1alpha1.UsersRegistry.organization_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_organization_id(), target);
  }

  // string project_id = 3 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_id().data(), static_cast<int>(this->_internal_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.users.v1alpha1.UsersRegistry.project_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_project_id(), target);
  }

  // string environment_id = 4 [json_name = "environmentId"];
  if (!this->_internal_environment_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_environment_id().data(), static_cast<int>(this->_internal_environment_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.users.v1alpha1.UsersRegistry.environment_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_environment_id(), target);
  }

  // string environment_internal_name = 5 [json_name = "environmentInternalName"];
  if (!this->_internal_environment_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_environment_internal_name().data(), static_cast<int>(this->_internal_environment_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.users.v1alpha1.UsersRegistry.environment_internal_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_environment_internal_name(), target);
  }

  // bool active = 6 [json_name = "active"];
  if (this->_internal_active() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_active(), target);
  }

  // .artifacts.users.v1alpha1.Harbor harbor = 7 [json_name = "harbor"];
  if (this->_internal_has_harbor()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::harbor(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.users.v1alpha1.UsersRegistry)
  return target;
}

size_t UsersRegistry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.users.v1alpha1.UsersRegistry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string organization_id = 2 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  // string project_id = 3 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_id());
  }

  // string environment_id = 4 [json_name = "environmentId"];
  if (!this->_internal_environment_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_environment_id());
  }

  // string environment_internal_name = 5 [json_name = "environmentInternalName"];
  if (!this->_internal_environment_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_environment_internal_name());
  }

  // .artifacts.users.v1alpha1.Harbor harbor = 7 [json_name = "harbor"];
  if (this->_internal_has_harbor()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *harbor_);
  }

  // bool active = 6 [json_name = "active"];
  if (this->_internal_active() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UsersRegistry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UsersRegistry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UsersRegistry::GetClassData() const { return &_class_data_; }

void UsersRegistry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UsersRegistry *>(to)->MergeFrom(
      static_cast<const UsersRegistry &>(from));
}


void UsersRegistry::MergeFrom(const UsersRegistry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.users.v1alpha1.UsersRegistry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_organization_id().empty()) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (!from._internal_project_id().empty()) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (!from._internal_environment_id().empty()) {
    _internal_set_environment_id(from._internal_environment_id());
  }
  if (!from._internal_environment_internal_name().empty()) {
    _internal_set_environment_internal_name(from._internal_environment_internal_name());
  }
  if (from._internal_has_harbor()) {
    _internal_mutable_harbor()->::artifacts::users::v1alpha1::Harbor::MergeFrom(from._internal_harbor());
  }
  if (from._internal_active() != 0) {
    _internal_set_active(from._internal_active());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UsersRegistry::CopyFrom(const UsersRegistry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.users.v1alpha1.UsersRegistry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UsersRegistry::IsInitialized() const {
  return true;
}

void UsersRegistry::InternalSwap(UsersRegistry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_id_, GetArenaForAllocation(),
      &other->organization_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_id_, GetArenaForAllocation(),
      &other->project_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &environment_id_, GetArenaForAllocation(),
      &other->environment_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &environment_internal_name_, GetArenaForAllocation(),
      &other->environment_internal_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UsersRegistry, active_)
      + sizeof(UsersRegistry::active_)
      - PROTOBUF_FIELD_OFFSET(UsersRegistry, harbor_)>(
          reinterpret_cast<char*>(&harbor_),
          reinterpret_cast<char*>(&other->harbor_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UsersRegistry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto_getter, &descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto_once,
      file_level_metadata_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace users
}  // namespace artifacts
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::artifacts::users::v1alpha1::AccessHarbor* Arena::CreateMaybeMessage< ::artifacts::users::v1alpha1::AccessHarbor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::users::v1alpha1::AccessHarbor >(arena);
}
template<> PROTOBUF_NOINLINE ::artifacts::users::v1alpha1::PermissionsHarbor* Arena::CreateMaybeMessage< ::artifacts::users::v1alpha1::PermissionsHarbor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::users::v1alpha1::PermissionsHarbor >(arena);
}
template<> PROTOBUF_NOINLINE ::artifacts::users::v1alpha1::Harbor* Arena::CreateMaybeMessage< ::artifacts::users::v1alpha1::Harbor >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::users::v1alpha1::Harbor >(arena);
}
template<> PROTOBUF_NOINLINE ::artifacts::users::v1alpha1::UsersRegistry* Arena::CreateMaybeMessage< ::artifacts::users::v1alpha1::UsersRegistry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::users::v1alpha1::UsersRegistry >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
