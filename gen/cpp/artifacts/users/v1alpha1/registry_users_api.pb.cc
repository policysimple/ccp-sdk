// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artifacts/users/v1alpha1/registry_users_api.proto

#include "artifacts/users/v1alpha1/registry_users_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace artifacts {
namespace users {
namespace v1alpha1 {
constexpr CreateUserRegistryRequest::CreateUserRegistryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_registry_(nullptr){}
struct CreateUserRegistryRequestDefaultTypeInternal {
  constexpr CreateUserRegistryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateUserRegistryRequestDefaultTypeInternal() {}
  union {
    CreateUserRegistryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateUserRegistryRequestDefaultTypeInternal _CreateUserRegistryRequest_default_instance_;
constexpr CreateUserRegistryResponse::CreateUserRegistryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_registry_(nullptr){}
struct CreateUserRegistryResponseDefaultTypeInternal {
  constexpr CreateUserRegistryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateUserRegistryResponseDefaultTypeInternal() {}
  union {
    CreateUserRegistryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateUserRegistryResponseDefaultTypeInternal _CreateUserRegistryResponse_default_instance_;
constexpr DeleteUserRegistryRequest::DeleteUserRegistryRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_registry_id_(0u){}
struct DeleteUserRegistryRequestDefaultTypeInternal {
  constexpr DeleteUserRegistryRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteUserRegistryRequestDefaultTypeInternal() {}
  union {
    DeleteUserRegistryRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteUserRegistryRequestDefaultTypeInternal _DeleteUserRegistryRequest_default_instance_;
constexpr DeleteUserRegistryResponse::DeleteUserRegistryResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteUserRegistryResponseDefaultTypeInternal {
  constexpr DeleteUserRegistryResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteUserRegistryResponseDefaultTypeInternal() {}
  union {
    DeleteUserRegistryResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteUserRegistryResponseDefaultTypeInternal _DeleteUserRegistryResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace users
}  // namespace artifacts
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::CreateUserRegistryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::CreateUserRegistryRequest, user_registry_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::CreateUserRegistryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::CreateUserRegistryResponse, user_registry_),
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::CreateUserRegistryResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::DeleteUserRegistryRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::DeleteUserRegistryRequest, user_registry_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::DeleteUserRegistryResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::artifacts::users::v1alpha1::DeleteUserRegistryResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::artifacts::users::v1alpha1::CreateUserRegistryRequest)},
  { 6, -1, sizeof(::artifacts::users::v1alpha1::CreateUserRegistryResponse)},
  { 13, -1, sizeof(::artifacts::users::v1alpha1::DeleteUserRegistryRequest)},
  { 19, -1, sizeof(::artifacts::users::v1alpha1::DeleteUserRegistryResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::users::v1alpha1::_CreateUserRegistryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::users::v1alpha1::_CreateUserRegistryResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::users::v1alpha1::_DeleteUserRegistryRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::artifacts::users::v1alpha1::_DeleteUserRegistryResponse_default_instance_),
};

const char descriptor_table_protodef_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n1artifacts/users/v1alpha1/registry_user"
  "s_api.proto\022\030artifacts.users.v1alpha1\032-a"
  "rtifacts/users/v1alpha1/registry_users.p"
  "roto\"i\n\031CreateUserRegistryRequest\022L\n\ruse"
  "r_registry\030\001 \001(\0132\'.artifacts.users.v1alp"
  "ha1.UsersRegistryR\014userRegistry\"\202\001\n\032Crea"
  "teUserRegistryResponse\022L\n\ruser_registry\030"
  "\001 \001(\0132\'.artifacts.users.v1alpha1.UsersRe"
  "gistryR\014userRegistry\022\026\n\006status\030\002 \001(\tR\006st"
  "atus\"E\n\031DeleteUserRegistryRequest\022(\n\020use"
  "r_registry_id\030\001 \001(\rR\016userRegistryId\"4\n\032D"
  "eleteUserRegistryResponse\022\026\n\006status\030\002 \001("
  "\tR\006status2\233\002\n\027RegistryUsersAPIService\022\177\n"
  "\022CreateUserRegistry\0223.artifacts.users.v1"
  "alpha1.CreateUserRegistryRequest\0324.artif"
  "acts.users.v1alpha1.CreateUserRegistryRe"
  "sponse\022\177\n\022DeleteUserRegistry\0223.artifacts"
  ".users.v1alpha1.DeleteUserRegistryReques"
  "t\0324.artifacts.users.v1alpha1.DeleteUserR"
  "egistryResponseB\264\001\n\"io.cuemby.artifacts."
  "users.v1alpha1B\025RegistryUsersProtoAPIP\001Z"
  "9github.com/cuemby/ccp-sdk/gen/go/artifa"
  "cts/users/v1alpha1\242\002\003PPX\252\002\030Artifacts.Use"
  "rs.V1Alpha1\312\002\030Artifacts\\Users\\V1Alpha1b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto_deps[1] = {
  &::descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto = {
  false, false, 966, descriptor_table_protodef_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto, "artifacts/users/v1alpha1/registry_users_api.proto", 
  &descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto_once, descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto_deps, 1, 4,
  schemas, file_default_instances, TableStruct_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto::offsets,
  file_level_metadata_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto, file_level_enum_descriptors_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto, file_level_service_descriptors_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto_getter() {
  return &descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto(&descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto);
namespace artifacts {
namespace users {
namespace v1alpha1 {

// ===================================================================

class CreateUserRegistryRequest::_Internal {
 public:
  static const ::artifacts::users::v1alpha1::UsersRegistry& user_registry(const CreateUserRegistryRequest* msg);
};

const ::artifacts::users::v1alpha1::UsersRegistry&
CreateUserRegistryRequest::_Internal::user_registry(const CreateUserRegistryRequest* msg) {
  return *msg->user_registry_;
}
void CreateUserRegistryRequest::clear_user_registry() {
  if (GetArenaForAllocation() == nullptr && user_registry_ != nullptr) {
    delete user_registry_;
  }
  user_registry_ = nullptr;
}
CreateUserRegistryRequest::CreateUserRegistryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.users.v1alpha1.CreateUserRegistryRequest)
}
CreateUserRegistryRequest::CreateUserRegistryRequest(const CreateUserRegistryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_user_registry()) {
    user_registry_ = new ::artifacts::users::v1alpha1::UsersRegistry(*from.user_registry_);
  } else {
    user_registry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:artifacts.users.v1alpha1.CreateUserRegistryRequest)
}

inline void CreateUserRegistryRequest::SharedCtor() {
user_registry_ = nullptr;
}

CreateUserRegistryRequest::~CreateUserRegistryRequest() {
  // @@protoc_insertion_point(destructor:artifacts.users.v1alpha1.CreateUserRegistryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateUserRegistryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete user_registry_;
}

void CreateUserRegistryRequest::ArenaDtor(void* object) {
  CreateUserRegistryRequest* _this = reinterpret_cast< CreateUserRegistryRequest* >(object);
  (void)_this;
}
void CreateUserRegistryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateUserRegistryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateUserRegistryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.users.v1alpha1.CreateUserRegistryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && user_registry_ != nullptr) {
    delete user_registry_;
  }
  user_registry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateUserRegistryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .artifacts.users.v1alpha1.UsersRegistry user_registry = 1 [json_name = "userRegistry"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_registry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateUserRegistryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.users.v1alpha1.CreateUserRegistryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .artifacts.users.v1alpha1.UsersRegistry user_registry = 1 [json_name = "userRegistry"];
  if (this->_internal_has_user_registry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_registry(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.users.v1alpha1.CreateUserRegistryRequest)
  return target;
}

size_t CreateUserRegistryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.users.v1alpha1.CreateUserRegistryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .artifacts.users.v1alpha1.UsersRegistry user_registry = 1 [json_name = "userRegistry"];
  if (this->_internal_has_user_registry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_registry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateUserRegistryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateUserRegistryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateUserRegistryRequest::GetClassData() const { return &_class_data_; }

void CreateUserRegistryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateUserRegistryRequest *>(to)->MergeFrom(
      static_cast<const CreateUserRegistryRequest &>(from));
}


void CreateUserRegistryRequest::MergeFrom(const CreateUserRegistryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.users.v1alpha1.CreateUserRegistryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_user_registry()) {
    _internal_mutable_user_registry()->::artifacts::users::v1alpha1::UsersRegistry::MergeFrom(from._internal_user_registry());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateUserRegistryRequest::CopyFrom(const CreateUserRegistryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.users.v1alpha1.CreateUserRegistryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUserRegistryRequest::IsInitialized() const {
  return true;
}

void CreateUserRegistryRequest::InternalSwap(CreateUserRegistryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(user_registry_, other->user_registry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateUserRegistryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto_getter, &descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto_once,
      file_level_metadata_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto[0]);
}

// ===================================================================

class CreateUserRegistryResponse::_Internal {
 public:
  static const ::artifacts::users::v1alpha1::UsersRegistry& user_registry(const CreateUserRegistryResponse* msg);
};

const ::artifacts::users::v1alpha1::UsersRegistry&
CreateUserRegistryResponse::_Internal::user_registry(const CreateUserRegistryResponse* msg) {
  return *msg->user_registry_;
}
void CreateUserRegistryResponse::clear_user_registry() {
  if (GetArenaForAllocation() == nullptr && user_registry_ != nullptr) {
    delete user_registry_;
  }
  user_registry_ = nullptr;
}
CreateUserRegistryResponse::CreateUserRegistryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.users.v1alpha1.CreateUserRegistryResponse)
}
CreateUserRegistryResponse::CreateUserRegistryResponse(const CreateUserRegistryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_user_registry()) {
    user_registry_ = new ::artifacts::users::v1alpha1::UsersRegistry(*from.user_registry_);
  } else {
    user_registry_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:artifacts.users.v1alpha1.CreateUserRegistryResponse)
}

inline void CreateUserRegistryResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_registry_ = nullptr;
}

CreateUserRegistryResponse::~CreateUserRegistryResponse() {
  // @@protoc_insertion_point(destructor:artifacts.users.v1alpha1.CreateUserRegistryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateUserRegistryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete user_registry_;
}

void CreateUserRegistryResponse::ArenaDtor(void* object) {
  CreateUserRegistryResponse* _this = reinterpret_cast< CreateUserRegistryResponse* >(object);
  (void)_this;
}
void CreateUserRegistryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateUserRegistryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateUserRegistryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.users.v1alpha1.CreateUserRegistryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && user_registry_ != nullptr) {
    delete user_registry_;
  }
  user_registry_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateUserRegistryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .artifacts.users.v1alpha1.UsersRegistry user_registry = 1 [json_name = "userRegistry"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_user_registry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.users.v1alpha1.CreateUserRegistryResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateUserRegistryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.users.v1alpha1.CreateUserRegistryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .artifacts.users.v1alpha1.UsersRegistry user_registry = 1 [json_name = "userRegistry"];
  if (this->_internal_has_user_registry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::user_registry(this), target, stream);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.users.v1alpha1.CreateUserRegistryResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.users.v1alpha1.CreateUserRegistryResponse)
  return target;
}

size_t CreateUserRegistryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.users.v1alpha1.CreateUserRegistryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .artifacts.users.v1alpha1.UsersRegistry user_registry = 1 [json_name = "userRegistry"];
  if (this->_internal_has_user_registry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *user_registry_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateUserRegistryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateUserRegistryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateUserRegistryResponse::GetClassData() const { return &_class_data_; }

void CreateUserRegistryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateUserRegistryResponse *>(to)->MergeFrom(
      static_cast<const CreateUserRegistryResponse &>(from));
}


void CreateUserRegistryResponse::MergeFrom(const CreateUserRegistryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.users.v1alpha1.CreateUserRegistryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_user_registry()) {
    _internal_mutable_user_registry()->::artifacts::users::v1alpha1::UsersRegistry::MergeFrom(from._internal_user_registry());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateUserRegistryResponse::CopyFrom(const CreateUserRegistryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.users.v1alpha1.CreateUserRegistryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateUserRegistryResponse::IsInitialized() const {
  return true;
}

void CreateUserRegistryResponse::InternalSwap(CreateUserRegistryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
  swap(user_registry_, other->user_registry_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateUserRegistryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto_getter, &descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto_once,
      file_level_metadata_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto[1]);
}

// ===================================================================

class DeleteUserRegistryRequest::_Internal {
 public:
};

DeleteUserRegistryRequest::DeleteUserRegistryRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.users.v1alpha1.DeleteUserRegistryRequest)
}
DeleteUserRegistryRequest::DeleteUserRegistryRequest(const DeleteUserRegistryRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_registry_id_ = from.user_registry_id_;
  // @@protoc_insertion_point(copy_constructor:artifacts.users.v1alpha1.DeleteUserRegistryRequest)
}

inline void DeleteUserRegistryRequest::SharedCtor() {
user_registry_id_ = 0u;
}

DeleteUserRegistryRequest::~DeleteUserRegistryRequest() {
  // @@protoc_insertion_point(destructor:artifacts.users.v1alpha1.DeleteUserRegistryRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteUserRegistryRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DeleteUserRegistryRequest::ArenaDtor(void* object) {
  DeleteUserRegistryRequest* _this = reinterpret_cast< DeleteUserRegistryRequest* >(object);
  (void)_this;
}
void DeleteUserRegistryRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteUserRegistryRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteUserRegistryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.users.v1alpha1.DeleteUserRegistryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_registry_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteUserRegistryRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 user_registry_id = 1 [json_name = "userRegistryId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          user_registry_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteUserRegistryRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.users.v1alpha1.DeleteUserRegistryRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 user_registry_id = 1 [json_name = "userRegistryId"];
  if (this->_internal_user_registry_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_user_registry_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.users.v1alpha1.DeleteUserRegistryRequest)
  return target;
}

size_t DeleteUserRegistryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.users.v1alpha1.DeleteUserRegistryRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 user_registry_id = 1 [json_name = "userRegistryId"];
  if (this->_internal_user_registry_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_user_registry_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteUserRegistryRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteUserRegistryRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteUserRegistryRequest::GetClassData() const { return &_class_data_; }

void DeleteUserRegistryRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteUserRegistryRequest *>(to)->MergeFrom(
      static_cast<const DeleteUserRegistryRequest &>(from));
}


void DeleteUserRegistryRequest::MergeFrom(const DeleteUserRegistryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.users.v1alpha1.DeleteUserRegistryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_user_registry_id() != 0) {
    _internal_set_user_registry_id(from._internal_user_registry_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteUserRegistryRequest::CopyFrom(const DeleteUserRegistryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.users.v1alpha1.DeleteUserRegistryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteUserRegistryRequest::IsInitialized() const {
  return true;
}

void DeleteUserRegistryRequest::InternalSwap(DeleteUserRegistryRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(user_registry_id_, other->user_registry_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteUserRegistryRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto_getter, &descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto_once,
      file_level_metadata_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto[2]);
}

// ===================================================================

class DeleteUserRegistryResponse::_Internal {
 public:
};

DeleteUserRegistryResponse::DeleteUserRegistryResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:artifacts.users.v1alpha1.DeleteUserRegistryResponse)
}
DeleteUserRegistryResponse::DeleteUserRegistryResponse(const DeleteUserRegistryResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:artifacts.users.v1alpha1.DeleteUserRegistryResponse)
}

inline void DeleteUserRegistryResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteUserRegistryResponse::~DeleteUserRegistryResponse() {
  // @@protoc_insertion_point(destructor:artifacts.users.v1alpha1.DeleteUserRegistryResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteUserRegistryResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteUserRegistryResponse::ArenaDtor(void* object) {
  DeleteUserRegistryResponse* _this = reinterpret_cast< DeleteUserRegistryResponse* >(object);
  (void)_this;
}
void DeleteUserRegistryResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteUserRegistryResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteUserRegistryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:artifacts.users.v1alpha1.DeleteUserRegistryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteUserRegistryResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "artifacts.users.v1alpha1.DeleteUserRegistryResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteUserRegistryResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:artifacts.users.v1alpha1.DeleteUserRegistryResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "artifacts.users.v1alpha1.DeleteUserRegistryResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:artifacts.users.v1alpha1.DeleteUserRegistryResponse)
  return target;
}

size_t DeleteUserRegistryResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:artifacts.users.v1alpha1.DeleteUserRegistryResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteUserRegistryResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteUserRegistryResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteUserRegistryResponse::GetClassData() const { return &_class_data_; }

void DeleteUserRegistryResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteUserRegistryResponse *>(to)->MergeFrom(
      static_cast<const DeleteUserRegistryResponse &>(from));
}


void DeleteUserRegistryResponse::MergeFrom(const DeleteUserRegistryResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:artifacts.users.v1alpha1.DeleteUserRegistryResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteUserRegistryResponse::CopyFrom(const DeleteUserRegistryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:artifacts.users.v1alpha1.DeleteUserRegistryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteUserRegistryResponse::IsInitialized() const {
  return true;
}

void DeleteUserRegistryResponse::InternalSwap(DeleteUserRegistryResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteUserRegistryResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto_getter, &descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto_once,
      file_level_metadata_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace users
}  // namespace artifacts
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::artifacts::users::v1alpha1::CreateUserRegistryRequest* Arena::CreateMaybeMessage< ::artifacts::users::v1alpha1::CreateUserRegistryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::users::v1alpha1::CreateUserRegistryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::artifacts::users::v1alpha1::CreateUserRegistryResponse* Arena::CreateMaybeMessage< ::artifacts::users::v1alpha1::CreateUserRegistryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::users::v1alpha1::CreateUserRegistryResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::artifacts::users::v1alpha1::DeleteUserRegistryRequest* Arena::CreateMaybeMessage< ::artifacts::users::v1alpha1::DeleteUserRegistryRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::users::v1alpha1::DeleteUserRegistryRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::artifacts::users::v1alpha1::DeleteUserRegistryResponse* Arena::CreateMaybeMessage< ::artifacts::users::v1alpha1::DeleteUserRegistryResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::artifacts::users::v1alpha1::DeleteUserRegistryResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
