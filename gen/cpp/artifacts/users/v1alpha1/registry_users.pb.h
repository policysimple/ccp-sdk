// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: artifacts/users/v1alpha1/registry_users.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto;
namespace artifacts {
namespace users {
namespace v1alpha1 {
class AccessHarbor;
struct AccessHarborDefaultTypeInternal;
extern AccessHarborDefaultTypeInternal _AccessHarbor_default_instance_;
class Harbor;
struct HarborDefaultTypeInternal;
extern HarborDefaultTypeInternal _Harbor_default_instance_;
class PermissionsHarbor;
struct PermissionsHarborDefaultTypeInternal;
extern PermissionsHarborDefaultTypeInternal _PermissionsHarbor_default_instance_;
class UsersRegistry;
struct UsersRegistryDefaultTypeInternal;
extern UsersRegistryDefaultTypeInternal _UsersRegistry_default_instance_;
}  // namespace v1alpha1
}  // namespace users
}  // namespace artifacts
PROTOBUF_NAMESPACE_OPEN
template<> ::artifacts::users::v1alpha1::AccessHarbor* Arena::CreateMaybeMessage<::artifacts::users::v1alpha1::AccessHarbor>(Arena*);
template<> ::artifacts::users::v1alpha1::Harbor* Arena::CreateMaybeMessage<::artifacts::users::v1alpha1::Harbor>(Arena*);
template<> ::artifacts::users::v1alpha1::PermissionsHarbor* Arena::CreateMaybeMessage<::artifacts::users::v1alpha1::PermissionsHarbor>(Arena*);
template<> ::artifacts::users::v1alpha1::UsersRegistry* Arena::CreateMaybeMessage<::artifacts::users::v1alpha1::UsersRegistry>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace artifacts {
namespace users {
namespace v1alpha1 {

// ===================================================================

class AccessHarbor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artifacts.users.v1alpha1.AccessHarbor) */ {
 public:
  inline AccessHarbor() : AccessHarbor(nullptr) {}
  ~AccessHarbor() override;
  explicit constexpr AccessHarbor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AccessHarbor(const AccessHarbor& from);
  AccessHarbor(AccessHarbor&& from) noexcept
    : AccessHarbor() {
    *this = ::std::move(from);
  }

  inline AccessHarbor& operator=(const AccessHarbor& from) {
    CopyFrom(from);
    return *this;
  }
  inline AccessHarbor& operator=(AccessHarbor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AccessHarbor& default_instance() {
    return *internal_default_instance();
  }
  static inline const AccessHarbor* internal_default_instance() {
    return reinterpret_cast<const AccessHarbor*>(
               &_AccessHarbor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AccessHarbor& a, AccessHarbor& b) {
    a.Swap(&b);
  }
  inline void Swap(AccessHarbor* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AccessHarbor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AccessHarbor* New() const final {
    return new AccessHarbor();
  }

  AccessHarbor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AccessHarbor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AccessHarbor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AccessHarbor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AccessHarbor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artifacts.users.v1alpha1.AccessHarbor";
  }
  protected:
  explicit AccessHarbor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 1,
    kResourceFieldNumber = 2,
    kEffectFieldNumber = 3,
  };
  // string action = 1 [json_name = "action"];
  void clear_action();
  const std::string& action() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_action(ArgT0&& arg0, ArgT... args);
  std::string* mutable_action();
  PROTOBUF_MUST_USE_RESULT std::string* release_action();
  void set_allocated_action(std::string* action);
  private:
  const std::string& _internal_action() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_action(const std::string& value);
  std::string* _internal_mutable_action();
  public:

  // string resource = 2 [json_name = "resource"];
  void clear_resource();
  const std::string& resource() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource();
  PROTOBUF_MUST_USE_RESULT std::string* release_resource();
  void set_allocated_resource(std::string* resource);
  private:
  const std::string& _internal_resource() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource(const std::string& value);
  std::string* _internal_mutable_resource();
  public:

  // string effect = 3 [json_name = "effect"];
  void clear_effect();
  const std::string& effect() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_effect(ArgT0&& arg0, ArgT... args);
  std::string* mutable_effect();
  PROTOBUF_MUST_USE_RESULT std::string* release_effect();
  void set_allocated_effect(std::string* effect);
  private:
  const std::string& _internal_effect() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_effect(const std::string& value);
  std::string* _internal_mutable_effect();
  public:

  // @@protoc_insertion_point(class_scope:artifacts.users.v1alpha1.AccessHarbor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr action_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto;
};
// -------------------------------------------------------------------

class PermissionsHarbor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artifacts.users.v1alpha1.PermissionsHarbor) */ {
 public:
  inline PermissionsHarbor() : PermissionsHarbor(nullptr) {}
  ~PermissionsHarbor() override;
  explicit constexpr PermissionsHarbor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PermissionsHarbor(const PermissionsHarbor& from);
  PermissionsHarbor(PermissionsHarbor&& from) noexcept
    : PermissionsHarbor() {
    *this = ::std::move(from);
  }

  inline PermissionsHarbor& operator=(const PermissionsHarbor& from) {
    CopyFrom(from);
    return *this;
  }
  inline PermissionsHarbor& operator=(PermissionsHarbor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PermissionsHarbor& default_instance() {
    return *internal_default_instance();
  }
  static inline const PermissionsHarbor* internal_default_instance() {
    return reinterpret_cast<const PermissionsHarbor*>(
               &_PermissionsHarbor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(PermissionsHarbor& a, PermissionsHarbor& b) {
    a.Swap(&b);
  }
  inline void Swap(PermissionsHarbor* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PermissionsHarbor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PermissionsHarbor* New() const final {
    return new PermissionsHarbor();
  }

  PermissionsHarbor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PermissionsHarbor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PermissionsHarbor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PermissionsHarbor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PermissionsHarbor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artifacts.users.v1alpha1.PermissionsHarbor";
  }
  protected:
  explicit PermissionsHarbor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccessFieldNumber = 1,
    kKindFieldNumber = 2,
    kNamespaceFieldNumber = 3,
  };
  // repeated .artifacts.users.v1alpha1.AccessHarbor access = 1 [json_name = "access"];
  int access_size() const;
  private:
  int _internal_access_size() const;
  public:
  void clear_access();
  ::artifacts::users::v1alpha1::AccessHarbor* mutable_access(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artifacts::users::v1alpha1::AccessHarbor >*
      mutable_access();
  private:
  const ::artifacts::users::v1alpha1::AccessHarbor& _internal_access(int index) const;
  ::artifacts::users::v1alpha1::AccessHarbor* _internal_add_access();
  public:
  const ::artifacts::users::v1alpha1::AccessHarbor& access(int index) const;
  ::artifacts::users::v1alpha1::AccessHarbor* add_access();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artifacts::users::v1alpha1::AccessHarbor >&
      access() const;

  // string kind = 2 [json_name = "kind"];
  void clear_kind();
  const std::string& kind() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_kind(ArgT0&& arg0, ArgT... args);
  std::string* mutable_kind();
  PROTOBUF_MUST_USE_RESULT std::string* release_kind();
  void set_allocated_kind(std::string* kind);
  private:
  const std::string& _internal_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_kind(const std::string& value);
  std::string* _internal_mutable_kind();
  public:

  // string namespace = 3 [json_name = "namespace"];
  void clear_namespace_();
  const std::string& namespace_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_namespace_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_namespace_();
  PROTOBUF_MUST_USE_RESULT std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // @@protoc_insertion_point(class_scope:artifacts.users.v1alpha1.PermissionsHarbor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artifacts::users::v1alpha1::AccessHarbor > access_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr kind_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto;
};
// -------------------------------------------------------------------

class Harbor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artifacts.users.v1alpha1.Harbor) */ {
 public:
  inline Harbor() : Harbor(nullptr) {}
  ~Harbor() override;
  explicit constexpr Harbor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Harbor(const Harbor& from);
  Harbor(Harbor&& from) noexcept
    : Harbor() {
    *this = ::std::move(from);
  }

  inline Harbor& operator=(const Harbor& from) {
    CopyFrom(from);
    return *this;
  }
  inline Harbor& operator=(Harbor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Harbor& default_instance() {
    return *internal_default_instance();
  }
  static inline const Harbor* internal_default_instance() {
    return reinterpret_cast<const Harbor*>(
               &_Harbor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Harbor& a, Harbor& b) {
    a.Swap(&b);
  }
  inline void Swap(Harbor* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Harbor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Harbor* New() const final {
    return new Harbor();
  }

  Harbor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Harbor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Harbor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Harbor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Harbor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artifacts.users.v1alpha1.Harbor";
  }
  protected:
  explicit Harbor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPermissionsHarborFieldNumber = 7,
    kSecretFieldNumber = 1,
    kNameFieldNumber = 3,
    kLevelFieldNumber = 4,
    kDescriptionFieldNumber = 6,
    kDisableFieldNumber = 2,
    kDurationFieldNumber = 5,
  };
  // repeated .artifacts.users.v1alpha1.PermissionsHarbor permissions_harbor = 7 [json_name = "permissionsHarbor"];
  int permissions_harbor_size() const;
  private:
  int _internal_permissions_harbor_size() const;
  public:
  void clear_permissions_harbor();
  ::artifacts::users::v1alpha1::PermissionsHarbor* mutable_permissions_harbor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artifacts::users::v1alpha1::PermissionsHarbor >*
      mutable_permissions_harbor();
  private:
  const ::artifacts::users::v1alpha1::PermissionsHarbor& _internal_permissions_harbor(int index) const;
  ::artifacts::users::v1alpha1::PermissionsHarbor* _internal_add_permissions_harbor();
  public:
  const ::artifacts::users::v1alpha1::PermissionsHarbor& permissions_harbor(int index) const;
  ::artifacts::users::v1alpha1::PermissionsHarbor* add_permissions_harbor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artifacts::users::v1alpha1::PermissionsHarbor >&
      permissions_harbor() const;

  // string secret = 1 [json_name = "secret"];
  void clear_secret();
  const std::string& secret() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_secret(ArgT0&& arg0, ArgT... args);
  std::string* mutable_secret();
  PROTOBUF_MUST_USE_RESULT std::string* release_secret();
  void set_allocated_secret(std::string* secret);
  private:
  const std::string& _internal_secret() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_secret(const std::string& value);
  std::string* _internal_mutable_secret();
  public:

  // string name = 3 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string level = 4 [json_name = "level"];
  void clear_level();
  const std::string& level() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_level(ArgT0&& arg0, ArgT... args);
  std::string* mutable_level();
  PROTOBUF_MUST_USE_RESULT std::string* release_level();
  void set_allocated_level(std::string* level);
  private:
  const std::string& _internal_level() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_level(const std::string& value);
  std::string* _internal_mutable_level();
  public:

  // string description = 6 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bool disable = 2 [json_name = "disable"];
  void clear_disable();
  bool disable() const;
  void set_disable(bool value);
  private:
  bool _internal_disable() const;
  void _internal_set_disable(bool value);
  public:

  // uint32 duration = 5 [json_name = "duration"];
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_duration() const;
  void _internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:artifacts.users.v1alpha1.Harbor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artifacts::users::v1alpha1::PermissionsHarbor > permissions_harbor_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr secret_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr level_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  bool disable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto;
};
// -------------------------------------------------------------------

class UsersRegistry final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:artifacts.users.v1alpha1.UsersRegistry) */ {
 public:
  inline UsersRegistry() : UsersRegistry(nullptr) {}
  ~UsersRegistry() override;
  explicit constexpr UsersRegistry(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UsersRegistry(const UsersRegistry& from);
  UsersRegistry(UsersRegistry&& from) noexcept
    : UsersRegistry() {
    *this = ::std::move(from);
  }

  inline UsersRegistry& operator=(const UsersRegistry& from) {
    CopyFrom(from);
    return *this;
  }
  inline UsersRegistry& operator=(UsersRegistry&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UsersRegistry& default_instance() {
    return *internal_default_instance();
  }
  static inline const UsersRegistry* internal_default_instance() {
    return reinterpret_cast<const UsersRegistry*>(
               &_UsersRegistry_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UsersRegistry& a, UsersRegistry& b) {
    a.Swap(&b);
  }
  inline void Swap(UsersRegistry* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UsersRegistry* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UsersRegistry* New() const final {
    return new UsersRegistry();
  }

  UsersRegistry* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UsersRegistry>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UsersRegistry& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UsersRegistry& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsersRegistry* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "artifacts.users.v1alpha1.UsersRegistry";
  }
  protected:
  explicit UsersRegistry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kOrganizationIdFieldNumber = 2,
    kProjectIdFieldNumber = 3,
    kEnvironmentIdFieldNumber = 4,
    kEnvironmentInternalNameFieldNumber = 5,
    kHarborFieldNumber = 7,
    kActiveFieldNumber = 6,
  };
  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string organization_id = 2 [json_name = "organizationId"];
  void clear_organization_id();
  const std::string& organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_organization_id();
  void set_allocated_organization_id(std::string* organization_id);
  private:
  const std::string& _internal_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_id(const std::string& value);
  std::string* _internal_mutable_organization_id();
  public:

  // string project_id = 3 [json_name = "projectId"];
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // string environment_id = 4 [json_name = "environmentId"];
  void clear_environment_id();
  const std::string& environment_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_environment_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_environment_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_environment_id();
  void set_allocated_environment_id(std::string* environment_id);
  private:
  const std::string& _internal_environment_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_environment_id(const std::string& value);
  std::string* _internal_mutable_environment_id();
  public:

  // string environment_internal_name = 5 [json_name = "environmentInternalName"];
  void clear_environment_internal_name();
  const std::string& environment_internal_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_environment_internal_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_environment_internal_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_environment_internal_name();
  void set_allocated_environment_internal_name(std::string* environment_internal_name);
  private:
  const std::string& _internal_environment_internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_environment_internal_name(const std::string& value);
  std::string* _internal_mutable_environment_internal_name();
  public:

  // .artifacts.users.v1alpha1.Harbor harbor = 7 [json_name = "harbor"];
  bool has_harbor() const;
  private:
  bool _internal_has_harbor() const;
  public:
  void clear_harbor();
  const ::artifacts::users::v1alpha1::Harbor& harbor() const;
  PROTOBUF_MUST_USE_RESULT ::artifacts::users::v1alpha1::Harbor* release_harbor();
  ::artifacts::users::v1alpha1::Harbor* mutable_harbor();
  void set_allocated_harbor(::artifacts::users::v1alpha1::Harbor* harbor);
  private:
  const ::artifacts::users::v1alpha1::Harbor& _internal_harbor() const;
  ::artifacts::users::v1alpha1::Harbor* _internal_mutable_harbor();
  public:
  void unsafe_arena_set_allocated_harbor(
      ::artifacts::users::v1alpha1::Harbor* harbor);
  ::artifacts::users::v1alpha1::Harbor* unsafe_arena_release_harbor();

  // bool active = 6 [json_name = "active"];
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:artifacts.users.v1alpha1.UsersRegistry)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr environment_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr environment_internal_name_;
  ::artifacts::users::v1alpha1::Harbor* harbor_;
  bool active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AccessHarbor

// string action = 1 [json_name = "action"];
inline void AccessHarbor::clear_action() {
  action_.ClearToEmpty();
}
inline const std::string& AccessHarbor::action() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.AccessHarbor.action)
  return _internal_action();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccessHarbor::set_action(ArgT0&& arg0, ArgT... args) {
 
 action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.users.v1alpha1.AccessHarbor.action)
}
inline std::string* AccessHarbor::mutable_action() {
  std::string* _s = _internal_mutable_action();
  // @@protoc_insertion_point(field_mutable:artifacts.users.v1alpha1.AccessHarbor.action)
  return _s;
}
inline const std::string& AccessHarbor::_internal_action() const {
  return action_.Get();
}
inline void AccessHarbor::_internal_set_action(const std::string& value) {
  
  action_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccessHarbor::_internal_mutable_action() {
  
  return action_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccessHarbor::release_action() {
  // @@protoc_insertion_point(field_release:artifacts.users.v1alpha1.AccessHarbor.action)
  return action_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccessHarbor::set_allocated_action(std::string* action) {
  if (action != nullptr) {
    
  } else {
    
  }
  action_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), action,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.users.v1alpha1.AccessHarbor.action)
}

// string resource = 2 [json_name = "resource"];
inline void AccessHarbor::clear_resource() {
  resource_.ClearToEmpty();
}
inline const std::string& AccessHarbor::resource() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.AccessHarbor.resource)
  return _internal_resource();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccessHarbor::set_resource(ArgT0&& arg0, ArgT... args) {
 
 resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.users.v1alpha1.AccessHarbor.resource)
}
inline std::string* AccessHarbor::mutable_resource() {
  std::string* _s = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:artifacts.users.v1alpha1.AccessHarbor.resource)
  return _s;
}
inline const std::string& AccessHarbor::_internal_resource() const {
  return resource_.Get();
}
inline void AccessHarbor::_internal_set_resource(const std::string& value) {
  
  resource_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccessHarbor::_internal_mutable_resource() {
  
  return resource_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccessHarbor::release_resource() {
  // @@protoc_insertion_point(field_release:artifacts.users.v1alpha1.AccessHarbor.resource)
  return resource_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccessHarbor::set_allocated_resource(std::string* resource) {
  if (resource != nullptr) {
    
  } else {
    
  }
  resource_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.users.v1alpha1.AccessHarbor.resource)
}

// string effect = 3 [json_name = "effect"];
inline void AccessHarbor::clear_effect() {
  effect_.ClearToEmpty();
}
inline const std::string& AccessHarbor::effect() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.AccessHarbor.effect)
  return _internal_effect();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AccessHarbor::set_effect(ArgT0&& arg0, ArgT... args) {
 
 effect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.users.v1alpha1.AccessHarbor.effect)
}
inline std::string* AccessHarbor::mutable_effect() {
  std::string* _s = _internal_mutable_effect();
  // @@protoc_insertion_point(field_mutable:artifacts.users.v1alpha1.AccessHarbor.effect)
  return _s;
}
inline const std::string& AccessHarbor::_internal_effect() const {
  return effect_.Get();
}
inline void AccessHarbor::_internal_set_effect(const std::string& value) {
  
  effect_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AccessHarbor::_internal_mutable_effect() {
  
  return effect_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AccessHarbor::release_effect() {
  // @@protoc_insertion_point(field_release:artifacts.users.v1alpha1.AccessHarbor.effect)
  return effect_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AccessHarbor::set_allocated_effect(std::string* effect) {
  if (effect != nullptr) {
    
  } else {
    
  }
  effect_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), effect,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.users.v1alpha1.AccessHarbor.effect)
}

// -------------------------------------------------------------------

// PermissionsHarbor

// repeated .artifacts.users.v1alpha1.AccessHarbor access = 1 [json_name = "access"];
inline int PermissionsHarbor::_internal_access_size() const {
  return access_.size();
}
inline int PermissionsHarbor::access_size() const {
  return _internal_access_size();
}
inline void PermissionsHarbor::clear_access() {
  access_.Clear();
}
inline ::artifacts::users::v1alpha1::AccessHarbor* PermissionsHarbor::mutable_access(int index) {
  // @@protoc_insertion_point(field_mutable:artifacts.users.v1alpha1.PermissionsHarbor.access)
  return access_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artifacts::users::v1alpha1::AccessHarbor >*
PermissionsHarbor::mutable_access() {
  // @@protoc_insertion_point(field_mutable_list:artifacts.users.v1alpha1.PermissionsHarbor.access)
  return &access_;
}
inline const ::artifacts::users::v1alpha1::AccessHarbor& PermissionsHarbor::_internal_access(int index) const {
  return access_.Get(index);
}
inline const ::artifacts::users::v1alpha1::AccessHarbor& PermissionsHarbor::access(int index) const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.PermissionsHarbor.access)
  return _internal_access(index);
}
inline ::artifacts::users::v1alpha1::AccessHarbor* PermissionsHarbor::_internal_add_access() {
  return access_.Add();
}
inline ::artifacts::users::v1alpha1::AccessHarbor* PermissionsHarbor::add_access() {
  ::artifacts::users::v1alpha1::AccessHarbor* _add = _internal_add_access();
  // @@protoc_insertion_point(field_add:artifacts.users.v1alpha1.PermissionsHarbor.access)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artifacts::users::v1alpha1::AccessHarbor >&
PermissionsHarbor::access() const {
  // @@protoc_insertion_point(field_list:artifacts.users.v1alpha1.PermissionsHarbor.access)
  return access_;
}

// string kind = 2 [json_name = "kind"];
inline void PermissionsHarbor::clear_kind() {
  kind_.ClearToEmpty();
}
inline const std::string& PermissionsHarbor::kind() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.PermissionsHarbor.kind)
  return _internal_kind();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PermissionsHarbor::set_kind(ArgT0&& arg0, ArgT... args) {
 
 kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.users.v1alpha1.PermissionsHarbor.kind)
}
inline std::string* PermissionsHarbor::mutable_kind() {
  std::string* _s = _internal_mutable_kind();
  // @@protoc_insertion_point(field_mutable:artifacts.users.v1alpha1.PermissionsHarbor.kind)
  return _s;
}
inline const std::string& PermissionsHarbor::_internal_kind() const {
  return kind_.Get();
}
inline void PermissionsHarbor::_internal_set_kind(const std::string& value) {
  
  kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PermissionsHarbor::_internal_mutable_kind() {
  
  return kind_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PermissionsHarbor::release_kind() {
  // @@protoc_insertion_point(field_release:artifacts.users.v1alpha1.PermissionsHarbor.kind)
  return kind_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PermissionsHarbor::set_allocated_kind(std::string* kind) {
  if (kind != nullptr) {
    
  } else {
    
  }
  kind_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), kind,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.users.v1alpha1.PermissionsHarbor.kind)
}

// string namespace = 3 [json_name = "namespace"];
inline void PermissionsHarbor::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& PermissionsHarbor::namespace_() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.PermissionsHarbor.namespace)
  return _internal_namespace_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PermissionsHarbor::set_namespace_(ArgT0&& arg0, ArgT... args) {
 
 namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.users.v1alpha1.PermissionsHarbor.namespace)
}
inline std::string* PermissionsHarbor::mutable_namespace_() {
  std::string* _s = _internal_mutable_namespace_();
  // @@protoc_insertion_point(field_mutable:artifacts.users.v1alpha1.PermissionsHarbor.namespace)
  return _s;
}
inline const std::string& PermissionsHarbor::_internal_namespace_() const {
  return namespace__.Get();
}
inline void PermissionsHarbor::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PermissionsHarbor::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PermissionsHarbor::release_namespace_() {
  // @@protoc_insertion_point(field_release:artifacts.users.v1alpha1.PermissionsHarbor.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PermissionsHarbor::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.users.v1alpha1.PermissionsHarbor.namespace)
}

// -------------------------------------------------------------------

// Harbor

// string secret = 1 [json_name = "secret"];
inline void Harbor::clear_secret() {
  secret_.ClearToEmpty();
}
inline const std::string& Harbor::secret() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.Harbor.secret)
  return _internal_secret();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Harbor::set_secret(ArgT0&& arg0, ArgT... args) {
 
 secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.users.v1alpha1.Harbor.secret)
}
inline std::string* Harbor::mutable_secret() {
  std::string* _s = _internal_mutable_secret();
  // @@protoc_insertion_point(field_mutable:artifacts.users.v1alpha1.Harbor.secret)
  return _s;
}
inline const std::string& Harbor::_internal_secret() const {
  return secret_.Get();
}
inline void Harbor::_internal_set_secret(const std::string& value) {
  
  secret_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Harbor::_internal_mutable_secret() {
  
  return secret_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Harbor::release_secret() {
  // @@protoc_insertion_point(field_release:artifacts.users.v1alpha1.Harbor.secret)
  return secret_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Harbor::set_allocated_secret(std::string* secret) {
  if (secret != nullptr) {
    
  } else {
    
  }
  secret_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), secret,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.users.v1alpha1.Harbor.secret)
}

// bool disable = 2 [json_name = "disable"];
inline void Harbor::clear_disable() {
  disable_ = false;
}
inline bool Harbor::_internal_disable() const {
  return disable_;
}
inline bool Harbor::disable() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.Harbor.disable)
  return _internal_disable();
}
inline void Harbor::_internal_set_disable(bool value) {
  
  disable_ = value;
}
inline void Harbor::set_disable(bool value) {
  _internal_set_disable(value);
  // @@protoc_insertion_point(field_set:artifacts.users.v1alpha1.Harbor.disable)
}

// string name = 3 [json_name = "name"];
inline void Harbor::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Harbor::name() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.Harbor.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Harbor::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.users.v1alpha1.Harbor.name)
}
inline std::string* Harbor::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:artifacts.users.v1alpha1.Harbor.name)
  return _s;
}
inline const std::string& Harbor::_internal_name() const {
  return name_.Get();
}
inline void Harbor::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Harbor::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Harbor::release_name() {
  // @@protoc_insertion_point(field_release:artifacts.users.v1alpha1.Harbor.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Harbor::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.users.v1alpha1.Harbor.name)
}

// string level = 4 [json_name = "level"];
inline void Harbor::clear_level() {
  level_.ClearToEmpty();
}
inline const std::string& Harbor::level() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.Harbor.level)
  return _internal_level();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Harbor::set_level(ArgT0&& arg0, ArgT... args) {
 
 level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.users.v1alpha1.Harbor.level)
}
inline std::string* Harbor::mutable_level() {
  std::string* _s = _internal_mutable_level();
  // @@protoc_insertion_point(field_mutable:artifacts.users.v1alpha1.Harbor.level)
  return _s;
}
inline const std::string& Harbor::_internal_level() const {
  return level_.Get();
}
inline void Harbor::_internal_set_level(const std::string& value) {
  
  level_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Harbor::_internal_mutable_level() {
  
  return level_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Harbor::release_level() {
  // @@protoc_insertion_point(field_release:artifacts.users.v1alpha1.Harbor.level)
  return level_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Harbor::set_allocated_level(std::string* level) {
  if (level != nullptr) {
    
  } else {
    
  }
  level_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), level,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.users.v1alpha1.Harbor.level)
}

// uint32 duration = 5 [json_name = "duration"];
inline void Harbor::clear_duration() {
  duration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Harbor::_internal_duration() const {
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Harbor::duration() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.Harbor.duration)
  return _internal_duration();
}
inline void Harbor::_internal_set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  duration_ = value;
}
inline void Harbor::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:artifacts.users.v1alpha1.Harbor.duration)
}

// string description = 6 [json_name = "description"];
inline void Harbor::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Harbor::description() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.Harbor.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Harbor::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.users.v1alpha1.Harbor.description)
}
inline std::string* Harbor::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:artifacts.users.v1alpha1.Harbor.description)
  return _s;
}
inline const std::string& Harbor::_internal_description() const {
  return description_.Get();
}
inline void Harbor::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Harbor::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Harbor::release_description() {
  // @@protoc_insertion_point(field_release:artifacts.users.v1alpha1.Harbor.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Harbor::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.users.v1alpha1.Harbor.description)
}

// repeated .artifacts.users.v1alpha1.PermissionsHarbor permissions_harbor = 7 [json_name = "permissionsHarbor"];
inline int Harbor::_internal_permissions_harbor_size() const {
  return permissions_harbor_.size();
}
inline int Harbor::permissions_harbor_size() const {
  return _internal_permissions_harbor_size();
}
inline void Harbor::clear_permissions_harbor() {
  permissions_harbor_.Clear();
}
inline ::artifacts::users::v1alpha1::PermissionsHarbor* Harbor::mutable_permissions_harbor(int index) {
  // @@protoc_insertion_point(field_mutable:artifacts.users.v1alpha1.Harbor.permissions_harbor)
  return permissions_harbor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artifacts::users::v1alpha1::PermissionsHarbor >*
Harbor::mutable_permissions_harbor() {
  // @@protoc_insertion_point(field_mutable_list:artifacts.users.v1alpha1.Harbor.permissions_harbor)
  return &permissions_harbor_;
}
inline const ::artifacts::users::v1alpha1::PermissionsHarbor& Harbor::_internal_permissions_harbor(int index) const {
  return permissions_harbor_.Get(index);
}
inline const ::artifacts::users::v1alpha1::PermissionsHarbor& Harbor::permissions_harbor(int index) const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.Harbor.permissions_harbor)
  return _internal_permissions_harbor(index);
}
inline ::artifacts::users::v1alpha1::PermissionsHarbor* Harbor::_internal_add_permissions_harbor() {
  return permissions_harbor_.Add();
}
inline ::artifacts::users::v1alpha1::PermissionsHarbor* Harbor::add_permissions_harbor() {
  ::artifacts::users::v1alpha1::PermissionsHarbor* _add = _internal_add_permissions_harbor();
  // @@protoc_insertion_point(field_add:artifacts.users.v1alpha1.Harbor.permissions_harbor)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::artifacts::users::v1alpha1::PermissionsHarbor >&
Harbor::permissions_harbor() const {
  // @@protoc_insertion_point(field_list:artifacts.users.v1alpha1.Harbor.permissions_harbor)
  return permissions_harbor_;
}

// -------------------------------------------------------------------

// UsersRegistry

// string id = 1 [json_name = "id"];
inline void UsersRegistry::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& UsersRegistry::id() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.UsersRegistry.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UsersRegistry::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.users.v1alpha1.UsersRegistry.id)
}
inline std::string* UsersRegistry::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:artifacts.users.v1alpha1.UsersRegistry.id)
  return _s;
}
inline const std::string& UsersRegistry::_internal_id() const {
  return id_.Get();
}
inline void UsersRegistry::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UsersRegistry::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UsersRegistry::release_id() {
  // @@protoc_insertion_point(field_release:artifacts.users.v1alpha1.UsersRegistry.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UsersRegistry::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.users.v1alpha1.UsersRegistry.id)
}

// string organization_id = 2 [json_name = "organizationId"];
inline void UsersRegistry::clear_organization_id() {
  organization_id_.ClearToEmpty();
}
inline const std::string& UsersRegistry::organization_id() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.UsersRegistry.organization_id)
  return _internal_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UsersRegistry::set_organization_id(ArgT0&& arg0, ArgT... args) {
 
 organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.users.v1alpha1.UsersRegistry.organization_id)
}
inline std::string* UsersRegistry::mutable_organization_id() {
  std::string* _s = _internal_mutable_organization_id();
  // @@protoc_insertion_point(field_mutable:artifacts.users.v1alpha1.UsersRegistry.organization_id)
  return _s;
}
inline const std::string& UsersRegistry::_internal_organization_id() const {
  return organization_id_.Get();
}
inline void UsersRegistry::_internal_set_organization_id(const std::string& value) {
  
  organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UsersRegistry::_internal_mutable_organization_id() {
  
  return organization_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UsersRegistry::release_organization_id() {
  // @@protoc_insertion_point(field_release:artifacts.users.v1alpha1.UsersRegistry.organization_id)
  return organization_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UsersRegistry::set_allocated_organization_id(std::string* organization_id) {
  if (organization_id != nullptr) {
    
  } else {
    
  }
  organization_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organization_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.users.v1alpha1.UsersRegistry.organization_id)
}

// string project_id = 3 [json_name = "projectId"];
inline void UsersRegistry::clear_project_id() {
  project_id_.ClearToEmpty();
}
inline const std::string& UsersRegistry::project_id() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.UsersRegistry.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UsersRegistry::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.users.v1alpha1.UsersRegistry.project_id)
}
inline std::string* UsersRegistry::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:artifacts.users.v1alpha1.UsersRegistry.project_id)
  return _s;
}
inline const std::string& UsersRegistry::_internal_project_id() const {
  return project_id_.Get();
}
inline void UsersRegistry::_internal_set_project_id(const std::string& value) {
  
  project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UsersRegistry::_internal_mutable_project_id() {
  
  return project_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UsersRegistry::release_project_id() {
  // @@protoc_insertion_point(field_release:artifacts.users.v1alpha1.UsersRegistry.project_id)
  return project_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UsersRegistry::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.users.v1alpha1.UsersRegistry.project_id)
}

// string environment_id = 4 [json_name = "environmentId"];
inline void UsersRegistry::clear_environment_id() {
  environment_id_.ClearToEmpty();
}
inline const std::string& UsersRegistry::environment_id() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.UsersRegistry.environment_id)
  return _internal_environment_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UsersRegistry::set_environment_id(ArgT0&& arg0, ArgT... args) {
 
 environment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.users.v1alpha1.UsersRegistry.environment_id)
}
inline std::string* UsersRegistry::mutable_environment_id() {
  std::string* _s = _internal_mutable_environment_id();
  // @@protoc_insertion_point(field_mutable:artifacts.users.v1alpha1.UsersRegistry.environment_id)
  return _s;
}
inline const std::string& UsersRegistry::_internal_environment_id() const {
  return environment_id_.Get();
}
inline void UsersRegistry::_internal_set_environment_id(const std::string& value) {
  
  environment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UsersRegistry::_internal_mutable_environment_id() {
  
  return environment_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UsersRegistry::release_environment_id() {
  // @@protoc_insertion_point(field_release:artifacts.users.v1alpha1.UsersRegistry.environment_id)
  return environment_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UsersRegistry::set_allocated_environment_id(std::string* environment_id) {
  if (environment_id != nullptr) {
    
  } else {
    
  }
  environment_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), environment_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.users.v1alpha1.UsersRegistry.environment_id)
}

// string environment_internal_name = 5 [json_name = "environmentInternalName"];
inline void UsersRegistry::clear_environment_internal_name() {
  environment_internal_name_.ClearToEmpty();
}
inline const std::string& UsersRegistry::environment_internal_name() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.UsersRegistry.environment_internal_name)
  return _internal_environment_internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UsersRegistry::set_environment_internal_name(ArgT0&& arg0, ArgT... args) {
 
 environment_internal_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:artifacts.users.v1alpha1.UsersRegistry.environment_internal_name)
}
inline std::string* UsersRegistry::mutable_environment_internal_name() {
  std::string* _s = _internal_mutable_environment_internal_name();
  // @@protoc_insertion_point(field_mutable:artifacts.users.v1alpha1.UsersRegistry.environment_internal_name)
  return _s;
}
inline const std::string& UsersRegistry::_internal_environment_internal_name() const {
  return environment_internal_name_.Get();
}
inline void UsersRegistry::_internal_set_environment_internal_name(const std::string& value) {
  
  environment_internal_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UsersRegistry::_internal_mutable_environment_internal_name() {
  
  return environment_internal_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UsersRegistry::release_environment_internal_name() {
  // @@protoc_insertion_point(field_release:artifacts.users.v1alpha1.UsersRegistry.environment_internal_name)
  return environment_internal_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UsersRegistry::set_allocated_environment_internal_name(std::string* environment_internal_name) {
  if (environment_internal_name != nullptr) {
    
  } else {
    
  }
  environment_internal_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), environment_internal_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:artifacts.users.v1alpha1.UsersRegistry.environment_internal_name)
}

// bool active = 6 [json_name = "active"];
inline void UsersRegistry::clear_active() {
  active_ = false;
}
inline bool UsersRegistry::_internal_active() const {
  return active_;
}
inline bool UsersRegistry::active() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.UsersRegistry.active)
  return _internal_active();
}
inline void UsersRegistry::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void UsersRegistry::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:artifacts.users.v1alpha1.UsersRegistry.active)
}

// .artifacts.users.v1alpha1.Harbor harbor = 7 [json_name = "harbor"];
inline bool UsersRegistry::_internal_has_harbor() const {
  return this != internal_default_instance() && harbor_ != nullptr;
}
inline bool UsersRegistry::has_harbor() const {
  return _internal_has_harbor();
}
inline void UsersRegistry::clear_harbor() {
  if (GetArenaForAllocation() == nullptr && harbor_ != nullptr) {
    delete harbor_;
  }
  harbor_ = nullptr;
}
inline const ::artifacts::users::v1alpha1::Harbor& UsersRegistry::_internal_harbor() const {
  const ::artifacts::users::v1alpha1::Harbor* p = harbor_;
  return p != nullptr ? *p : reinterpret_cast<const ::artifacts::users::v1alpha1::Harbor&>(
      ::artifacts::users::v1alpha1::_Harbor_default_instance_);
}
inline const ::artifacts::users::v1alpha1::Harbor& UsersRegistry::harbor() const {
  // @@protoc_insertion_point(field_get:artifacts.users.v1alpha1.UsersRegistry.harbor)
  return _internal_harbor();
}
inline void UsersRegistry::unsafe_arena_set_allocated_harbor(
    ::artifacts::users::v1alpha1::Harbor* harbor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(harbor_);
  }
  harbor_ = harbor;
  if (harbor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:artifacts.users.v1alpha1.UsersRegistry.harbor)
}
inline ::artifacts::users::v1alpha1::Harbor* UsersRegistry::release_harbor() {
  
  ::artifacts::users::v1alpha1::Harbor* temp = harbor_;
  harbor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::artifacts::users::v1alpha1::Harbor* UsersRegistry::unsafe_arena_release_harbor() {
  // @@protoc_insertion_point(field_release:artifacts.users.v1alpha1.UsersRegistry.harbor)
  
  ::artifacts::users::v1alpha1::Harbor* temp = harbor_;
  harbor_ = nullptr;
  return temp;
}
inline ::artifacts::users::v1alpha1::Harbor* UsersRegistry::_internal_mutable_harbor() {
  
  if (harbor_ == nullptr) {
    auto* p = CreateMaybeMessage<::artifacts::users::v1alpha1::Harbor>(GetArenaForAllocation());
    harbor_ = p;
  }
  return harbor_;
}
inline ::artifacts::users::v1alpha1::Harbor* UsersRegistry::mutable_harbor() {
  ::artifacts::users::v1alpha1::Harbor* _msg = _internal_mutable_harbor();
  // @@protoc_insertion_point(field_mutable:artifacts.users.v1alpha1.UsersRegistry.harbor)
  return _msg;
}
inline void UsersRegistry::set_allocated_harbor(::artifacts::users::v1alpha1::Harbor* harbor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete harbor_;
  }
  if (harbor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::artifacts::users::v1alpha1::Harbor>::GetOwningArena(harbor);
    if (message_arena != submessage_arena) {
      harbor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, harbor, submessage_arena);
    }
    
  } else {
    
  }
  harbor_ = harbor;
  // @@protoc_insertion_point(field_set_allocated:artifacts.users.v1alpha1.UsersRegistry.harbor)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace users
}  // namespace artifacts

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_2eproto
