// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: artifacts/users/v1alpha1/registry_users_api.proto
#ifndef GRPC_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto__INCLUDED
#define GRPC_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto__INCLUDED

#include "artifacts/users/v1alpha1/registry_users_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace artifacts {
namespace users {
namespace v1alpha1 {

class RegistryUsersAPIService final {
 public:
  static constexpr char const* service_full_name() {
    return "artifacts.users.v1alpha1.RegistryUsersAPIService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateUserRegistry(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest& request, ::artifacts::users::v1alpha1::CreateUserRegistryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::users::v1alpha1::CreateUserRegistryResponse>> AsyncCreateUserRegistry(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::users::v1alpha1::CreateUserRegistryResponse>>(AsyncCreateUserRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::users::v1alpha1::CreateUserRegistryResponse>> PrepareAsyncCreateUserRegistry(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::users::v1alpha1::CreateUserRegistryResponse>>(PrepareAsyncCreateUserRegistryRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteUserRegistry(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest& request, ::artifacts::users::v1alpha1::DeleteUserRegistryResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::users::v1alpha1::DeleteUserRegistryResponse>> AsyncDeleteUserRegistry(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::users::v1alpha1::DeleteUserRegistryResponse>>(AsyncDeleteUserRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::users::v1alpha1::DeleteUserRegistryResponse>> PrepareAsyncDeleteUserRegistry(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::users::v1alpha1::DeleteUserRegistryResponse>>(PrepareAsyncDeleteUserRegistryRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreateUserRegistry(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest* request, ::artifacts::users::v1alpha1::CreateUserRegistryResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteUserRegistry(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest* request, ::artifacts::users::v1alpha1::DeleteUserRegistryResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::users::v1alpha1::CreateUserRegistryResponse>* AsyncCreateUserRegistryRaw(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::users::v1alpha1::CreateUserRegistryResponse>* PrepareAsyncCreateUserRegistryRaw(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::users::v1alpha1::DeleteUserRegistryResponse>* AsyncDeleteUserRegistryRaw(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::artifacts::users::v1alpha1::DeleteUserRegistryResponse>* PrepareAsyncDeleteUserRegistryRaw(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateUserRegistry(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest& request, ::artifacts::users::v1alpha1::CreateUserRegistryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::users::v1alpha1::CreateUserRegistryResponse>> AsyncCreateUserRegistry(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::users::v1alpha1::CreateUserRegistryResponse>>(AsyncCreateUserRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::users::v1alpha1::CreateUserRegistryResponse>> PrepareAsyncCreateUserRegistry(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::users::v1alpha1::CreateUserRegistryResponse>>(PrepareAsyncCreateUserRegistryRaw(context, request, cq));
    }
    ::grpc::Status DeleteUserRegistry(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest& request, ::artifacts::users::v1alpha1::DeleteUserRegistryResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::users::v1alpha1::DeleteUserRegistryResponse>> AsyncDeleteUserRegistry(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::users::v1alpha1::DeleteUserRegistryResponse>>(AsyncDeleteUserRegistryRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::users::v1alpha1::DeleteUserRegistryResponse>> PrepareAsyncDeleteUserRegistry(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::artifacts::users::v1alpha1::DeleteUserRegistryResponse>>(PrepareAsyncDeleteUserRegistryRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateUserRegistry(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest* request, ::artifacts::users::v1alpha1::CreateUserRegistryResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteUserRegistry(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest* request, ::artifacts::users::v1alpha1::DeleteUserRegistryResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::artifacts::users::v1alpha1::CreateUserRegistryResponse>* AsyncCreateUserRegistryRaw(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::artifacts::users::v1alpha1::CreateUserRegistryResponse>* PrepareAsyncCreateUserRegistryRaw(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::artifacts::users::v1alpha1::DeleteUserRegistryResponse>* AsyncDeleteUserRegistryRaw(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::artifacts::users::v1alpha1::DeleteUserRegistryResponse>* PrepareAsyncDeleteUserRegistryRaw(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateUserRegistry_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteUserRegistry_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateUserRegistry(::grpc::ServerContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest* request, ::artifacts::users::v1alpha1::CreateUserRegistryResponse* response);
    virtual ::grpc::Status DeleteUserRegistry(::grpc::ServerContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest* request, ::artifacts::users::v1alpha1::DeleteUserRegistryResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateUserRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateUserRegistry() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateUserRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUserRegistry(::grpc::ServerContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest* request, ::artifacts::users::v1alpha1::CreateUserRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateUserRegistry(::grpc::ServerContext* context, ::artifacts::users::v1alpha1::CreateUserRegistryRequest* request, ::grpc::ServerAsyncResponseWriter< ::artifacts::users::v1alpha1::CreateUserRegistryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteUserRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteUserRegistry() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_DeleteUserRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUserRegistry(::grpc::ServerContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest* request, ::artifacts::users::v1alpha1::DeleteUserRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteUserRegistry(::grpc::ServerContext* context, ::artifacts::users::v1alpha1::DeleteUserRegistryRequest* request, ::grpc::ServerAsyncResponseWriter< ::artifacts::users::v1alpha1::DeleteUserRegistryResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateUserRegistry<WithAsyncMethod_DeleteUserRegistry<Service > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateUserRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateUserRegistry() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateUserRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUserRegistry(::grpc::ServerContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest* request, ::artifacts::users::v1alpha1::CreateUserRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteUserRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteUserRegistry() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_DeleteUserRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUserRegistry(::grpc::ServerContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest* request, ::artifacts::users::v1alpha1::DeleteUserRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateUserRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateUserRegistry() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateUserRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateUserRegistry(::grpc::ServerContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest* request, ::artifacts::users::v1alpha1::CreateUserRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateUserRegistry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteUserRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteUserRegistry() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_DeleteUserRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteUserRegistry(::grpc::ServerContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest* request, ::artifacts::users::v1alpha1::DeleteUserRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteUserRegistry(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateUserRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateUserRegistry() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::artifacts::users::v1alpha1::CreateUserRegistryRequest, ::artifacts::users::v1alpha1::CreateUserRegistryResponse>(std::bind(&WithStreamedUnaryMethod_CreateUserRegistry<BaseClass>::StreamedCreateUserRegistry, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateUserRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateUserRegistry(::grpc::ServerContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest* request, ::artifacts::users::v1alpha1::CreateUserRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateUserRegistry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::artifacts::users::v1alpha1::CreateUserRegistryRequest,::artifacts::users::v1alpha1::CreateUserRegistryResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteUserRegistry : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteUserRegistry() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::artifacts::users::v1alpha1::DeleteUserRegistryRequest, ::artifacts::users::v1alpha1::DeleteUserRegistryResponse>(std::bind(&WithStreamedUnaryMethod_DeleteUserRegistry<BaseClass>::StreamedDeleteUserRegistry, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteUserRegistry() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteUserRegistry(::grpc::ServerContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest* request, ::artifacts::users::v1alpha1::DeleteUserRegistryResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteUserRegistry(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::artifacts::users::v1alpha1::DeleteUserRegistryRequest,::artifacts::users::v1alpha1::DeleteUserRegistryResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateUserRegistry<WithStreamedUnaryMethod_DeleteUserRegistry<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateUserRegistry<WithStreamedUnaryMethod_DeleteUserRegistry<Service > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace users
}  // namespace artifacts


#endif  // GRPC_artifacts_2fusers_2fv1alpha1_2fregistry_5fusers_5fapi_2eproto__INCLUDED
