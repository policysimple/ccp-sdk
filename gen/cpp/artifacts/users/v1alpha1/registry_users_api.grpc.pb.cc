// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: artifacts/users/v1alpha1/registry_users_api.proto

#include "artifacts/users/v1alpha1/registry_users_api.pb.h"
#include "artifacts/users/v1alpha1/registry_users_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace artifacts {
namespace users {
namespace v1alpha1 {

static const char* RegistryUsersAPIService_method_names[] = {
  "/artifacts.users.v1alpha1.RegistryUsersAPIService/CreateUserRegistry",
  "/artifacts.users.v1alpha1.RegistryUsersAPIService/DeleteUserRegistry",
};

std::unique_ptr< RegistryUsersAPIService::Stub> RegistryUsersAPIService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RegistryUsersAPIService::Stub> stub(new RegistryUsersAPIService::Stub(channel));
  return stub;
}

RegistryUsersAPIService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateUserRegistry_(RegistryUsersAPIService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteUserRegistry_(RegistryUsersAPIService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RegistryUsersAPIService::Stub::CreateUserRegistry(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest& request, ::artifacts::users::v1alpha1::CreateUserRegistryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateUserRegistry_, context, request, response);
}

void RegistryUsersAPIService::Stub::experimental_async::CreateUserRegistry(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest* request, ::artifacts::users::v1alpha1::CreateUserRegistryResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateUserRegistry_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::artifacts::users::v1alpha1::CreateUserRegistryResponse>* RegistryUsersAPIService::Stub::AsyncCreateUserRegistryRaw(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::artifacts::users::v1alpha1::CreateUserRegistryResponse>::Create(channel_.get(), cq, rpcmethod_CreateUserRegistry_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::artifacts::users::v1alpha1::CreateUserRegistryResponse>* RegistryUsersAPIService::Stub::PrepareAsyncCreateUserRegistryRaw(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::artifacts::users::v1alpha1::CreateUserRegistryResponse>::Create(channel_.get(), cq, rpcmethod_CreateUserRegistry_, context, request, false);
}

::grpc::Status RegistryUsersAPIService::Stub::DeleteUserRegistry(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest& request, ::artifacts::users::v1alpha1::DeleteUserRegistryResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteUserRegistry_, context, request, response);
}

void RegistryUsersAPIService::Stub::experimental_async::DeleteUserRegistry(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest* request, ::artifacts::users::v1alpha1::DeleteUserRegistryResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteUserRegistry_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::artifacts::users::v1alpha1::DeleteUserRegistryResponse>* RegistryUsersAPIService::Stub::AsyncDeleteUserRegistryRaw(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::artifacts::users::v1alpha1::DeleteUserRegistryResponse>::Create(channel_.get(), cq, rpcmethod_DeleteUserRegistry_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::artifacts::users::v1alpha1::DeleteUserRegistryResponse>* RegistryUsersAPIService::Stub::PrepareAsyncDeleteUserRegistryRaw(::grpc::ClientContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::artifacts::users::v1alpha1::DeleteUserRegistryResponse>::Create(channel_.get(), cq, rpcmethod_DeleteUserRegistry_, context, request, false);
}

RegistryUsersAPIService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RegistryUsersAPIService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RegistryUsersAPIService::Service, ::artifacts::users::v1alpha1::CreateUserRegistryRequest, ::artifacts::users::v1alpha1::CreateUserRegistryResponse>(
          std::mem_fn(&RegistryUsersAPIService::Service::CreateUserRegistry), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RegistryUsersAPIService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RegistryUsersAPIService::Service, ::artifacts::users::v1alpha1::DeleteUserRegistryRequest, ::artifacts::users::v1alpha1::DeleteUserRegistryResponse>(
          std::mem_fn(&RegistryUsersAPIService::Service::DeleteUserRegistry), this)));
}

RegistryUsersAPIService::Service::~Service() {
}

::grpc::Status RegistryUsersAPIService::Service::CreateUserRegistry(::grpc::ServerContext* context, const ::artifacts::users::v1alpha1::CreateUserRegistryRequest* request, ::artifacts::users::v1alpha1::CreateUserRegistryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RegistryUsersAPIService::Service::DeleteUserRegistry(::grpc::ServerContext* context, const ::artifacts::users::v1alpha1::DeleteUserRegistryRequest* request, ::artifacts::users::v1alpha1::DeleteUserRegistryResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace artifacts
}  // namespace users
}  // namespace v1alpha1

