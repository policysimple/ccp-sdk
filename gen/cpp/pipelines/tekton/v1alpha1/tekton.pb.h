// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipelines/tekton/v1alpha1/tekton.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
namespace pipelines {
namespace tekton {
namespace v1alpha1 {
class Pipeline;
struct PipelineDefaultTypeInternal;
extern PipelineDefaultTypeInternal _Pipeline_default_instance_;
class Task;
struct TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskParams;
struct TaskParamsDefaultTypeInternal;
extern TaskParamsDefaultTypeInternal _TaskParams_default_instance_;
}  // namespace v1alpha1
}  // namespace tekton
}  // namespace pipelines
PROTOBUF_NAMESPACE_OPEN
template<> ::pipelines::tekton::v1alpha1::Pipeline* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::Pipeline>(Arena*);
template<> ::pipelines::tekton::v1alpha1::Task* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::Task>(Arena*);
template<> ::pipelines::tekton::v1alpha1::TaskParams* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::TaskParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pipelines {
namespace tekton {
namespace v1alpha1 {

enum TaskType : int {
  TASK_TYPE_ACCEPTED_TASK_UNSPECIFIED = 0,
  TASK_TYPE_ACCEPTED_CLUSTER_TASK = 1,
  TaskType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TaskType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TaskType_IsValid(int value);
constexpr TaskType TaskType_MIN = TASK_TYPE_ACCEPTED_TASK_UNSPECIFIED;
constexpr TaskType TaskType_MAX = TASK_TYPE_ACCEPTED_CLUSTER_TASK;
constexpr int TaskType_ARRAYSIZE = TaskType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TaskType_descriptor();
template<typename T>
inline const std::string& TaskType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TaskType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TaskType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TaskType_descriptor(), enum_t_value);
}
inline bool TaskType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TaskType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TaskType>(
    TaskType_descriptor(), name, value);
}
// ===================================================================

class TaskParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.TaskParams) */ {
 public:
  inline TaskParams() : TaskParams(nullptr) {}
  ~TaskParams() override;
  explicit constexpr TaskParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskParams(const TaskParams& from);
  TaskParams(TaskParams&& from) noexcept
    : TaskParams() {
    *this = ::std::move(from);
  }

  inline TaskParams& operator=(const TaskParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskParams& operator=(TaskParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskParams* internal_default_instance() {
    return reinterpret_cast<const TaskParams*>(
               &_TaskParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TaskParams& a, TaskParams& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskParams* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskParams* New() const final {
    return new TaskParams();
  }

  TaskParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.TaskParams";
  }
  protected:
  explicit TaskParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value = 2 [json_name = "value"];
  void clear_value();
  const std::string& value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.TaskParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
};
// -------------------------------------------------------------------

class Task final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.Task) */ {
 public:
  inline Task() : Task(nullptr) {}
  ~Task() override;
  explicit constexpr Task(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Task& default_instance() {
    return *internal_default_instance();
  }
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return new Task();
  }

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Task& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Task& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.Task";
  }
  protected:
  explicit Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskParamsFieldNumber = 6,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kTaskRefNameFieldNumber = 3,
    kWorkspaceNameFieldNumber = 4,
    kTaskTypeFieldNumber = 5,
  };
  // repeated .pipelines.tekton.v1alpha1.TaskParams task_params = 6 [json_name = "taskParams"];
  int task_params_size() const;
  private:
  int _internal_task_params_size() const;
  public:
  void clear_task_params();
  ::pipelines::tekton::v1alpha1::TaskParams* mutable_task_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskParams >*
      mutable_task_params();
  private:
  const ::pipelines::tekton::v1alpha1::TaskParams& _internal_task_params(int index) const;
  ::pipelines::tekton::v1alpha1::TaskParams* _internal_add_task_params();
  public:
  const ::pipelines::tekton::v1alpha1::TaskParams& task_params(int index) const;
  ::pipelines::tekton::v1alpha1::TaskParams* add_task_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskParams >&
      task_params() const;

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string task_ref_name = 3 [json_name = "taskRefName"];
  void clear_task_ref_name();
  const std::string& task_ref_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_ref_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_ref_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_task_ref_name();
  void set_allocated_task_ref_name(std::string* task_ref_name);
  private:
  const std::string& _internal_task_ref_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_ref_name(const std::string& value);
  std::string* _internal_mutable_task_ref_name();
  public:

  // string workspace_name = 4 [json_name = "workspaceName"];
  void clear_workspace_name();
  const std::string& workspace_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workspace_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workspace_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_workspace_name();
  void set_allocated_workspace_name(std::string* workspace_name);
  private:
  const std::string& _internal_workspace_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workspace_name(const std::string& value);
  std::string* _internal_mutable_workspace_name();
  public:

  // .pipelines.tekton.v1alpha1.TaskType task_type = 5 [json_name = "taskType"];
  void clear_task_type();
  ::pipelines::tekton::v1alpha1::TaskType task_type() const;
  void set_task_type(::pipelines::tekton::v1alpha1::TaskType value);
  private:
  ::pipelines::tekton::v1alpha1::TaskType _internal_task_type() const;
  void _internal_set_task_type(::pipelines::tekton::v1alpha1::TaskType value);
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.Task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskParams > task_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_ref_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workspace_name_;
  int task_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
};
// -------------------------------------------------------------------

class Pipeline final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.Pipeline) */ {
 public:
  inline Pipeline() : Pipeline(nullptr) {}
  ~Pipeline() override;
  explicit constexpr Pipeline(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pipeline(const Pipeline& from);
  Pipeline(Pipeline&& from) noexcept
    : Pipeline() {
    *this = ::std::move(from);
  }

  inline Pipeline& operator=(const Pipeline& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pipeline& operator=(Pipeline&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pipeline& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pipeline* internal_default_instance() {
    return reinterpret_cast<const Pipeline*>(
               &_Pipeline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Pipeline& a, Pipeline& b) {
    a.Swap(&b);
  }
  inline void Swap(Pipeline* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pipeline* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pipeline* New() const final {
    return new Pipeline();
  }

  Pipeline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pipeline>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pipeline& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pipeline& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pipeline* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.Pipeline";
  }
  protected:
  explicit Pipeline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTasksFieldNumber = 8,
    kIdFieldNumber = 1,
    kNameFieldNumber = 4,
    kWorkspacesFieldNumber = 5,
    kStatusTypeFieldNumber = 7,
    kOrganizationIdFieldNumber = 2,
    kProjectIdFieldNumber = 3,
    kActiveFieldNumber = 6,
  };
  // repeated .pipelines.tekton.v1alpha1.Task tasks = 8 [json_name = "tasks"];
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::pipelines::tekton::v1alpha1::Task* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >*
      mutable_tasks();
  private:
  const ::pipelines::tekton::v1alpha1::Task& _internal_tasks(int index) const;
  ::pipelines::tekton::v1alpha1::Task* _internal_add_tasks();
  public:
  const ::pipelines::tekton::v1alpha1::Task& tasks(int index) const;
  ::pipelines::tekton::v1alpha1::Task* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >&
      tasks() const;

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 4 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string workspaces = 5 [json_name = "workspaces"];
  void clear_workspaces();
  const std::string& workspaces() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workspaces(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workspaces();
  PROTOBUF_MUST_USE_RESULT std::string* release_workspaces();
  void set_allocated_workspaces(std::string* workspaces);
  private:
  const std::string& _internal_workspaces() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workspaces(const std::string& value);
  std::string* _internal_mutable_workspaces();
  public:

  // string status_type = 7 [json_name = "statusType"];
  void clear_status_type();
  const std::string& status_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_status_type();
  void set_allocated_status_type(std::string* status_type);
  private:
  const std::string& _internal_status_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_type(const std::string& value);
  std::string* _internal_mutable_status_type();
  public:

  // uint32 organization_id = 2 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 project_id = 3 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool active = 6 [json_name = "active"];
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.Pipeline)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task > tasks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workspaces_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  bool active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TaskParams

// string name = 1 [json_name = "name"];
inline void TaskParams::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TaskParams::name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskParams.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskParams::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskParams.name)
}
inline std::string* TaskParams::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskParams.name)
  return _s;
}
inline const std::string& TaskParams::_internal_name() const {
  return name_.Get();
}
inline void TaskParams::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskParams::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskParams::release_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskParams.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskParams::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskParams.name)
}

// string value = 2 [json_name = "value"];
inline void TaskParams::clear_value() {
  value_.ClearToEmpty();
}
inline const std::string& TaskParams::value() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskParams.value)
  return _internal_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskParams::set_value(ArgT0&& arg0, ArgT... args) {
 
 value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskParams.value)
}
inline std::string* TaskParams::mutable_value() {
  std::string* _s = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskParams.value)
  return _s;
}
inline const std::string& TaskParams::_internal_value() const {
  return value_.Get();
}
inline void TaskParams::_internal_set_value(const std::string& value) {
  
  value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskParams::_internal_mutable_value() {
  
  return value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskParams::release_value() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskParams.value)
  return value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskParams::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskParams.value)
}

// -------------------------------------------------------------------

// Task

// string id = 1 [json_name = "id"];
inline void Task::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Task::id() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.id)
}
inline std::string* Task::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.id)
  return _s;
}
inline const std::string& Task::_internal_id() const {
  return id_.Get();
}
inline void Task::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Task::release_id() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Task.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Task::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Task.id)
}

// string name = 2 [json_name = "name"];
inline void Task::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Task::name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.name)
}
inline std::string* Task::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.name)
  return _s;
}
inline const std::string& Task::_internal_name() const {
  return name_.Get();
}
inline void Task::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Task::release_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Task.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Task::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Task.name)
}

// string task_ref_name = 3 [json_name = "taskRefName"];
inline void Task::clear_task_ref_name() {
  task_ref_name_.ClearToEmpty();
}
inline const std::string& Task::task_ref_name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.task_ref_name)
  return _internal_task_ref_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_task_ref_name(ArgT0&& arg0, ArgT... args) {
 
 task_ref_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.task_ref_name)
}
inline std::string* Task::mutable_task_ref_name() {
  std::string* _s = _internal_mutable_task_ref_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.task_ref_name)
  return _s;
}
inline const std::string& Task::_internal_task_ref_name() const {
  return task_ref_name_.Get();
}
inline void Task::_internal_set_task_ref_name(const std::string& value) {
  
  task_ref_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_task_ref_name() {
  
  return task_ref_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Task::release_task_ref_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Task.task_ref_name)
  return task_ref_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Task::set_allocated_task_ref_name(std::string* task_ref_name) {
  if (task_ref_name != nullptr) {
    
  } else {
    
  }
  task_ref_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_ref_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Task.task_ref_name)
}

// string workspace_name = 4 [json_name = "workspaceName"];
inline void Task::clear_workspace_name() {
  workspace_name_.ClearToEmpty();
}
inline const std::string& Task::workspace_name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.workspace_name)
  return _internal_workspace_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_workspace_name(ArgT0&& arg0, ArgT... args) {
 
 workspace_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.workspace_name)
}
inline std::string* Task::mutable_workspace_name() {
  std::string* _s = _internal_mutable_workspace_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.workspace_name)
  return _s;
}
inline const std::string& Task::_internal_workspace_name() const {
  return workspace_name_.Get();
}
inline void Task::_internal_set_workspace_name(const std::string& value) {
  
  workspace_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_workspace_name() {
  
  return workspace_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Task::release_workspace_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Task.workspace_name)
  return workspace_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Task::set_allocated_workspace_name(std::string* workspace_name) {
  if (workspace_name != nullptr) {
    
  } else {
    
  }
  workspace_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workspace_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Task.workspace_name)
}

// .pipelines.tekton.v1alpha1.TaskType task_type = 5 [json_name = "taskType"];
inline void Task::clear_task_type() {
  task_type_ = 0;
}
inline ::pipelines::tekton::v1alpha1::TaskType Task::_internal_task_type() const {
  return static_cast< ::pipelines::tekton::v1alpha1::TaskType >(task_type_);
}
inline ::pipelines::tekton::v1alpha1::TaskType Task::task_type() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.task_type)
  return _internal_task_type();
}
inline void Task::_internal_set_task_type(::pipelines::tekton::v1alpha1::TaskType value) {
  
  task_type_ = value;
}
inline void Task::set_task_type(::pipelines::tekton::v1alpha1::TaskType value) {
  _internal_set_task_type(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.task_type)
}

// repeated .pipelines.tekton.v1alpha1.TaskParams task_params = 6 [json_name = "taskParams"];
inline int Task::_internal_task_params_size() const {
  return task_params_.size();
}
inline int Task::task_params_size() const {
  return _internal_task_params_size();
}
inline void Task::clear_task_params() {
  task_params_.Clear();
}
inline ::pipelines::tekton::v1alpha1::TaskParams* Task::mutable_task_params(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.task_params)
  return task_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskParams >*
Task::mutable_task_params() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.Task.task_params)
  return &task_params_;
}
inline const ::pipelines::tekton::v1alpha1::TaskParams& Task::_internal_task_params(int index) const {
  return task_params_.Get(index);
}
inline const ::pipelines::tekton::v1alpha1::TaskParams& Task::task_params(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.task_params)
  return _internal_task_params(index);
}
inline ::pipelines::tekton::v1alpha1::TaskParams* Task::_internal_add_task_params() {
  return task_params_.Add();
}
inline ::pipelines::tekton::v1alpha1::TaskParams* Task::add_task_params() {
  ::pipelines::tekton::v1alpha1::TaskParams* _add = _internal_add_task_params();
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.Task.task_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskParams >&
Task::task_params() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.Task.task_params)
  return task_params_;
}

// -------------------------------------------------------------------

// Pipeline

// string id = 1 [json_name = "id"];
inline void Pipeline::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Pipeline::id() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pipeline::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.id)
}
inline std::string* Pipeline::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.id)
  return _s;
}
inline const std::string& Pipeline::_internal_id() const {
  return id_.Get();
}
inline void Pipeline::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pipeline::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pipeline::release_id() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Pipeline.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pipeline::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Pipeline.id)
}

// uint32 organization_id = 2 [json_name = "organizationId"];
inline void Pipeline::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pipeline::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pipeline::organization_id() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.organization_id)
  return _internal_organization_id();
}
inline void Pipeline::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void Pipeline::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.organization_id)
}

// uint32 project_id = 3 [json_name = "projectId"];
inline void Pipeline::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pipeline::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pipeline::project_id() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.project_id)
  return _internal_project_id();
}
inline void Pipeline::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void Pipeline::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.project_id)
}

// string name = 4 [json_name = "name"];
inline void Pipeline::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Pipeline::name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pipeline::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.name)
}
inline std::string* Pipeline::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.name)
  return _s;
}
inline const std::string& Pipeline::_internal_name() const {
  return name_.Get();
}
inline void Pipeline::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pipeline::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pipeline::release_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Pipeline.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pipeline::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Pipeline.name)
}

// string workspaces = 5 [json_name = "workspaces"];
inline void Pipeline::clear_workspaces() {
  workspaces_.ClearToEmpty();
}
inline const std::string& Pipeline::workspaces() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.workspaces)
  return _internal_workspaces();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pipeline::set_workspaces(ArgT0&& arg0, ArgT... args) {
 
 workspaces_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.workspaces)
}
inline std::string* Pipeline::mutable_workspaces() {
  std::string* _s = _internal_mutable_workspaces();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.workspaces)
  return _s;
}
inline const std::string& Pipeline::_internal_workspaces() const {
  return workspaces_.Get();
}
inline void Pipeline::_internal_set_workspaces(const std::string& value) {
  
  workspaces_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pipeline::_internal_mutable_workspaces() {
  
  return workspaces_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pipeline::release_workspaces() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Pipeline.workspaces)
  return workspaces_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pipeline::set_allocated_workspaces(std::string* workspaces) {
  if (workspaces != nullptr) {
    
  } else {
    
  }
  workspaces_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workspaces,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Pipeline.workspaces)
}

// bool active = 6 [json_name = "active"];
inline void Pipeline::clear_active() {
  active_ = false;
}
inline bool Pipeline::_internal_active() const {
  return active_;
}
inline bool Pipeline::active() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.active)
  return _internal_active();
}
inline void Pipeline::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void Pipeline::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.active)
}

// string status_type = 7 [json_name = "statusType"];
inline void Pipeline::clear_status_type() {
  status_type_.ClearToEmpty();
}
inline const std::string& Pipeline::status_type() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.status_type)
  return _internal_status_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pipeline::set_status_type(ArgT0&& arg0, ArgT... args) {
 
 status_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.status_type)
}
inline std::string* Pipeline::mutable_status_type() {
  std::string* _s = _internal_mutable_status_type();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.status_type)
  return _s;
}
inline const std::string& Pipeline::_internal_status_type() const {
  return status_type_.Get();
}
inline void Pipeline::_internal_set_status_type(const std::string& value) {
  
  status_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pipeline::_internal_mutable_status_type() {
  
  return status_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pipeline::release_status_type() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Pipeline.status_type)
  return status_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pipeline::set_allocated_status_type(std::string* status_type) {
  if (status_type != nullptr) {
    
  } else {
    
  }
  status_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Pipeline.status_type)
}

// repeated .pipelines.tekton.v1alpha1.Task tasks = 8 [json_name = "tasks"];
inline int Pipeline::_internal_tasks_size() const {
  return tasks_.size();
}
inline int Pipeline::tasks_size() const {
  return _internal_tasks_size();
}
inline void Pipeline::clear_tasks() {
  tasks_.Clear();
}
inline ::pipelines::tekton::v1alpha1::Task* Pipeline::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >*
Pipeline::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.Pipeline.tasks)
  return &tasks_;
}
inline const ::pipelines::tekton::v1alpha1::Task& Pipeline::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::pipelines::tekton::v1alpha1::Task& Pipeline::tasks(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.tasks)
  return _internal_tasks(index);
}
inline ::pipelines::tekton::v1alpha1::Task* Pipeline::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::pipelines::tekton::v1alpha1::Task* Pipeline::add_tasks() {
  ::pipelines::tekton::v1alpha1::Task* _add = _internal_add_tasks();
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.Pipeline.tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >&
Pipeline::tasks() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.Pipeline.tasks)
  return tasks_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace tekton
}  // namespace pipelines

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pipelines::tekton::v1alpha1::TaskType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pipelines::tekton::v1alpha1::TaskType>() {
  return ::pipelines::tekton::v1alpha1::TaskType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto
