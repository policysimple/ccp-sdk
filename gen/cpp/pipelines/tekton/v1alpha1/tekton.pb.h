// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipelines/tekton/v1alpha1/tekton.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
namespace pipelines {
namespace tekton {
namespace v1alpha1 {
class Params;
struct ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
class Pipeline;
struct PipelineDefaultTypeInternal;
extern PipelineDefaultTypeInternal _Pipeline_default_instance_;
class Task;
struct TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskParams;
struct TaskParamsDefaultTypeInternal;
extern TaskParamsDefaultTypeInternal _TaskParams_default_instance_;
}  // namespace v1alpha1
}  // namespace tekton
}  // namespace pipelines
PROTOBUF_NAMESPACE_OPEN
template<> ::pipelines::tekton::v1alpha1::Params* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::Params>(Arena*);
template<> ::pipelines::tekton::v1alpha1::Pipeline* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::Pipeline>(Arena*);
template<> ::pipelines::tekton::v1alpha1::Task* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::Task>(Arena*);
template<> ::pipelines::tekton::v1alpha1::TaskParams* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::TaskParams>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pipelines {
namespace tekton {
namespace v1alpha1 {

// ===================================================================

class Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.Params) */ {
 public:
  inline Params() : Params(nullptr) {}
  ~Params() override;
  explicit constexpr Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params(const Params& from);
  Params(Params&& from) noexcept
    : Params() {
    *this = ::std::move(from);
  }

  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
               &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Params& a, Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Params* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Params* New() const final {
    return new Params();
  }

  Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Params& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.Params";
  }
  protected:
  explicit Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueArrayFieldNumber = 3,
    kNameFieldNumber = 1,
    kValueStringFieldNumber = 2,
    kValueTypeFieldNumber = 4,
  };
  // repeated string value_array = 3 [json_name = "valueArray"];
  int value_array_size() const;
  private:
  int _internal_value_array_size() const;
  public:
  void clear_value_array();
  const std::string& value_array(int index) const;
  std::string* mutable_value_array(int index);
  void set_value_array(int index, const std::string& value);
  void set_value_array(int index, std::string&& value);
  void set_value_array(int index, const char* value);
  void set_value_array(int index, const char* value, size_t size);
  std::string* add_value_array();
  void add_value_array(const std::string& value);
  void add_value_array(std::string&& value);
  void add_value_array(const char* value);
  void add_value_array(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value_array();
  private:
  const std::string& _internal_value_array(int index) const;
  std::string* _internal_add_value_array();
  public:

  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value_string = 2 [json_name = "valueString"];
  void clear_value_string();
  const std::string& value_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_string();
  PROTOBUF_MUST_USE_RESULT std::string* release_value_string();
  void set_allocated_value_string(std::string* value_string);
  private:
  const std::string& _internal_value_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_string(const std::string& value);
  std::string* _internal_mutable_value_string();
  public:

  // string value_type = 4 [json_name = "valueType"];
  void clear_value_type();
  const std::string& value_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_value_type();
  void set_allocated_value_type(std::string* value_type);
  private:
  const std::string& _internal_value_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_type(const std::string& value);
  std::string* _internal_mutable_value_type();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_array_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
};
// -------------------------------------------------------------------

class TaskParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.TaskParams) */ {
 public:
  inline TaskParams() : TaskParams(nullptr) {}
  ~TaskParams() override;
  explicit constexpr TaskParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskParams(const TaskParams& from);
  TaskParams(TaskParams&& from) noexcept
    : TaskParams() {
    *this = ::std::move(from);
  }

  inline TaskParams& operator=(const TaskParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskParams& operator=(TaskParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskParams* internal_default_instance() {
    return reinterpret_cast<const TaskParams*>(
               &_TaskParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskParams& a, TaskParams& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskParams* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskParams* New() const final {
    return new TaskParams();
  }

  TaskParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.TaskParams";
  }
  protected:
  explicit TaskParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamNameFieldNumber = 1,
    kParamValueTypeFieldNumber = 2,
    kParamValueFieldNumber = 3,
  };
  // string param_name = 1 [json_name = "paramName"];
  void clear_param_name();
  const std::string& param_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_param_name();
  void set_allocated_param_name(std::string* param_name);
  private:
  const std::string& _internal_param_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param_name(const std::string& value);
  std::string* _internal_mutable_param_name();
  public:

  // string param_value_type = 2 [json_name = "paramValueType"];
  void clear_param_value_type();
  const std::string& param_value_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param_value_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param_value_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_param_value_type();
  void set_allocated_param_value_type(std::string* param_value_type);
  private:
  const std::string& _internal_param_value_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param_value_type(const std::string& value);
  std::string* _internal_mutable_param_value_type();
  public:

  // string param_value = 3 [json_name = "paramValue"];
  void clear_param_value();
  const std::string& param_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_param_value();
  void set_allocated_param_value(std::string* param_value);
  private:
  const std::string& _internal_param_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param_value(const std::string& value);
  std::string* _internal_mutable_param_value();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.TaskParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_value_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
};
// -------------------------------------------------------------------

class Task final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.Task) */ {
 public:
  inline Task() : Task(nullptr) {}
  ~Task() override;
  explicit constexpr Task(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Task& default_instance() {
    return *internal_default_instance();
  }
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return new Task();
  }

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Task& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Task& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.Task";
  }
  protected:
  explicit Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskRunAfterFieldNumber = 5,
    kTaskParamsFieldNumber = 8,
    kIdFieldNumber = 1,
    kTaskNameFieldNumber = 2,
    kTaskRefNameFieldNumber = 3,
    kTaskKindFieldNumber = 4,
    kTaskWorkspacesNameFieldNumber = 6,
    kTaskWorkspacesMainFieldNumber = 7,
    kDescriptionFieldNumber = 9,
  };
  // repeated string task_run_after = 5 [json_name = "taskRunAfter"];
  int task_run_after_size() const;
  private:
  int _internal_task_run_after_size() const;
  public:
  void clear_task_run_after();
  const std::string& task_run_after(int index) const;
  std::string* mutable_task_run_after(int index);
  void set_task_run_after(int index, const std::string& value);
  void set_task_run_after(int index, std::string&& value);
  void set_task_run_after(int index, const char* value);
  void set_task_run_after(int index, const char* value, size_t size);
  std::string* add_task_run_after();
  void add_task_run_after(const std::string& value);
  void add_task_run_after(std::string&& value);
  void add_task_run_after(const char* value);
  void add_task_run_after(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& task_run_after() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_task_run_after();
  private:
  const std::string& _internal_task_run_after(int index) const;
  std::string* _internal_add_task_run_after();
  public:

  // repeated .pipelines.tekton.v1alpha1.TaskParams task_params = 8 [json_name = "taskParams"];
  int task_params_size() const;
  private:
  int _internal_task_params_size() const;
  public:
  void clear_task_params();
  ::pipelines::tekton::v1alpha1::TaskParams* mutable_task_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskParams >*
      mutable_task_params();
  private:
  const ::pipelines::tekton::v1alpha1::TaskParams& _internal_task_params(int index) const;
  ::pipelines::tekton::v1alpha1::TaskParams* _internal_add_task_params();
  public:
  const ::pipelines::tekton::v1alpha1::TaskParams& task_params(int index) const;
  ::pipelines::tekton::v1alpha1::TaskParams* add_task_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskParams >&
      task_params() const;

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string task_name = 2 [json_name = "taskName"];
  void clear_task_name();
  const std::string& task_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_task_name();
  void set_allocated_task_name(std::string* task_name);
  private:
  const std::string& _internal_task_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_name(const std::string& value);
  std::string* _internal_mutable_task_name();
  public:

  // string task_ref_name = 3 [json_name = "taskRefName"];
  void clear_task_ref_name();
  const std::string& task_ref_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_ref_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_ref_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_task_ref_name();
  void set_allocated_task_ref_name(std::string* task_ref_name);
  private:
  const std::string& _internal_task_ref_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_ref_name(const std::string& value);
  std::string* _internal_mutable_task_ref_name();
  public:

  // string task_kind = 4 [json_name = "taskKind"];
  void clear_task_kind();
  const std::string& task_kind() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_kind(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_kind();
  PROTOBUF_MUST_USE_RESULT std::string* release_task_kind();
  void set_allocated_task_kind(std::string* task_kind);
  private:
  const std::string& _internal_task_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_kind(const std::string& value);
  std::string* _internal_mutable_task_kind();
  public:

  // string task_workspaces_name = 6 [json_name = "taskWorkspacesName"];
  void clear_task_workspaces_name();
  const std::string& task_workspaces_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_workspaces_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_workspaces_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_task_workspaces_name();
  void set_allocated_task_workspaces_name(std::string* task_workspaces_name);
  private:
  const std::string& _internal_task_workspaces_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_workspaces_name(const std::string& value);
  std::string* _internal_mutable_task_workspaces_name();
  public:

  // string task_workspaces_main = 7 [json_name = "taskWorkspacesMain"];
  void clear_task_workspaces_main();
  const std::string& task_workspaces_main() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_workspaces_main(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_workspaces_main();
  PROTOBUF_MUST_USE_RESULT std::string* release_task_workspaces_main();
  void set_allocated_task_workspaces_main(std::string* task_workspaces_main);
  private:
  const std::string& _internal_task_workspaces_main() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_workspaces_main(const std::string& value);
  std::string* _internal_mutable_task_workspaces_main();
  public:

  // string description = 9 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.Task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> task_run_after_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskParams > task_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_ref_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_kind_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_workspaces_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_workspaces_main_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
};
// -------------------------------------------------------------------

class Pipeline final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.Pipeline) */ {
 public:
  inline Pipeline() : Pipeline(nullptr) {}
  ~Pipeline() override;
  explicit constexpr Pipeline(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pipeline(const Pipeline& from);
  Pipeline(Pipeline&& from) noexcept
    : Pipeline() {
    *this = ::std::move(from);
  }

  inline Pipeline& operator=(const Pipeline& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pipeline& operator=(Pipeline&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pipeline& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pipeline* internal_default_instance() {
    return reinterpret_cast<const Pipeline*>(
               &_Pipeline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Pipeline& a, Pipeline& b) {
    a.Swap(&b);
  }
  inline void Swap(Pipeline* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pipeline* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pipeline* New() const final {
    return new Pipeline();
  }

  Pipeline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pipeline>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pipeline& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pipeline& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pipeline* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.Pipeline";
  }
  protected:
  explicit Pipeline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 9,
    kTasksFieldNumber = 10,
    kIdFieldNumber = 1,
    kTypeMetaKindFieldNumber = 4,
    kTypeMetaApiVersionFieldNumber = 5,
    kObjectMetaNameFieldNumber = 6,
    kObjectMetaNamespaceFieldNumber = 7,
    kSpecWorkspacesNameFieldNumber = 8,
    kStatusTypeFieldNumber = 11,
    kOrganizationIdFieldNumber = 2,
    kProjectIdFieldNumber = 3,
    kActiveFieldNumber = 12,
  };
  // repeated .pipelines.tekton.v1alpha1.Params params = 9 [json_name = "params"];
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::pipelines::tekton::v1alpha1::Params* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Params >*
      mutable_params();
  private:
  const ::pipelines::tekton::v1alpha1::Params& _internal_params(int index) const;
  ::pipelines::tekton::v1alpha1::Params* _internal_add_params();
  public:
  const ::pipelines::tekton::v1alpha1::Params& params(int index) const;
  ::pipelines::tekton::v1alpha1::Params* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Params >&
      params() const;

  // repeated .pipelines.tekton.v1alpha1.Task tasks = 10 [json_name = "tasks"];
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::pipelines::tekton::v1alpha1::Task* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >*
      mutable_tasks();
  private:
  const ::pipelines::tekton::v1alpha1::Task& _internal_tasks(int index) const;
  ::pipelines::tekton::v1alpha1::Task* _internal_add_tasks();
  public:
  const ::pipelines::tekton::v1alpha1::Task& tasks(int index) const;
  ::pipelines::tekton::v1alpha1::Task* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >&
      tasks() const;

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string type_meta_kind = 4 [json_name = "typeMetaKind"];
  void clear_type_meta_kind();
  const std::string& type_meta_kind() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_meta_kind(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_meta_kind();
  PROTOBUF_MUST_USE_RESULT std::string* release_type_meta_kind();
  void set_allocated_type_meta_kind(std::string* type_meta_kind);
  private:
  const std::string& _internal_type_meta_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_meta_kind(const std::string& value);
  std::string* _internal_mutable_type_meta_kind();
  public:

  // string type_meta_api_version = 5 [json_name = "typeMetaApiVersion"];
  void clear_type_meta_api_version();
  const std::string& type_meta_api_version() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_meta_api_version(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_meta_api_version();
  PROTOBUF_MUST_USE_RESULT std::string* release_type_meta_api_version();
  void set_allocated_type_meta_api_version(std::string* type_meta_api_version);
  private:
  const std::string& _internal_type_meta_api_version() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_meta_api_version(const std::string& value);
  std::string* _internal_mutable_type_meta_api_version();
  public:

  // string object_meta_name = 6 [json_name = "objectMetaName"];
  void clear_object_meta_name();
  const std::string& object_meta_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_object_meta_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_object_meta_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_object_meta_name();
  void set_allocated_object_meta_name(std::string* object_meta_name);
  private:
  const std::string& _internal_object_meta_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object_meta_name(const std::string& value);
  std::string* _internal_mutable_object_meta_name();
  public:

  // string object_meta_namespace = 7 [json_name = "objectMetaNamespace"];
  void clear_object_meta_namespace();
  const std::string& object_meta_namespace() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_object_meta_namespace(ArgT0&& arg0, ArgT... args);
  std::string* mutable_object_meta_namespace();
  PROTOBUF_MUST_USE_RESULT std::string* release_object_meta_namespace();
  void set_allocated_object_meta_namespace(std::string* object_meta_namespace);
  private:
  const std::string& _internal_object_meta_namespace() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_object_meta_namespace(const std::string& value);
  std::string* _internal_mutable_object_meta_namespace();
  public:

  // string spec_workspaces_name = 8 [json_name = "specWorkspacesName"];
  void clear_spec_workspaces_name();
  const std::string& spec_workspaces_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_spec_workspaces_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_spec_workspaces_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_spec_workspaces_name();
  void set_allocated_spec_workspaces_name(std::string* spec_workspaces_name);
  private:
  const std::string& _internal_spec_workspaces_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_spec_workspaces_name(const std::string& value);
  std::string* _internal_mutable_spec_workspaces_name();
  public:

  // string status_type = 11 [json_name = "statusType"];
  void clear_status_type();
  const std::string& status_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_status_type();
  void set_allocated_status_type(std::string* status_type);
  private:
  const std::string& _internal_status_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_type(const std::string& value);
  std::string* _internal_mutable_status_type();
  public:

  // uint32 organization_id = 2 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 project_id = 3 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool active = 12 [json_name = "active"];
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.Pipeline)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Params > params_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task > tasks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_meta_kind_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_meta_api_version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_meta_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr object_meta_namespace_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spec_workspaces_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  bool active_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Params

// string name = 1 [json_name = "name"];
inline void Params::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Params::name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Params.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Params::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Params.name)
}
inline std::string* Params::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Params.name)
  return _s;
}
inline const std::string& Params::_internal_name() const {
  return name_.Get();
}
inline void Params::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Params::release_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Params.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Params::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Params.name)
}

// string value_string = 2 [json_name = "valueString"];
inline void Params::clear_value_string() {
  value_string_.ClearToEmpty();
}
inline const std::string& Params::value_string() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Params.value_string)
  return _internal_value_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Params::set_value_string(ArgT0&& arg0, ArgT... args) {
 
 value_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Params.value_string)
}
inline std::string* Params::mutable_value_string() {
  std::string* _s = _internal_mutable_value_string();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Params.value_string)
  return _s;
}
inline const std::string& Params::_internal_value_string() const {
  return value_string_.Get();
}
inline void Params::_internal_set_value_string(const std::string& value) {
  
  value_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_value_string() {
  
  return value_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Params::release_value_string() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Params.value_string)
  return value_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Params::set_allocated_value_string(std::string* value_string) {
  if (value_string != nullptr) {
    
  } else {
    
  }
  value_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_string,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Params.value_string)
}

// repeated string value_array = 3 [json_name = "valueArray"];
inline int Params::_internal_value_array_size() const {
  return value_array_.size();
}
inline int Params::value_array_size() const {
  return _internal_value_array_size();
}
inline void Params::clear_value_array() {
  value_array_.Clear();
}
inline std::string* Params::add_value_array() {
  std::string* _s = _internal_add_value_array();
  // @@protoc_insertion_point(field_add_mutable:pipelines.tekton.v1alpha1.Params.value_array)
  return _s;
}
inline const std::string& Params::_internal_value_array(int index) const {
  return value_array_.Get(index);
}
inline const std::string& Params::value_array(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Params.value_array)
  return _internal_value_array(index);
}
inline std::string* Params::mutable_value_array(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Params.value_array)
  return value_array_.Mutable(index);
}
inline void Params::set_value_array(int index, const std::string& value) {
  value_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Params.value_array)
}
inline void Params::set_value_array(int index, std::string&& value) {
  value_array_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Params.value_array)
}
inline void Params::set_value_array(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pipelines.tekton.v1alpha1.Params.value_array)
}
inline void Params::set_value_array(int index, const char* value, size_t size) {
  value_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pipelines.tekton.v1alpha1.Params.value_array)
}
inline std::string* Params::_internal_add_value_array() {
  return value_array_.Add();
}
inline void Params::add_value_array(const std::string& value) {
  value_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.Params.value_array)
}
inline void Params::add_value_array(std::string&& value) {
  value_array_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.Params.value_array)
}
inline void Params::add_value_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pipelines.tekton.v1alpha1.Params.value_array)
}
inline void Params::add_value_array(const char* value, size_t size) {
  value_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pipelines.tekton.v1alpha1.Params.value_array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Params::value_array() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.Params.value_array)
  return value_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Params::mutable_value_array() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.Params.value_array)
  return &value_array_;
}

// string value_type = 4 [json_name = "valueType"];
inline void Params::clear_value_type() {
  value_type_.ClearToEmpty();
}
inline const std::string& Params::value_type() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Params.value_type)
  return _internal_value_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Params::set_value_type(ArgT0&& arg0, ArgT... args) {
 
 value_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Params.value_type)
}
inline std::string* Params::mutable_value_type() {
  std::string* _s = _internal_mutable_value_type();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Params.value_type)
  return _s;
}
inline const std::string& Params::_internal_value_type() const {
  return value_type_.Get();
}
inline void Params::_internal_set_value_type(const std::string& value) {
  
  value_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_value_type() {
  
  return value_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Params::release_value_type() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Params.value_type)
  return value_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Params::set_allocated_value_type(std::string* value_type) {
  if (value_type != nullptr) {
    
  } else {
    
  }
  value_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Params.value_type)
}

// -------------------------------------------------------------------

// TaskParams

// string param_name = 1 [json_name = "paramName"];
inline void TaskParams::clear_param_name() {
  param_name_.ClearToEmpty();
}
inline const std::string& TaskParams::param_name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskParams.param_name)
  return _internal_param_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskParams::set_param_name(ArgT0&& arg0, ArgT... args) {
 
 param_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskParams.param_name)
}
inline std::string* TaskParams::mutable_param_name() {
  std::string* _s = _internal_mutable_param_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskParams.param_name)
  return _s;
}
inline const std::string& TaskParams::_internal_param_name() const {
  return param_name_.Get();
}
inline void TaskParams::_internal_set_param_name(const std::string& value) {
  
  param_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskParams::_internal_mutable_param_name() {
  
  return param_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskParams::release_param_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskParams.param_name)
  return param_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskParams::set_allocated_param_name(std::string* param_name) {
  if (param_name != nullptr) {
    
  } else {
    
  }
  param_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskParams.param_name)
}

// string param_value_type = 2 [json_name = "paramValueType"];
inline void TaskParams::clear_param_value_type() {
  param_value_type_.ClearToEmpty();
}
inline const std::string& TaskParams::param_value_type() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskParams.param_value_type)
  return _internal_param_value_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskParams::set_param_value_type(ArgT0&& arg0, ArgT... args) {
 
 param_value_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskParams.param_value_type)
}
inline std::string* TaskParams::mutable_param_value_type() {
  std::string* _s = _internal_mutable_param_value_type();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskParams.param_value_type)
  return _s;
}
inline const std::string& TaskParams::_internal_param_value_type() const {
  return param_value_type_.Get();
}
inline void TaskParams::_internal_set_param_value_type(const std::string& value) {
  
  param_value_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskParams::_internal_mutable_param_value_type() {
  
  return param_value_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskParams::release_param_value_type() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskParams.param_value_type)
  return param_value_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskParams::set_allocated_param_value_type(std::string* param_value_type) {
  if (param_value_type != nullptr) {
    
  } else {
    
  }
  param_value_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param_value_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskParams.param_value_type)
}

// string param_value = 3 [json_name = "paramValue"];
inline void TaskParams::clear_param_value() {
  param_value_.ClearToEmpty();
}
inline const std::string& TaskParams::param_value() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskParams.param_value)
  return _internal_param_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskParams::set_param_value(ArgT0&& arg0, ArgT... args) {
 
 param_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskParams.param_value)
}
inline std::string* TaskParams::mutable_param_value() {
  std::string* _s = _internal_mutable_param_value();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskParams.param_value)
  return _s;
}
inline const std::string& TaskParams::_internal_param_value() const {
  return param_value_.Get();
}
inline void TaskParams::_internal_set_param_value(const std::string& value) {
  
  param_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskParams::_internal_mutable_param_value() {
  
  return param_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskParams::release_param_value() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskParams.param_value)
  return param_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskParams::set_allocated_param_value(std::string* param_value) {
  if (param_value != nullptr) {
    
  } else {
    
  }
  param_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param_value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskParams.param_value)
}

// -------------------------------------------------------------------

// Task

// string id = 1 [json_name = "id"];
inline void Task::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Task::id() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.id)
}
inline std::string* Task::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.id)
  return _s;
}
inline const std::string& Task::_internal_id() const {
  return id_.Get();
}
inline void Task::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Task::release_id() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Task.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Task::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Task.id)
}

// string task_name = 2 [json_name = "taskName"];
inline void Task::clear_task_name() {
  task_name_.ClearToEmpty();
}
inline const std::string& Task::task_name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.task_name)
  return _internal_task_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_task_name(ArgT0&& arg0, ArgT... args) {
 
 task_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.task_name)
}
inline std::string* Task::mutable_task_name() {
  std::string* _s = _internal_mutable_task_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.task_name)
  return _s;
}
inline const std::string& Task::_internal_task_name() const {
  return task_name_.Get();
}
inline void Task::_internal_set_task_name(const std::string& value) {
  
  task_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_task_name() {
  
  return task_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Task::release_task_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Task.task_name)
  return task_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Task::set_allocated_task_name(std::string* task_name) {
  if (task_name != nullptr) {
    
  } else {
    
  }
  task_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Task.task_name)
}

// string task_ref_name = 3 [json_name = "taskRefName"];
inline void Task::clear_task_ref_name() {
  task_ref_name_.ClearToEmpty();
}
inline const std::string& Task::task_ref_name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.task_ref_name)
  return _internal_task_ref_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_task_ref_name(ArgT0&& arg0, ArgT... args) {
 
 task_ref_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.task_ref_name)
}
inline std::string* Task::mutable_task_ref_name() {
  std::string* _s = _internal_mutable_task_ref_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.task_ref_name)
  return _s;
}
inline const std::string& Task::_internal_task_ref_name() const {
  return task_ref_name_.Get();
}
inline void Task::_internal_set_task_ref_name(const std::string& value) {
  
  task_ref_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_task_ref_name() {
  
  return task_ref_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Task::release_task_ref_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Task.task_ref_name)
  return task_ref_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Task::set_allocated_task_ref_name(std::string* task_ref_name) {
  if (task_ref_name != nullptr) {
    
  } else {
    
  }
  task_ref_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_ref_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Task.task_ref_name)
}

// string task_kind = 4 [json_name = "taskKind"];
inline void Task::clear_task_kind() {
  task_kind_.ClearToEmpty();
}
inline const std::string& Task::task_kind() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.task_kind)
  return _internal_task_kind();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_task_kind(ArgT0&& arg0, ArgT... args) {
 
 task_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.task_kind)
}
inline std::string* Task::mutable_task_kind() {
  std::string* _s = _internal_mutable_task_kind();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.task_kind)
  return _s;
}
inline const std::string& Task::_internal_task_kind() const {
  return task_kind_.Get();
}
inline void Task::_internal_set_task_kind(const std::string& value) {
  
  task_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_task_kind() {
  
  return task_kind_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Task::release_task_kind() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Task.task_kind)
  return task_kind_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Task::set_allocated_task_kind(std::string* task_kind) {
  if (task_kind != nullptr) {
    
  } else {
    
  }
  task_kind_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_kind,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Task.task_kind)
}

// repeated string task_run_after = 5 [json_name = "taskRunAfter"];
inline int Task::_internal_task_run_after_size() const {
  return task_run_after_.size();
}
inline int Task::task_run_after_size() const {
  return _internal_task_run_after_size();
}
inline void Task::clear_task_run_after() {
  task_run_after_.Clear();
}
inline std::string* Task::add_task_run_after() {
  std::string* _s = _internal_add_task_run_after();
  // @@protoc_insertion_point(field_add_mutable:pipelines.tekton.v1alpha1.Task.task_run_after)
  return _s;
}
inline const std::string& Task::_internal_task_run_after(int index) const {
  return task_run_after_.Get(index);
}
inline const std::string& Task::task_run_after(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.task_run_after)
  return _internal_task_run_after(index);
}
inline std::string* Task::mutable_task_run_after(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.task_run_after)
  return task_run_after_.Mutable(index);
}
inline void Task::set_task_run_after(int index, const std::string& value) {
  task_run_after_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.task_run_after)
}
inline void Task::set_task_run_after(int index, std::string&& value) {
  task_run_after_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.task_run_after)
}
inline void Task::set_task_run_after(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  task_run_after_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pipelines.tekton.v1alpha1.Task.task_run_after)
}
inline void Task::set_task_run_after(int index, const char* value, size_t size) {
  task_run_after_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pipelines.tekton.v1alpha1.Task.task_run_after)
}
inline std::string* Task::_internal_add_task_run_after() {
  return task_run_after_.Add();
}
inline void Task::add_task_run_after(const std::string& value) {
  task_run_after_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.Task.task_run_after)
}
inline void Task::add_task_run_after(std::string&& value) {
  task_run_after_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.Task.task_run_after)
}
inline void Task::add_task_run_after(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  task_run_after_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pipelines.tekton.v1alpha1.Task.task_run_after)
}
inline void Task::add_task_run_after(const char* value, size_t size) {
  task_run_after_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pipelines.tekton.v1alpha1.Task.task_run_after)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Task::task_run_after() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.Task.task_run_after)
  return task_run_after_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Task::mutable_task_run_after() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.Task.task_run_after)
  return &task_run_after_;
}

// string task_workspaces_name = 6 [json_name = "taskWorkspacesName"];
inline void Task::clear_task_workspaces_name() {
  task_workspaces_name_.ClearToEmpty();
}
inline const std::string& Task::task_workspaces_name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.task_workspaces_name)
  return _internal_task_workspaces_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_task_workspaces_name(ArgT0&& arg0, ArgT... args) {
 
 task_workspaces_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.task_workspaces_name)
}
inline std::string* Task::mutable_task_workspaces_name() {
  std::string* _s = _internal_mutable_task_workspaces_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.task_workspaces_name)
  return _s;
}
inline const std::string& Task::_internal_task_workspaces_name() const {
  return task_workspaces_name_.Get();
}
inline void Task::_internal_set_task_workspaces_name(const std::string& value) {
  
  task_workspaces_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_task_workspaces_name() {
  
  return task_workspaces_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Task::release_task_workspaces_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Task.task_workspaces_name)
  return task_workspaces_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Task::set_allocated_task_workspaces_name(std::string* task_workspaces_name) {
  if (task_workspaces_name != nullptr) {
    
  } else {
    
  }
  task_workspaces_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_workspaces_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Task.task_workspaces_name)
}

// string task_workspaces_main = 7 [json_name = "taskWorkspacesMain"];
inline void Task::clear_task_workspaces_main() {
  task_workspaces_main_.ClearToEmpty();
}
inline const std::string& Task::task_workspaces_main() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.task_workspaces_main)
  return _internal_task_workspaces_main();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_task_workspaces_main(ArgT0&& arg0, ArgT... args) {
 
 task_workspaces_main_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.task_workspaces_main)
}
inline std::string* Task::mutable_task_workspaces_main() {
  std::string* _s = _internal_mutable_task_workspaces_main();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.task_workspaces_main)
  return _s;
}
inline const std::string& Task::_internal_task_workspaces_main() const {
  return task_workspaces_main_.Get();
}
inline void Task::_internal_set_task_workspaces_main(const std::string& value) {
  
  task_workspaces_main_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_task_workspaces_main() {
  
  return task_workspaces_main_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Task::release_task_workspaces_main() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Task.task_workspaces_main)
  return task_workspaces_main_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Task::set_allocated_task_workspaces_main(std::string* task_workspaces_main) {
  if (task_workspaces_main != nullptr) {
    
  } else {
    
  }
  task_workspaces_main_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_workspaces_main,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Task.task_workspaces_main)
}

// repeated .pipelines.tekton.v1alpha1.TaskParams task_params = 8 [json_name = "taskParams"];
inline int Task::_internal_task_params_size() const {
  return task_params_.size();
}
inline int Task::task_params_size() const {
  return _internal_task_params_size();
}
inline void Task::clear_task_params() {
  task_params_.Clear();
}
inline ::pipelines::tekton::v1alpha1::TaskParams* Task::mutable_task_params(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.task_params)
  return task_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskParams >*
Task::mutable_task_params() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.Task.task_params)
  return &task_params_;
}
inline const ::pipelines::tekton::v1alpha1::TaskParams& Task::_internal_task_params(int index) const {
  return task_params_.Get(index);
}
inline const ::pipelines::tekton::v1alpha1::TaskParams& Task::task_params(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.task_params)
  return _internal_task_params(index);
}
inline ::pipelines::tekton::v1alpha1::TaskParams* Task::_internal_add_task_params() {
  return task_params_.Add();
}
inline ::pipelines::tekton::v1alpha1::TaskParams* Task::add_task_params() {
  ::pipelines::tekton::v1alpha1::TaskParams* _add = _internal_add_task_params();
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.Task.task_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskParams >&
Task::task_params() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.Task.task_params)
  return task_params_;
}

// string description = 9 [json_name = "description"];
inline void Task::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Task::description() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.description)
}
inline std::string* Task::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.description)
  return _s;
}
inline const std::string& Task::_internal_description() const {
  return description_.Get();
}
inline void Task::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Task::release_description() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Task.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Task::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Task.description)
}

// -------------------------------------------------------------------

// Pipeline

// string id = 1 [json_name = "id"];
inline void Pipeline::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Pipeline::id() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pipeline::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.id)
}
inline std::string* Pipeline::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.id)
  return _s;
}
inline const std::string& Pipeline::_internal_id() const {
  return id_.Get();
}
inline void Pipeline::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pipeline::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pipeline::release_id() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Pipeline.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pipeline::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Pipeline.id)
}

// uint32 organization_id = 2 [json_name = "organizationId"];
inline void Pipeline::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pipeline::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pipeline::organization_id() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.organization_id)
  return _internal_organization_id();
}
inline void Pipeline::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void Pipeline::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.organization_id)
}

// uint32 project_id = 3 [json_name = "projectId"];
inline void Pipeline::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pipeline::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Pipeline::project_id() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.project_id)
  return _internal_project_id();
}
inline void Pipeline::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void Pipeline::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.project_id)
}

// string type_meta_kind = 4 [json_name = "typeMetaKind"];
inline void Pipeline::clear_type_meta_kind() {
  type_meta_kind_.ClearToEmpty();
}
inline const std::string& Pipeline::type_meta_kind() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.type_meta_kind)
  return _internal_type_meta_kind();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pipeline::set_type_meta_kind(ArgT0&& arg0, ArgT... args) {
 
 type_meta_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.type_meta_kind)
}
inline std::string* Pipeline::mutable_type_meta_kind() {
  std::string* _s = _internal_mutable_type_meta_kind();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.type_meta_kind)
  return _s;
}
inline const std::string& Pipeline::_internal_type_meta_kind() const {
  return type_meta_kind_.Get();
}
inline void Pipeline::_internal_set_type_meta_kind(const std::string& value) {
  
  type_meta_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pipeline::_internal_mutable_type_meta_kind() {
  
  return type_meta_kind_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pipeline::release_type_meta_kind() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Pipeline.type_meta_kind)
  return type_meta_kind_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pipeline::set_allocated_type_meta_kind(std::string* type_meta_kind) {
  if (type_meta_kind != nullptr) {
    
  } else {
    
  }
  type_meta_kind_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_meta_kind,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Pipeline.type_meta_kind)
}

// string type_meta_api_version = 5 [json_name = "typeMetaApiVersion"];
inline void Pipeline::clear_type_meta_api_version() {
  type_meta_api_version_.ClearToEmpty();
}
inline const std::string& Pipeline::type_meta_api_version() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.type_meta_api_version)
  return _internal_type_meta_api_version();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pipeline::set_type_meta_api_version(ArgT0&& arg0, ArgT... args) {
 
 type_meta_api_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.type_meta_api_version)
}
inline std::string* Pipeline::mutable_type_meta_api_version() {
  std::string* _s = _internal_mutable_type_meta_api_version();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.type_meta_api_version)
  return _s;
}
inline const std::string& Pipeline::_internal_type_meta_api_version() const {
  return type_meta_api_version_.Get();
}
inline void Pipeline::_internal_set_type_meta_api_version(const std::string& value) {
  
  type_meta_api_version_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pipeline::_internal_mutable_type_meta_api_version() {
  
  return type_meta_api_version_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pipeline::release_type_meta_api_version() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Pipeline.type_meta_api_version)
  return type_meta_api_version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pipeline::set_allocated_type_meta_api_version(std::string* type_meta_api_version) {
  if (type_meta_api_version != nullptr) {
    
  } else {
    
  }
  type_meta_api_version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_meta_api_version,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Pipeline.type_meta_api_version)
}

// string object_meta_name = 6 [json_name = "objectMetaName"];
inline void Pipeline::clear_object_meta_name() {
  object_meta_name_.ClearToEmpty();
}
inline const std::string& Pipeline::object_meta_name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.object_meta_name)
  return _internal_object_meta_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pipeline::set_object_meta_name(ArgT0&& arg0, ArgT... args) {
 
 object_meta_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.object_meta_name)
}
inline std::string* Pipeline::mutable_object_meta_name() {
  std::string* _s = _internal_mutable_object_meta_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.object_meta_name)
  return _s;
}
inline const std::string& Pipeline::_internal_object_meta_name() const {
  return object_meta_name_.Get();
}
inline void Pipeline::_internal_set_object_meta_name(const std::string& value) {
  
  object_meta_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pipeline::_internal_mutable_object_meta_name() {
  
  return object_meta_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pipeline::release_object_meta_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Pipeline.object_meta_name)
  return object_meta_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pipeline::set_allocated_object_meta_name(std::string* object_meta_name) {
  if (object_meta_name != nullptr) {
    
  } else {
    
  }
  object_meta_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), object_meta_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Pipeline.object_meta_name)
}

// string object_meta_namespace = 7 [json_name = "objectMetaNamespace"];
inline void Pipeline::clear_object_meta_namespace() {
  object_meta_namespace_.ClearToEmpty();
}
inline const std::string& Pipeline::object_meta_namespace() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.object_meta_namespace)
  return _internal_object_meta_namespace();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pipeline::set_object_meta_namespace(ArgT0&& arg0, ArgT... args) {
 
 object_meta_namespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.object_meta_namespace)
}
inline std::string* Pipeline::mutable_object_meta_namespace() {
  std::string* _s = _internal_mutable_object_meta_namespace();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.object_meta_namespace)
  return _s;
}
inline const std::string& Pipeline::_internal_object_meta_namespace() const {
  return object_meta_namespace_.Get();
}
inline void Pipeline::_internal_set_object_meta_namespace(const std::string& value) {
  
  object_meta_namespace_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pipeline::_internal_mutable_object_meta_namespace() {
  
  return object_meta_namespace_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pipeline::release_object_meta_namespace() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Pipeline.object_meta_namespace)
  return object_meta_namespace_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pipeline::set_allocated_object_meta_namespace(std::string* object_meta_namespace) {
  if (object_meta_namespace != nullptr) {
    
  } else {
    
  }
  object_meta_namespace_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), object_meta_namespace,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Pipeline.object_meta_namespace)
}

// string spec_workspaces_name = 8 [json_name = "specWorkspacesName"];
inline void Pipeline::clear_spec_workspaces_name() {
  spec_workspaces_name_.ClearToEmpty();
}
inline const std::string& Pipeline::spec_workspaces_name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.spec_workspaces_name)
  return _internal_spec_workspaces_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pipeline::set_spec_workspaces_name(ArgT0&& arg0, ArgT... args) {
 
 spec_workspaces_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.spec_workspaces_name)
}
inline std::string* Pipeline::mutable_spec_workspaces_name() {
  std::string* _s = _internal_mutable_spec_workspaces_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.spec_workspaces_name)
  return _s;
}
inline const std::string& Pipeline::_internal_spec_workspaces_name() const {
  return spec_workspaces_name_.Get();
}
inline void Pipeline::_internal_set_spec_workspaces_name(const std::string& value) {
  
  spec_workspaces_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pipeline::_internal_mutable_spec_workspaces_name() {
  
  return spec_workspaces_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pipeline::release_spec_workspaces_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Pipeline.spec_workspaces_name)
  return spec_workspaces_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pipeline::set_allocated_spec_workspaces_name(std::string* spec_workspaces_name) {
  if (spec_workspaces_name != nullptr) {
    
  } else {
    
  }
  spec_workspaces_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spec_workspaces_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Pipeline.spec_workspaces_name)
}

// repeated .pipelines.tekton.v1alpha1.Params params = 9 [json_name = "params"];
inline int Pipeline::_internal_params_size() const {
  return params_.size();
}
inline int Pipeline::params_size() const {
  return _internal_params_size();
}
inline void Pipeline::clear_params() {
  params_.Clear();
}
inline ::pipelines::tekton::v1alpha1::Params* Pipeline::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Params >*
Pipeline::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.Pipeline.params)
  return &params_;
}
inline const ::pipelines::tekton::v1alpha1::Params& Pipeline::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::pipelines::tekton::v1alpha1::Params& Pipeline::params(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.params)
  return _internal_params(index);
}
inline ::pipelines::tekton::v1alpha1::Params* Pipeline::_internal_add_params() {
  return params_.Add();
}
inline ::pipelines::tekton::v1alpha1::Params* Pipeline::add_params() {
  ::pipelines::tekton::v1alpha1::Params* _add = _internal_add_params();
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.Pipeline.params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Params >&
Pipeline::params() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.Pipeline.params)
  return params_;
}

// repeated .pipelines.tekton.v1alpha1.Task tasks = 10 [json_name = "tasks"];
inline int Pipeline::_internal_tasks_size() const {
  return tasks_.size();
}
inline int Pipeline::tasks_size() const {
  return _internal_tasks_size();
}
inline void Pipeline::clear_tasks() {
  tasks_.Clear();
}
inline ::pipelines::tekton::v1alpha1::Task* Pipeline::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >*
Pipeline::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.Pipeline.tasks)
  return &tasks_;
}
inline const ::pipelines::tekton::v1alpha1::Task& Pipeline::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::pipelines::tekton::v1alpha1::Task& Pipeline::tasks(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.tasks)
  return _internal_tasks(index);
}
inline ::pipelines::tekton::v1alpha1::Task* Pipeline::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::pipelines::tekton::v1alpha1::Task* Pipeline::add_tasks() {
  ::pipelines::tekton::v1alpha1::Task* _add = _internal_add_tasks();
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.Pipeline.tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >&
Pipeline::tasks() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.Pipeline.tasks)
  return tasks_;
}

// string status_type = 11 [json_name = "statusType"];
inline void Pipeline::clear_status_type() {
  status_type_.ClearToEmpty();
}
inline const std::string& Pipeline::status_type() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.status_type)
  return _internal_status_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pipeline::set_status_type(ArgT0&& arg0, ArgT... args) {
 
 status_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.status_type)
}
inline std::string* Pipeline::mutable_status_type() {
  std::string* _s = _internal_mutable_status_type();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.status_type)
  return _s;
}
inline const std::string& Pipeline::_internal_status_type() const {
  return status_type_.Get();
}
inline void Pipeline::_internal_set_status_type(const std::string& value) {
  
  status_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pipeline::_internal_mutable_status_type() {
  
  return status_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pipeline::release_status_type() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Pipeline.status_type)
  return status_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pipeline::set_allocated_status_type(std::string* status_type) {
  if (status_type != nullptr) {
    
  } else {
    
  }
  status_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Pipeline.status_type)
}

// bool active = 12 [json_name = "active"];
inline void Pipeline::clear_active() {
  active_ = false;
}
inline bool Pipeline::_internal_active() const {
  return active_;
}
inline bool Pipeline::active() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.active)
  return _internal_active();
}
inline void Pipeline::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void Pipeline::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.active)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace tekton
}  // namespace pipelines

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto
