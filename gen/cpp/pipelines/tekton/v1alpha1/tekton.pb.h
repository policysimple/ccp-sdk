// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipelines/tekton/v1alpha1/tekton.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[19]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
namespace pipelines {
namespace tekton {
namespace v1alpha1 {
class Params;
struct ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
class Pipeline;
struct PipelineDefaultTypeInternal;
extern PipelineDefaultTypeInternal _Pipeline_default_instance_;
class PipelineRun;
struct PipelineRunDefaultTypeInternal;
extern PipelineRunDefaultTypeInternal _PipelineRun_default_instance_;
class PipelineRunList;
struct PipelineRunListDefaultTypeInternal;
extern PipelineRunListDefaultTypeInternal _PipelineRunList_default_instance_;
class Pipeline_CommandsEntry_DoNotUse;
struct Pipeline_CommandsEntry_DoNotUseDefaultTypeInternal;
extern Pipeline_CommandsEntry_DoNotUseDefaultTypeInternal _Pipeline_CommandsEntry_DoNotUse_default_instance_;
class Pipeline_EnvironmentVariablesEntry_DoNotUse;
struct Pipeline_EnvironmentVariablesEntry_DoNotUseDefaultTypeInternal;
extern Pipeline_EnvironmentVariablesEntry_DoNotUseDefaultTypeInternal _Pipeline_EnvironmentVariablesEntry_DoNotUse_default_instance_;
class Pipeline_ExtraArgsEntry_DoNotUse;
struct Pipeline_ExtraArgsEntry_DoNotUseDefaultTypeInternal;
extern Pipeline_ExtraArgsEntry_DoNotUseDefaultTypeInternal _Pipeline_ExtraArgsEntry_DoNotUse_default_instance_;
class Pipeline_InstanceTypeEntry_DoNotUse;
struct Pipeline_InstanceTypeEntry_DoNotUseDefaultTypeInternal;
extern Pipeline_InstanceTypeEntry_DoNotUseDefaultTypeInternal _Pipeline_InstanceTypeEntry_DoNotUse_default_instance_;
class Pipeline_IntegrationEntry_DoNotUse;
struct Pipeline_IntegrationEntry_DoNotUseDefaultTypeInternal;
extern Pipeline_IntegrationEntry_DoNotUseDefaultTypeInternal _Pipeline_IntegrationEntry_DoNotUse_default_instance_;
class Pipeline_SecretsEntry_DoNotUse;
struct Pipeline_SecretsEntry_DoNotUseDefaultTypeInternal;
extern Pipeline_SecretsEntry_DoNotUseDefaultTypeInternal _Pipeline_SecretsEntry_DoNotUse_default_instance_;
class Task;
struct TaskDefaultTypeInternal;
extern TaskDefaultTypeInternal _Task_default_instance_;
class TaskParams;
struct TaskParamsDefaultTypeInternal;
extern TaskParamsDefaultTypeInternal _TaskParams_default_instance_;
class TaskParamsToCustomize;
struct TaskParamsToCustomizeDefaultTypeInternal;
extern TaskParamsToCustomizeDefaultTypeInternal _TaskParamsToCustomize_default_instance_;
class TaskRun;
struct TaskRunDefaultTypeInternal;
extern TaskRunDefaultTypeInternal _TaskRun_default_instance_;
class TaskRunStep;
struct TaskRunStepDefaultTypeInternal;
extern TaskRunStepDefaultTypeInternal _TaskRunStep_default_instance_;
class TaskToCustomize;
struct TaskToCustomizeDefaultTypeInternal;
extern TaskToCustomizeDefaultTypeInternal _TaskToCustomize_default_instance_;
class TektonTask;
struct TektonTaskDefaultTypeInternal;
extern TektonTaskDefaultTypeInternal _TektonTask_default_instance_;
class TektonTaskList;
struct TektonTaskListDefaultTypeInternal;
extern TektonTaskListDefaultTypeInternal _TektonTaskList_default_instance_;
class Workspaces;
struct WorkspacesDefaultTypeInternal;
extern WorkspacesDefaultTypeInternal _Workspaces_default_instance_;
}  // namespace v1alpha1
}  // namespace tekton
}  // namespace pipelines
PROTOBUF_NAMESPACE_OPEN
template<> ::pipelines::tekton::v1alpha1::Params* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::Params>(Arena*);
template<> ::pipelines::tekton::v1alpha1::Pipeline* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::Pipeline>(Arena*);
template<> ::pipelines::tekton::v1alpha1::PipelineRun* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::PipelineRun>(Arena*);
template<> ::pipelines::tekton::v1alpha1::PipelineRunList* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::PipelineRunList>(Arena*);
template<> ::pipelines::tekton::v1alpha1::Pipeline_CommandsEntry_DoNotUse* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::Pipeline_CommandsEntry_DoNotUse>(Arena*);
template<> ::pipelines::tekton::v1alpha1::Pipeline_EnvironmentVariablesEntry_DoNotUse* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::Pipeline_EnvironmentVariablesEntry_DoNotUse>(Arena*);
template<> ::pipelines::tekton::v1alpha1::Pipeline_ExtraArgsEntry_DoNotUse* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::Pipeline_ExtraArgsEntry_DoNotUse>(Arena*);
template<> ::pipelines::tekton::v1alpha1::Pipeline_InstanceTypeEntry_DoNotUse* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::Pipeline_InstanceTypeEntry_DoNotUse>(Arena*);
template<> ::pipelines::tekton::v1alpha1::Pipeline_IntegrationEntry_DoNotUse* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::Pipeline_IntegrationEntry_DoNotUse>(Arena*);
template<> ::pipelines::tekton::v1alpha1::Pipeline_SecretsEntry_DoNotUse* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::Pipeline_SecretsEntry_DoNotUse>(Arena*);
template<> ::pipelines::tekton::v1alpha1::Task* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::Task>(Arena*);
template<> ::pipelines::tekton::v1alpha1::TaskParams* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::TaskParams>(Arena*);
template<> ::pipelines::tekton::v1alpha1::TaskParamsToCustomize* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::TaskParamsToCustomize>(Arena*);
template<> ::pipelines::tekton::v1alpha1::TaskRun* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::TaskRun>(Arena*);
template<> ::pipelines::tekton::v1alpha1::TaskRunStep* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::TaskRunStep>(Arena*);
template<> ::pipelines::tekton::v1alpha1::TaskToCustomize* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::TaskToCustomize>(Arena*);
template<> ::pipelines::tekton::v1alpha1::TektonTask* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::TektonTask>(Arena*);
template<> ::pipelines::tekton::v1alpha1::TektonTaskList* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::TektonTaskList>(Arena*);
template<> ::pipelines::tekton::v1alpha1::Workspaces* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::Workspaces>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pipelines {
namespace tekton {
namespace v1alpha1 {

// ===================================================================

class Params final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.Params) */ {
 public:
  inline Params() : Params(nullptr) {}
  ~Params() override;
  explicit constexpr Params(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Params(const Params& from);
  Params(Params&& from) noexcept
    : Params() {
    *this = ::std::move(from);
  }

  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  inline Params& operator=(Params&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Params& default_instance() {
    return *internal_default_instance();
  }
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
               &_Params_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Params& a, Params& b) {
    a.Swap(&b);
  }
  inline void Swap(Params* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Params* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Params* New() const final {
    return new Params();
  }

  Params* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Params>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Params& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Params& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Params* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.Params";
  }
  protected:
  explicit Params(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueArrayFieldNumber = 3,
    kNameFieldNumber = 1,
    kValueStringFieldNumber = 2,
    kValueTypeFieldNumber = 4,
  };
  // repeated string value_array = 3 [json_name = "valueArray"];
  int value_array_size() const;
  private:
  int _internal_value_array_size() const;
  public:
  void clear_value_array();
  const std::string& value_array(int index) const;
  std::string* mutable_value_array(int index);
  void set_value_array(int index, const std::string& value);
  void set_value_array(int index, std::string&& value);
  void set_value_array(int index, const char* value);
  void set_value_array(int index, const char* value, size_t size);
  std::string* add_value_array();
  void add_value_array(const std::string& value);
  void add_value_array(std::string&& value);
  void add_value_array(const char* value);
  void add_value_array(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value_array();
  private:
  const std::string& _internal_value_array(int index) const;
  std::string* _internal_add_value_array();
  public:

  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string value_string = 2 [json_name = "valueString"];
  void clear_value_string();
  const std::string& value_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_string();
  PROTOBUF_MUST_USE_RESULT std::string* release_value_string();
  void set_allocated_value_string(std::string* value_string);
  private:
  const std::string& _internal_value_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_string(const std::string& value);
  std::string* _internal_mutable_value_string();
  public:

  // string value_type = 4 [json_name = "valueType"];
  void clear_value_type();
  const std::string& value_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_value_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_value_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_value_type();
  void set_allocated_value_type(std::string* value_type);
  private:
  const std::string& _internal_value_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_value_type(const std::string& value);
  std::string* _internal_mutable_value_type();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.Params)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_array_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_string_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
};
// -------------------------------------------------------------------

class TaskParams final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.TaskParams) */ {
 public:
  inline TaskParams() : TaskParams(nullptr) {}
  ~TaskParams() override;
  explicit constexpr TaskParams(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskParams(const TaskParams& from);
  TaskParams(TaskParams&& from) noexcept
    : TaskParams() {
    *this = ::std::move(from);
  }

  inline TaskParams& operator=(const TaskParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskParams& operator=(TaskParams&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskParams& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskParams* internal_default_instance() {
    return reinterpret_cast<const TaskParams*>(
               &_TaskParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TaskParams& a, TaskParams& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskParams* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskParams* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskParams* New() const final {
    return new TaskParams();
  }

  TaskParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskParams>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskParams& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskParams& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.TaskParams";
  }
  protected:
  explicit TaskParams(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamValueArrayFieldNumber = 4,
    kParamNameFieldNumber = 1,
    kParamValueTypeFieldNumber = 2,
    kParamValueFieldNumber = 3,
    kDescriptionFieldNumber = 5,
    kDefaultFieldNumber = 6,
  };
  // repeated string param_value_array = 4 [json_name = "paramValueArray"];
  int param_value_array_size() const;
  private:
  int _internal_param_value_array_size() const;
  public:
  void clear_param_value_array();
  const std::string& param_value_array(int index) const;
  std::string* mutable_param_value_array(int index);
  void set_param_value_array(int index, const std::string& value);
  void set_param_value_array(int index, std::string&& value);
  void set_param_value_array(int index, const char* value);
  void set_param_value_array(int index, const char* value, size_t size);
  std::string* add_param_value_array();
  void add_param_value_array(const std::string& value);
  void add_param_value_array(std::string&& value);
  void add_param_value_array(const char* value);
  void add_param_value_array(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& param_value_array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_param_value_array();
  private:
  const std::string& _internal_param_value_array(int index) const;
  std::string* _internal_add_param_value_array();
  public:

  // string param_name = 1 [json_name = "paramName"];
  void clear_param_name();
  const std::string& param_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_param_name();
  void set_allocated_param_name(std::string* param_name);
  private:
  const std::string& _internal_param_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param_name(const std::string& value);
  std::string* _internal_mutable_param_name();
  public:

  // string param_value_type = 2 [json_name = "paramValueType"];
  void clear_param_value_type();
  const std::string& param_value_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param_value_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param_value_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_param_value_type();
  void set_allocated_param_value_type(std::string* param_value_type);
  private:
  const std::string& _internal_param_value_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param_value_type(const std::string& value);
  std::string* _internal_mutable_param_value_type();
  public:

  // string param_value = 3 [json_name = "paramValue"];
  void clear_param_value();
  const std::string& param_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_param_value();
  void set_allocated_param_value(std::string* param_value);
  private:
  const std::string& _internal_param_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param_value(const std::string& value);
  std::string* _internal_mutable_param_value();
  public:

  // string description = 5 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string default = 6 [json_name = "default"];
  void clear_default_();
  const std::string& default_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_();
  PROTOBUF_MUST_USE_RESULT std::string* release_default_();
  void set_allocated_default_(std::string* default_);
  private:
  const std::string& _internal_default_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_(const std::string& value);
  std::string* _internal_mutable_default_();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.TaskParams)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> param_value_array_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_value_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
};
// -------------------------------------------------------------------

class Workspaces final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.Workspaces) */ {
 public:
  inline Workspaces() : Workspaces(nullptr) {}
  ~Workspaces() override;
  explicit constexpr Workspaces(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Workspaces(const Workspaces& from);
  Workspaces(Workspaces&& from) noexcept
    : Workspaces() {
    *this = ::std::move(from);
  }

  inline Workspaces& operator=(const Workspaces& from) {
    CopyFrom(from);
    return *this;
  }
  inline Workspaces& operator=(Workspaces&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Workspaces& default_instance() {
    return *internal_default_instance();
  }
  static inline const Workspaces* internal_default_instance() {
    return reinterpret_cast<const Workspaces*>(
               &_Workspaces_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Workspaces& a, Workspaces& b) {
    a.Swap(&b);
  }
  inline void Swap(Workspaces* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Workspaces* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Workspaces* New() const final {
    return new Workspaces();
  }

  Workspaces* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Workspaces>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Workspaces& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Workspaces& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Workspaces* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.Workspaces";
  }
  protected:
  explicit Workspaces(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMainFieldNumber = 2,
    kTypeFieldNumber = 3,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string main = 2 [json_name = "main"];
  void clear_main();
  const std::string& main() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_main(ArgT0&& arg0, ArgT... args);
  std::string* mutable_main();
  PROTOBUF_MUST_USE_RESULT std::string* release_main();
  void set_allocated_main(std::string* main);
  private:
  const std::string& _internal_main() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_main(const std::string& value);
  std::string* _internal_mutable_main();
  public:

  // string type = 3 [json_name = "type"];
  void clear_type();
  const std::string& type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_type();
  void set_allocated_type(std::string* type);
  private:
  const std::string& _internal_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type(const std::string& value);
  std::string* _internal_mutable_type();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.Workspaces)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr main_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
};
// -------------------------------------------------------------------

class Task final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.Task) */ {
 public:
  inline Task() : Task(nullptr) {}
  ~Task() override;
  explicit constexpr Task(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Task(const Task& from);
  Task(Task&& from) noexcept
    : Task() {
    *this = ::std::move(from);
  }

  inline Task& operator=(const Task& from) {
    CopyFrom(from);
    return *this;
  }
  inline Task& operator=(Task&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Task& default_instance() {
    return *internal_default_instance();
  }
  static inline const Task* internal_default_instance() {
    return reinterpret_cast<const Task*>(
               &_Task_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Task& a, Task& b) {
    a.Swap(&b);
  }
  inline void Swap(Task* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Task* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Task* New() const final {
    return new Task();
  }

  Task* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Task>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Task& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Task& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Task* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.Task";
  }
  protected:
  explicit Task(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskRunAfterFieldNumber = 5,
    kWorkspacesFieldNumber = 6,
    kTaskParamsFieldNumber = 7,
    kIdFieldNumber = 1,
    kTaskNameFieldNumber = 2,
    kTaskRefNameFieldNumber = 3,
    kTaskKindFieldNumber = 4,
    kDescriptionFieldNumber = 8,
    kBeforeDeployFieldNumber = 9,
    kAfterDeployFieldNumber = 10,
  };
  // repeated string task_run_after = 5 [json_name = "taskRunAfter"];
  int task_run_after_size() const;
  private:
  int _internal_task_run_after_size() const;
  public:
  void clear_task_run_after();
  const std::string& task_run_after(int index) const;
  std::string* mutable_task_run_after(int index);
  void set_task_run_after(int index, const std::string& value);
  void set_task_run_after(int index, std::string&& value);
  void set_task_run_after(int index, const char* value);
  void set_task_run_after(int index, const char* value, size_t size);
  std::string* add_task_run_after();
  void add_task_run_after(const std::string& value);
  void add_task_run_after(std::string&& value);
  void add_task_run_after(const char* value);
  void add_task_run_after(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& task_run_after() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_task_run_after();
  private:
  const std::string& _internal_task_run_after(int index) const;
  std::string* _internal_add_task_run_after();
  public:

  // repeated .pipelines.tekton.v1alpha1.Workspaces workspaces = 6 [json_name = "workspaces"];
  int workspaces_size() const;
  private:
  int _internal_workspaces_size() const;
  public:
  void clear_workspaces();
  ::pipelines::tekton::v1alpha1::Workspaces* mutable_workspaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Workspaces >*
      mutable_workspaces();
  private:
  const ::pipelines::tekton::v1alpha1::Workspaces& _internal_workspaces(int index) const;
  ::pipelines::tekton::v1alpha1::Workspaces* _internal_add_workspaces();
  public:
  const ::pipelines::tekton::v1alpha1::Workspaces& workspaces(int index) const;
  ::pipelines::tekton::v1alpha1::Workspaces* add_workspaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Workspaces >&
      workspaces() const;

  // repeated .pipelines.tekton.v1alpha1.TaskParams task_params = 7 [json_name = "taskParams"];
  int task_params_size() const;
  private:
  int _internal_task_params_size() const;
  public:
  void clear_task_params();
  ::pipelines::tekton::v1alpha1::TaskParams* mutable_task_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskParams >*
      mutable_task_params();
  private:
  const ::pipelines::tekton::v1alpha1::TaskParams& _internal_task_params(int index) const;
  ::pipelines::tekton::v1alpha1::TaskParams* _internal_add_task_params();
  public:
  const ::pipelines::tekton::v1alpha1::TaskParams& task_params(int index) const;
  ::pipelines::tekton::v1alpha1::TaskParams* add_task_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskParams >&
      task_params() const;

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string task_name = 2 [json_name = "taskName"];
  void clear_task_name();
  const std::string& task_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_task_name();
  void set_allocated_task_name(std::string* task_name);
  private:
  const std::string& _internal_task_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_name(const std::string& value);
  std::string* _internal_mutable_task_name();
  public:

  // string task_ref_name = 3 [json_name = "taskRefName"];
  void clear_task_ref_name();
  const std::string& task_ref_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_ref_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_ref_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_task_ref_name();
  void set_allocated_task_ref_name(std::string* task_ref_name);
  private:
  const std::string& _internal_task_ref_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_ref_name(const std::string& value);
  std::string* _internal_mutable_task_ref_name();
  public:

  // string task_kind = 4 [json_name = "taskKind"];
  void clear_task_kind();
  const std::string& task_kind() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_kind(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_kind();
  PROTOBUF_MUST_USE_RESULT std::string* release_task_kind();
  void set_allocated_task_kind(std::string* task_kind);
  private:
  const std::string& _internal_task_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_kind(const std::string& value);
  std::string* _internal_mutable_task_kind();
  public:

  // string description = 8 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bool before_deploy = 9 [json_name = "beforeDeploy"];
  void clear_before_deploy();
  bool before_deploy() const;
  void set_before_deploy(bool value);
  private:
  bool _internal_before_deploy() const;
  void _internal_set_before_deploy(bool value);
  public:

  // bool after_deploy = 10 [json_name = "afterDeploy"];
  void clear_after_deploy();
  bool after_deploy() const;
  void set_after_deploy(bool value);
  private:
  bool _internal_after_deploy() const;
  void _internal_set_after_deploy(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.Task)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> task_run_after_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Workspaces > workspaces_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskParams > task_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_ref_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_kind_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  bool before_deploy_;
  bool after_deploy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
};
// -------------------------------------------------------------------

class Pipeline_IntegrationEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pipeline_IntegrationEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pipeline_IntegrationEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Pipeline_IntegrationEntry_DoNotUse();
  explicit constexpr Pipeline_IntegrationEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Pipeline_IntegrationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Pipeline_IntegrationEntry_DoNotUse& other);
  static const Pipeline_IntegrationEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Pipeline_IntegrationEntry_DoNotUse*>(&_Pipeline_IntegrationEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.tekton.v1alpha1.Pipeline.IntegrationEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.tekton.v1alpha1.Pipeline.IntegrationEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Pipeline_EnvironmentVariablesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pipeline_EnvironmentVariablesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pipeline_EnvironmentVariablesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Pipeline_EnvironmentVariablesEntry_DoNotUse();
  explicit constexpr Pipeline_EnvironmentVariablesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Pipeline_EnvironmentVariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Pipeline_EnvironmentVariablesEntry_DoNotUse& other);
  static const Pipeline_EnvironmentVariablesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Pipeline_EnvironmentVariablesEntry_DoNotUse*>(&_Pipeline_EnvironmentVariablesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.tekton.v1alpha1.Pipeline.EnvironmentVariablesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.tekton.v1alpha1.Pipeline.EnvironmentVariablesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Pipeline_CommandsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pipeline_CommandsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pipeline_CommandsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Pipeline_CommandsEntry_DoNotUse();
  explicit constexpr Pipeline_CommandsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Pipeline_CommandsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Pipeline_CommandsEntry_DoNotUse& other);
  static const Pipeline_CommandsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Pipeline_CommandsEntry_DoNotUse*>(&_Pipeline_CommandsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.tekton.v1alpha1.Pipeline.CommandsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.tekton.v1alpha1.Pipeline.CommandsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Pipeline_SecretsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pipeline_SecretsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pipeline_SecretsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Pipeline_SecretsEntry_DoNotUse();
  explicit constexpr Pipeline_SecretsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Pipeline_SecretsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Pipeline_SecretsEntry_DoNotUse& other);
  static const Pipeline_SecretsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Pipeline_SecretsEntry_DoNotUse*>(&_Pipeline_SecretsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.tekton.v1alpha1.Pipeline.SecretsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.tekton.v1alpha1.Pipeline.SecretsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Pipeline_ExtraArgsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pipeline_ExtraArgsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pipeline_ExtraArgsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Pipeline_ExtraArgsEntry_DoNotUse();
  explicit constexpr Pipeline_ExtraArgsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Pipeline_ExtraArgsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Pipeline_ExtraArgsEntry_DoNotUse& other);
  static const Pipeline_ExtraArgsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Pipeline_ExtraArgsEntry_DoNotUse*>(&_Pipeline_ExtraArgsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.tekton.v1alpha1.Pipeline.ExtraArgsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.tekton.v1alpha1.Pipeline.ExtraArgsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Pipeline_InstanceTypeEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pipeline_InstanceTypeEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Pipeline_InstanceTypeEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Pipeline_InstanceTypeEntry_DoNotUse();
  explicit constexpr Pipeline_InstanceTypeEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Pipeline_InstanceTypeEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Pipeline_InstanceTypeEntry_DoNotUse& other);
  static const Pipeline_InstanceTypeEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Pipeline_InstanceTypeEntry_DoNotUse*>(&_Pipeline_InstanceTypeEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.tekton.v1alpha1.Pipeline.InstanceTypeEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.tekton.v1alpha1.Pipeline.InstanceTypeEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Pipeline final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.Pipeline) */ {
 public:
  inline Pipeline() : Pipeline(nullptr) {}
  ~Pipeline() override;
  explicit constexpr Pipeline(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Pipeline(const Pipeline& from);
  Pipeline(Pipeline&& from) noexcept
    : Pipeline() {
    *this = ::std::move(from);
  }

  inline Pipeline& operator=(const Pipeline& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pipeline& operator=(Pipeline&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Pipeline& default_instance() {
    return *internal_default_instance();
  }
  static inline const Pipeline* internal_default_instance() {
    return reinterpret_cast<const Pipeline*>(
               &_Pipeline_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Pipeline& a, Pipeline& b) {
    a.Swap(&b);
  }
  inline void Swap(Pipeline* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pipeline* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pipeline* New() const final {
    return new Pipeline();
  }

  Pipeline* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pipeline>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Pipeline& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Pipeline& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pipeline* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.Pipeline";
  }
  protected:
  explicit Pipeline(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kParamsFieldNumber = 10,
    kTasksFieldNumber = 11,
    kIntegrationFieldNumber = 13,
    kEnvironmentVariablesFieldNumber = 14,
    kCommandsFieldNumber = 15,
    kSecretsFieldNumber = 16,
    kExtraArgsFieldNumber = 17,
    kInstanceTypeFieldNumber = 18,
    kBeforeDeployTasksFieldNumber = 22,
    kAfterDeployTasksFieldNumber = 23,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kOrganizationIdFieldNumber = 4,
    kProjectIdFieldNumber = 5,
    kNameProjectFieldNumber = 6,
    kEnvironmentIdFieldNumber = 7,
    kApplicationIdFieldNumber = 8,
    kRuntimeIdFieldNumber = 9,
    kStatusTypeFieldNumber = 12,
    kTrafficTypeFieldNumber = 3,
    kIsDefaultFieldNumber = 19,
    kActiveFieldNumber = 20,
    kCustomPipelineFieldNumber = 21,
    kIsNotExistDockerfileFieldNumber = 24,
  };
  // repeated .pipelines.tekton.v1alpha1.Params params = 10 [json_name = "params"];
  int params_size() const;
  private:
  int _internal_params_size() const;
  public:
  void clear_params();
  ::pipelines::tekton::v1alpha1::Params* mutable_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Params >*
      mutable_params();
  private:
  const ::pipelines::tekton::v1alpha1::Params& _internal_params(int index) const;
  ::pipelines::tekton::v1alpha1::Params* _internal_add_params();
  public:
  const ::pipelines::tekton::v1alpha1::Params& params(int index) const;
  ::pipelines::tekton::v1alpha1::Params* add_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Params >&
      params() const;

  // repeated .pipelines.tekton.v1alpha1.Task tasks = 11 [json_name = "tasks"];
  int tasks_size() const;
  private:
  int _internal_tasks_size() const;
  public:
  void clear_tasks();
  ::pipelines::tekton::v1alpha1::Task* mutable_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >*
      mutable_tasks();
  private:
  const ::pipelines::tekton::v1alpha1::Task& _internal_tasks(int index) const;
  ::pipelines::tekton::v1alpha1::Task* _internal_add_tasks();
  public:
  const ::pipelines::tekton::v1alpha1::Task& tasks(int index) const;
  ::pipelines::tekton::v1alpha1::Task* add_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >&
      tasks() const;

  // map<string, string> integration = 13 [json_name = "integration"];
  int integration_size() const;
  private:
  int _internal_integration_size() const;
  public:
  void clear_integration();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_integration() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_integration();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      integration() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_integration();

  // map<string, string> environment_variables = 14 [json_name = "environmentVariables"];
  int environment_variables_size() const;
  private:
  int _internal_environment_variables_size() const;
  public:
  void clear_environment_variables();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_environment_variables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_environment_variables();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      environment_variables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_environment_variables();

  // map<string, string> commands = 15 [json_name = "commands"];
  int commands_size() const;
  private:
  int _internal_commands_size() const;
  public:
  void clear_commands();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_commands() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_commands();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      commands() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_commands();

  // map<string, string> secrets = 16 [json_name = "secrets"];
  int secrets_size() const;
  private:
  int _internal_secrets_size() const;
  public:
  void clear_secrets();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_secrets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_secrets();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      secrets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_secrets();

  // map<string, string> extra_args = 17 [json_name = "extraArgs"];
  int extra_args_size() const;
  private:
  int _internal_extra_args_size() const;
  public:
  void clear_extra_args();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_extra_args() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_extra_args();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      extra_args() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_extra_args();

  // map<string, string> instance_type = 18 [json_name = "instanceType"];
  int instance_type_size() const;
  private:
  int _internal_instance_type_size() const;
  public:
  void clear_instance_type();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_instance_type() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_instance_type();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      instance_type() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_instance_type();

  // repeated .pipelines.tekton.v1alpha1.Task before_deploy_tasks = 22 [json_name = "beforeDeployTasks"];
  int before_deploy_tasks_size() const;
  private:
  int _internal_before_deploy_tasks_size() const;
  public:
  void clear_before_deploy_tasks();
  ::pipelines::tekton::v1alpha1::Task* mutable_before_deploy_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >*
      mutable_before_deploy_tasks();
  private:
  const ::pipelines::tekton::v1alpha1::Task& _internal_before_deploy_tasks(int index) const;
  ::pipelines::tekton::v1alpha1::Task* _internal_add_before_deploy_tasks();
  public:
  const ::pipelines::tekton::v1alpha1::Task& before_deploy_tasks(int index) const;
  ::pipelines::tekton::v1alpha1::Task* add_before_deploy_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >&
      before_deploy_tasks() const;

  // repeated .pipelines.tekton.v1alpha1.Task after_deploy_tasks = 23 [json_name = "afterDeployTasks"];
  int after_deploy_tasks_size() const;
  private:
  int _internal_after_deploy_tasks_size() const;
  public:
  void clear_after_deploy_tasks();
  ::pipelines::tekton::v1alpha1::Task* mutable_after_deploy_tasks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >*
      mutable_after_deploy_tasks();
  private:
  const ::pipelines::tekton::v1alpha1::Task& _internal_after_deploy_tasks(int index) const;
  ::pipelines::tekton::v1alpha1::Task* _internal_add_after_deploy_tasks();
  public:
  const ::pipelines::tekton::v1alpha1::Task& after_deploy_tasks(int index) const;
  ::pipelines::tekton::v1alpha1::Task* add_after_deploy_tasks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >&
      after_deploy_tasks() const;

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string organization_id = 4 [json_name = "organizationId"];
  void clear_organization_id();
  const std::string& organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_organization_id();
  void set_allocated_organization_id(std::string* organization_id);
  private:
  const std::string& _internal_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_id(const std::string& value);
  std::string* _internal_mutable_organization_id();
  public:

  // string project_id = 5 [json_name = "projectId"];
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // string name_project = 6 [json_name = "nameProject"];
  void clear_name_project();
  const std::string& name_project() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_project(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_project();
  PROTOBUF_MUST_USE_RESULT std::string* release_name_project();
  void set_allocated_name_project(std::string* name_project);
  private:
  const std::string& _internal_name_project() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_project(const std::string& value);
  std::string* _internal_mutable_name_project();
  public:

  // string environment_id = 7 [json_name = "environmentId"];
  void clear_environment_id();
  const std::string& environment_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_environment_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_environment_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_environment_id();
  void set_allocated_environment_id(std::string* environment_id);
  private:
  const std::string& _internal_environment_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_environment_id(const std::string& value);
  std::string* _internal_mutable_environment_id();
  public:

  // string application_id = 8 [json_name = "applicationId"];
  void clear_application_id();
  const std::string& application_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_application_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_application_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_application_id();
  void set_allocated_application_id(std::string* application_id);
  private:
  const std::string& _internal_application_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_id(const std::string& value);
  std::string* _internal_mutable_application_id();
  public:

  // string runtime_id = 9 [json_name = "runtimeId"];
  void clear_runtime_id();
  const std::string& runtime_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_runtime_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_runtime_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_runtime_id();
  void set_allocated_runtime_id(std::string* runtime_id);
  private:
  const std::string& _internal_runtime_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_runtime_id(const std::string& value);
  std::string* _internal_mutable_runtime_id();
  public:

  // string status_type = 12 [json_name = "statusType"];
  void clear_status_type();
  const std::string& status_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status_type();
  PROTOBUF_MUST_USE_RESULT std::string* release_status_type();
  void set_allocated_status_type(std::string* status_type);
  private:
  const std::string& _internal_status_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status_type(const std::string& value);
  std::string* _internal_mutable_status_type();
  public:

  // int32 traffic_type = 3 [json_name = "trafficType"];
  void clear_traffic_type();
  ::PROTOBUF_NAMESPACE_ID::int32 traffic_type() const;
  void set_traffic_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_traffic_type() const;
  void _internal_set_traffic_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_default = 19 [json_name = "isDefault"];
  void clear_is_default();
  bool is_default() const;
  void set_is_default(bool value);
  private:
  bool _internal_is_default() const;
  void _internal_set_is_default(bool value);
  public:

  // bool active = 20 [json_name = "active"];
  void clear_active();
  bool active() const;
  void set_active(bool value);
  private:
  bool _internal_active() const;
  void _internal_set_active(bool value);
  public:

  // bool custom_pipeline = 21 [json_name = "customPipeline"];
  void clear_custom_pipeline();
  bool custom_pipeline() const;
  void set_custom_pipeline(bool value);
  private:
  bool _internal_custom_pipeline() const;
  void _internal_set_custom_pipeline(bool value);
  public:

  // bool is_not_exist_dockerfile = 24 [json_name = "isNotExistDockerfile"];
  void clear_is_not_exist_dockerfile();
  bool is_not_exist_dockerfile() const;
  void set_is_not_exist_dockerfile(bool value);
  private:
  bool _internal_is_not_exist_dockerfile() const;
  void _internal_set_is_not_exist_dockerfile(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.Pipeline)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Params > params_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task > tasks_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Pipeline_IntegrationEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> integration_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Pipeline_EnvironmentVariablesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> environment_variables_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Pipeline_CommandsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> commands_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Pipeline_SecretsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> secrets_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Pipeline_ExtraArgsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> extra_args_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Pipeline_InstanceTypeEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> instance_type_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task > before_deploy_tasks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task > after_deploy_tasks_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_project_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr environment_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 traffic_type_;
  bool is_default_;
  bool active_;
  bool custom_pipeline_;
  bool is_not_exist_dockerfile_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
};
// -------------------------------------------------------------------

class TektonTask final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.TektonTask) */ {
 public:
  inline TektonTask() : TektonTask(nullptr) {}
  ~TektonTask() override;
  explicit constexpr TektonTask(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TektonTask(const TektonTask& from);
  TektonTask(TektonTask&& from) noexcept
    : TektonTask() {
    *this = ::std::move(from);
  }

  inline TektonTask& operator=(const TektonTask& from) {
    CopyFrom(from);
    return *this;
  }
  inline TektonTask& operator=(TektonTask&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TektonTask& default_instance() {
    return *internal_default_instance();
  }
  static inline const TektonTask* internal_default_instance() {
    return reinterpret_cast<const TektonTask*>(
               &_TektonTask_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TektonTask& a, TektonTask& b) {
    a.Swap(&b);
  }
  inline void Swap(TektonTask* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TektonTask* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TektonTask* New() const final {
    return new TektonTask();
  }

  TektonTask* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TektonTask>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TektonTask& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TektonTask& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TektonTask* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.TektonTask";
  }
  protected:
  explicit TektonTask(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskFieldNumber = 1,
    kOrderFieldNumber = 2,
  };
  // repeated .pipelines.tekton.v1alpha1.Task task = 1 [json_name = "task"];
  int task_size() const;
  private:
  int _internal_task_size() const;
  public:
  void clear_task();
  ::pipelines::tekton::v1alpha1::Task* mutable_task(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >*
      mutable_task();
  private:
  const ::pipelines::tekton::v1alpha1::Task& _internal_task(int index) const;
  ::pipelines::tekton::v1alpha1::Task* _internal_add_task();
  public:
  const ::pipelines::tekton::v1alpha1::Task& task(int index) const;
  ::pipelines::tekton::v1alpha1::Task* add_task();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >&
      task() const;

  // int32 order = 2 [json_name = "order"];
  void clear_order();
  ::PROTOBUF_NAMESPACE_ID::int32 order() const;
  void set_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_order() const;
  void _internal_set_order(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.TektonTask)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task > task_;
  ::PROTOBUF_NAMESPACE_ID::int32 order_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
};
// -------------------------------------------------------------------

class TektonTaskList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.TektonTaskList) */ {
 public:
  inline TektonTaskList() : TektonTaskList(nullptr) {}
  ~TektonTaskList() override;
  explicit constexpr TektonTaskList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TektonTaskList(const TektonTaskList& from);
  TektonTaskList(TektonTaskList&& from) noexcept
    : TektonTaskList() {
    *this = ::std::move(from);
  }

  inline TektonTaskList& operator=(const TektonTaskList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TektonTaskList& operator=(TektonTaskList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TektonTaskList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TektonTaskList* internal_default_instance() {
    return reinterpret_cast<const TektonTaskList*>(
               &_TektonTaskList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TektonTaskList& a, TektonTaskList& b) {
    a.Swap(&b);
  }
  inline void Swap(TektonTaskList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TektonTaskList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TektonTaskList* New() const final {
    return new TektonTaskList();
  }

  TektonTaskList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TektonTaskList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TektonTaskList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TektonTaskList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TektonTaskList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.TektonTaskList";
  }
  protected:
  explicit TektonTaskList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .pipelines.tekton.v1alpha1.TaskToCustomize items = 1 [json_name = "items"];
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::pipelines::tekton::v1alpha1::TaskToCustomize* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskToCustomize >*
      mutable_items();
  private:
  const ::pipelines::tekton::v1alpha1::TaskToCustomize& _internal_items(int index) const;
  ::pipelines::tekton::v1alpha1::TaskToCustomize* _internal_add_items();
  public:
  const ::pipelines::tekton::v1alpha1::TaskToCustomize& items(int index) const;
  ::pipelines::tekton::v1alpha1::TaskToCustomize* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskToCustomize >&
      items() const;

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.TektonTaskList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskToCustomize > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
};
// -------------------------------------------------------------------

class TaskToCustomize final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.TaskToCustomize) */ {
 public:
  inline TaskToCustomize() : TaskToCustomize(nullptr) {}
  ~TaskToCustomize() override;
  explicit constexpr TaskToCustomize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskToCustomize(const TaskToCustomize& from);
  TaskToCustomize(TaskToCustomize&& from) noexcept
    : TaskToCustomize() {
    *this = ::std::move(from);
  }

  inline TaskToCustomize& operator=(const TaskToCustomize& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskToCustomize& operator=(TaskToCustomize&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskToCustomize& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskToCustomize* internal_default_instance() {
    return reinterpret_cast<const TaskToCustomize*>(
               &_TaskToCustomize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TaskToCustomize& a, TaskToCustomize& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskToCustomize* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskToCustomize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskToCustomize* New() const final {
    return new TaskToCustomize();
  }

  TaskToCustomize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskToCustomize>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskToCustomize& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskToCustomize& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskToCustomize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.TaskToCustomize";
  }
  protected:
  explicit TaskToCustomize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskRunAfterFieldNumber = 4,
    kWorkspacesFieldNumber = 5,
    kTaskParamsFieldNumber = 6,
    kTaskNameFieldNumber = 1,
    kTaskRefNameFieldNumber = 2,
    kTaskKindFieldNumber = 3,
    kDescriptionFieldNumber = 7,
    kBeforeDeployFieldNumber = 8,
    kAfterDeployFieldNumber = 9,
  };
  // repeated string task_run_after = 4 [json_name = "taskRunAfter"];
  int task_run_after_size() const;
  private:
  int _internal_task_run_after_size() const;
  public:
  void clear_task_run_after();
  const std::string& task_run_after(int index) const;
  std::string* mutable_task_run_after(int index);
  void set_task_run_after(int index, const std::string& value);
  void set_task_run_after(int index, std::string&& value);
  void set_task_run_after(int index, const char* value);
  void set_task_run_after(int index, const char* value, size_t size);
  std::string* add_task_run_after();
  void add_task_run_after(const std::string& value);
  void add_task_run_after(std::string&& value);
  void add_task_run_after(const char* value);
  void add_task_run_after(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& task_run_after() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_task_run_after();
  private:
  const std::string& _internal_task_run_after(int index) const;
  std::string* _internal_add_task_run_after();
  public:

  // repeated .pipelines.tekton.v1alpha1.Workspaces workspaces = 5 [json_name = "workspaces"];
  int workspaces_size() const;
  private:
  int _internal_workspaces_size() const;
  public:
  void clear_workspaces();
  ::pipelines::tekton::v1alpha1::Workspaces* mutable_workspaces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Workspaces >*
      mutable_workspaces();
  private:
  const ::pipelines::tekton::v1alpha1::Workspaces& _internal_workspaces(int index) const;
  ::pipelines::tekton::v1alpha1::Workspaces* _internal_add_workspaces();
  public:
  const ::pipelines::tekton::v1alpha1::Workspaces& workspaces(int index) const;
  ::pipelines::tekton::v1alpha1::Workspaces* add_workspaces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Workspaces >&
      workspaces() const;

  // repeated .pipelines.tekton.v1alpha1.TaskParamsToCustomize task_params = 6 [json_name = "taskParams"];
  int task_params_size() const;
  private:
  int _internal_task_params_size() const;
  public:
  void clear_task_params();
  ::pipelines::tekton::v1alpha1::TaskParamsToCustomize* mutable_task_params(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskParamsToCustomize >*
      mutable_task_params();
  private:
  const ::pipelines::tekton::v1alpha1::TaskParamsToCustomize& _internal_task_params(int index) const;
  ::pipelines::tekton::v1alpha1::TaskParamsToCustomize* _internal_add_task_params();
  public:
  const ::pipelines::tekton::v1alpha1::TaskParamsToCustomize& task_params(int index) const;
  ::pipelines::tekton::v1alpha1::TaskParamsToCustomize* add_task_params();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskParamsToCustomize >&
      task_params() const;

  // string task_name = 1 [json_name = "taskName"];
  void clear_task_name();
  const std::string& task_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_task_name();
  void set_allocated_task_name(std::string* task_name);
  private:
  const std::string& _internal_task_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_name(const std::string& value);
  std::string* _internal_mutable_task_name();
  public:

  // string task_ref_name = 2 [json_name = "taskRefName"];
  void clear_task_ref_name();
  const std::string& task_ref_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_ref_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_ref_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_task_ref_name();
  void set_allocated_task_ref_name(std::string* task_ref_name);
  private:
  const std::string& _internal_task_ref_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_ref_name(const std::string& value);
  std::string* _internal_mutable_task_ref_name();
  public:

  // string task_kind = 3 [json_name = "taskKind"];
  void clear_task_kind();
  const std::string& task_kind() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_kind(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_kind();
  PROTOBUF_MUST_USE_RESULT std::string* release_task_kind();
  void set_allocated_task_kind(std::string* task_kind);
  private:
  const std::string& _internal_task_kind() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_kind(const std::string& value);
  std::string* _internal_mutable_task_kind();
  public:

  // string description = 7 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // bool before_deploy = 8 [json_name = "beforeDeploy"];
  void clear_before_deploy();
  bool before_deploy() const;
  void set_before_deploy(bool value);
  private:
  bool _internal_before_deploy() const;
  void _internal_set_before_deploy(bool value);
  public:

  // bool after_deploy = 9 [json_name = "afterDeploy"];
  void clear_after_deploy();
  bool after_deploy() const;
  void set_after_deploy(bool value);
  private:
  bool _internal_after_deploy() const;
  void _internal_set_after_deploy(bool value);
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.TaskToCustomize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> task_run_after_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Workspaces > workspaces_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskParamsToCustomize > task_params_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_ref_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_kind_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  bool before_deploy_;
  bool after_deploy_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
};
// -------------------------------------------------------------------

class TaskParamsToCustomize final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.TaskParamsToCustomize) */ {
 public:
  inline TaskParamsToCustomize() : TaskParamsToCustomize(nullptr) {}
  ~TaskParamsToCustomize() override;
  explicit constexpr TaskParamsToCustomize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskParamsToCustomize(const TaskParamsToCustomize& from);
  TaskParamsToCustomize(TaskParamsToCustomize&& from) noexcept
    : TaskParamsToCustomize() {
    *this = ::std::move(from);
  }

  inline TaskParamsToCustomize& operator=(const TaskParamsToCustomize& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskParamsToCustomize& operator=(TaskParamsToCustomize&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskParamsToCustomize& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskParamsToCustomize* internal_default_instance() {
    return reinterpret_cast<const TaskParamsToCustomize*>(
               &_TaskParamsToCustomize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TaskParamsToCustomize& a, TaskParamsToCustomize& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskParamsToCustomize* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskParamsToCustomize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskParamsToCustomize* New() const final {
    return new TaskParamsToCustomize();
  }

  TaskParamsToCustomize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskParamsToCustomize>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskParamsToCustomize& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskParamsToCustomize& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskParamsToCustomize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.TaskParamsToCustomize";
  }
  protected:
  explicit TaskParamsToCustomize(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamNameFieldNumber = 1,
    kLabelFieldNumber = 2,
    kValidationFieldNumber = 3,
    kTypeValueFieldNumber = 4,
    kDescriptionFieldNumber = 5,
    kDefaultFieldNumber = 6,
  };
  // string param_name = 1 [json_name = "paramName"];
  void clear_param_name();
  const std::string& param_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_param_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_param_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_param_name();
  void set_allocated_param_name(std::string* param_name);
  private:
  const std::string& _internal_param_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_param_name(const std::string& value);
  std::string* _internal_mutable_param_name();
  public:

  // string label = 2 [json_name = "label"];
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_MUST_USE_RESULT std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string validation = 3 [json_name = "validation"];
  void clear_validation();
  const std::string& validation() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_validation(ArgT0&& arg0, ArgT... args);
  std::string* mutable_validation();
  PROTOBUF_MUST_USE_RESULT std::string* release_validation();
  void set_allocated_validation(std::string* validation);
  private:
  const std::string& _internal_validation() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_validation(const std::string& value);
  std::string* _internal_mutable_validation();
  public:

  // string type_value = 4 [json_name = "typeValue"];
  void clear_type_value();
  const std::string& type_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_type_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_type_value();
  PROTOBUF_MUST_USE_RESULT std::string* release_type_value();
  void set_allocated_type_value(std::string* type_value);
  private:
  const std::string& _internal_type_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_type_value(const std::string& value);
  std::string* _internal_mutable_type_value();
  public:

  // string description = 5 [json_name = "description"];
  void clear_description();
  const std::string& description() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_description(ArgT0&& arg0, ArgT... args);
  std::string* mutable_description();
  PROTOBUF_MUST_USE_RESULT std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string default = 6 [json_name = "default"];
  void clear_default_();
  const std::string& default_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_default_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_default_();
  PROTOBUF_MUST_USE_RESULT std::string* release_default_();
  void set_allocated_default_(std::string* default_);
  private:
  const std::string& _internal_default_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_default_(const std::string& value);
  std::string* _internal_mutable_default_();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.TaskParamsToCustomize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr validation_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr type_value_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr default__;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
};
// -------------------------------------------------------------------

class PipelineRun final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.PipelineRun) */ {
 public:
  inline PipelineRun() : PipelineRun(nullptr) {}
  ~PipelineRun() override;
  explicit constexpr PipelineRun(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PipelineRun(const PipelineRun& from);
  PipelineRun(PipelineRun&& from) noexcept
    : PipelineRun() {
    *this = ::std::move(from);
  }

  inline PipelineRun& operator=(const PipelineRun& from) {
    CopyFrom(from);
    return *this;
  }
  inline PipelineRun& operator=(PipelineRun&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PipelineRun& default_instance() {
    return *internal_default_instance();
  }
  static inline const PipelineRun* internal_default_instance() {
    return reinterpret_cast<const PipelineRun*>(
               &_PipelineRun_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(PipelineRun& a, PipelineRun& b) {
    a.Swap(&b);
  }
  inline void Swap(PipelineRun* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PipelineRun* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PipelineRun* New() const final {
    return new PipelineRun();
  }

  PipelineRun* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PipelineRun>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PipelineRun& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PipelineRun& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PipelineRun* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.PipelineRun";
  }
  protected:
  explicit PipelineRun(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskRunFieldNumber = 10,
    kNameFieldNumber = 1,
    kLabelFieldNumber = 2,
    kNamespaceFieldNumber = 3,
    kMessageFieldNumber = 4,
    kReasonFieldNumber = 5,
    kStartedAtFieldNumber = 6,
    kFinishedAtFieldNumber = 7,
    kDurationFieldNumber = 8,
    kPipelineRunStatusFieldNumber = 9,
  };
  // repeated .pipelines.tekton.v1alpha1.TaskRun task_run = 10 [json_name = "taskRun"];
  int task_run_size() const;
  private:
  int _internal_task_run_size() const;
  public:
  void clear_task_run();
  ::pipelines::tekton::v1alpha1::TaskRun* mutable_task_run(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskRun >*
      mutable_task_run();
  private:
  const ::pipelines::tekton::v1alpha1::TaskRun& _internal_task_run(int index) const;
  ::pipelines::tekton::v1alpha1::TaskRun* _internal_add_task_run();
  public:
  const ::pipelines::tekton::v1alpha1::TaskRun& task_run(int index) const;
  ::pipelines::tekton::v1alpha1::TaskRun* add_task_run();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskRun >&
      task_run() const;

  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string label = 2 [json_name = "label"];
  void clear_label();
  const std::string& label() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_label(ArgT0&& arg0, ArgT... args);
  std::string* mutable_label();
  PROTOBUF_MUST_USE_RESULT std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string namespace = 3 [json_name = "namespace"];
  void clear_namespace_();
  const std::string& namespace_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_namespace_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_namespace_();
  PROTOBUF_MUST_USE_RESULT std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string message = 4 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string reason = 5 [json_name = "reason"];
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_MUST_USE_RESULT std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // string started_at = 6 [json_name = "startedAt"];
  void clear_started_at();
  const std::string& started_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_started_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_started_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_started_at();
  void set_allocated_started_at(std::string* started_at);
  private:
  const std::string& _internal_started_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_started_at(const std::string& value);
  std::string* _internal_mutable_started_at();
  public:

  // string finished_at = 7 [json_name = "finishedAt"];
  void clear_finished_at();
  const std::string& finished_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_finished_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_finished_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_finished_at();
  void set_allocated_finished_at(std::string* finished_at);
  private:
  const std::string& _internal_finished_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_finished_at(const std::string& value);
  std::string* _internal_mutable_finished_at();
  public:

  // string duration = 8 [json_name = "duration"];
  void clear_duration();
  const std::string& duration() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_duration(ArgT0&& arg0, ArgT... args);
  std::string* mutable_duration();
  PROTOBUF_MUST_USE_RESULT std::string* release_duration();
  void set_allocated_duration(std::string* duration);
  private:
  const std::string& _internal_duration() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_duration(const std::string& value);
  std::string* _internal_mutable_duration();
  public:

  // string pipeline_run_status = 9 [json_name = "pipelineRunStatus"];
  void clear_pipeline_run_status();
  const std::string& pipeline_run_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pipeline_run_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pipeline_run_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_pipeline_run_status();
  void set_allocated_pipeline_run_status(std::string* pipeline_run_status);
  private:
  const std::string& _internal_pipeline_run_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pipeline_run_status(const std::string& value);
  std::string* _internal_mutable_pipeline_run_status();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.PipelineRun)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskRun > task_run_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr started_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr finished_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr duration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pipeline_run_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
};
// -------------------------------------------------------------------

class PipelineRunList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.PipelineRunList) */ {
 public:
  inline PipelineRunList() : PipelineRunList(nullptr) {}
  ~PipelineRunList() override;
  explicit constexpr PipelineRunList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PipelineRunList(const PipelineRunList& from);
  PipelineRunList(PipelineRunList&& from) noexcept
    : PipelineRunList() {
    *this = ::std::move(from);
  }

  inline PipelineRunList& operator=(const PipelineRunList& from) {
    CopyFrom(from);
    return *this;
  }
  inline PipelineRunList& operator=(PipelineRunList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PipelineRunList& default_instance() {
    return *internal_default_instance();
  }
  static inline const PipelineRunList* internal_default_instance() {
    return reinterpret_cast<const PipelineRunList*>(
               &_PipelineRunList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PipelineRunList& a, PipelineRunList& b) {
    a.Swap(&b);
  }
  inline void Swap(PipelineRunList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PipelineRunList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PipelineRunList* New() const final {
    return new PipelineRunList();
  }

  PipelineRunList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PipelineRunList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const PipelineRunList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const PipelineRunList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PipelineRunList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.PipelineRunList";
  }
  protected:
  explicit PipelineRunList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .pipelines.tekton.v1alpha1.PipelineRun items = 1 [json_name = "items"];
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::pipelines::tekton::v1alpha1::PipelineRun* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::PipelineRun >*
      mutable_items();
  private:
  const ::pipelines::tekton::v1alpha1::PipelineRun& _internal_items(int index) const;
  ::pipelines::tekton::v1alpha1::PipelineRun* _internal_add_items();
  public:
  const ::pipelines::tekton::v1alpha1::PipelineRun& items(int index) const;
  ::pipelines::tekton::v1alpha1::PipelineRun* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::PipelineRun >&
      items() const;

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.PipelineRunList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::PipelineRun > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
};
// -------------------------------------------------------------------

class TaskRun final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.TaskRun) */ {
 public:
  inline TaskRun() : TaskRun(nullptr) {}
  ~TaskRun() override;
  explicit constexpr TaskRun(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskRun(const TaskRun& from);
  TaskRun(TaskRun&& from) noexcept
    : TaskRun() {
    *this = ::std::move(from);
  }

  inline TaskRun& operator=(const TaskRun& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskRun& operator=(TaskRun&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskRun& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskRun* internal_default_instance() {
    return reinterpret_cast<const TaskRun*>(
               &_TaskRun_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TaskRun& a, TaskRun& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskRun* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskRun* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskRun* New() const final {
    return new TaskRun();
  }

  TaskRun* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskRun>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskRun& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskRun& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskRun* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.TaskRun";
  }
  protected:
  explicit TaskRun(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskRunFieldNumber = 8,
    kNameFieldNumber = 1,
    kMessageFieldNumber = 2,
    kReasonFieldNumber = 3,
    kStartedAtFieldNumber = 4,
    kFinishedAtFieldNumber = 5,
    kDurationFieldNumber = 6,
    kTaskRunStatusFieldNumber = 7,
  };
  // repeated .pipelines.tekton.v1alpha1.TaskRunStep task_run = 8 [json_name = "taskRun"];
  int task_run_size() const;
  private:
  int _internal_task_run_size() const;
  public:
  void clear_task_run();
  ::pipelines::tekton::v1alpha1::TaskRunStep* mutable_task_run(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskRunStep >*
      mutable_task_run();
  private:
  const ::pipelines::tekton::v1alpha1::TaskRunStep& _internal_task_run(int index) const;
  ::pipelines::tekton::v1alpha1::TaskRunStep* _internal_add_task_run();
  public:
  const ::pipelines::tekton::v1alpha1::TaskRunStep& task_run(int index) const;
  ::pipelines::tekton::v1alpha1::TaskRunStep* add_task_run();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskRunStep >&
      task_run() const;

  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string reason = 3 [json_name = "reason"];
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_MUST_USE_RESULT std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // string started_at = 4 [json_name = "startedAt"];
  void clear_started_at();
  const std::string& started_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_started_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_started_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_started_at();
  void set_allocated_started_at(std::string* started_at);
  private:
  const std::string& _internal_started_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_started_at(const std::string& value);
  std::string* _internal_mutable_started_at();
  public:

  // string finished_at = 5 [json_name = "finishedAt"];
  void clear_finished_at();
  const std::string& finished_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_finished_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_finished_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_finished_at();
  void set_allocated_finished_at(std::string* finished_at);
  private:
  const std::string& _internal_finished_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_finished_at(const std::string& value);
  std::string* _internal_mutable_finished_at();
  public:

  // string duration = 6 [json_name = "duration"];
  void clear_duration();
  const std::string& duration() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_duration(ArgT0&& arg0, ArgT... args);
  std::string* mutable_duration();
  PROTOBUF_MUST_USE_RESULT std::string* release_duration();
  void set_allocated_duration(std::string* duration);
  private:
  const std::string& _internal_duration() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_duration(const std::string& value);
  std::string* _internal_mutable_duration();
  public:

  // string task_run_status = 7 [json_name = "taskRunStatus"];
  void clear_task_run_status();
  const std::string& task_run_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_run_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_run_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_task_run_status();
  void set_allocated_task_run_status(std::string* task_run_status);
  private:
  const std::string& _internal_task_run_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_run_status(const std::string& value);
  std::string* _internal_mutable_task_run_status();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.TaskRun)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskRunStep > task_run_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr started_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr finished_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr duration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_run_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
};
// -------------------------------------------------------------------

class TaskRunStep final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.TaskRunStep) */ {
 public:
  inline TaskRunStep() : TaskRunStep(nullptr) {}
  ~TaskRunStep() override;
  explicit constexpr TaskRunStep(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TaskRunStep(const TaskRunStep& from);
  TaskRunStep(TaskRunStep&& from) noexcept
    : TaskRunStep() {
    *this = ::std::move(from);
  }

  inline TaskRunStep& operator=(const TaskRunStep& from) {
    CopyFrom(from);
    return *this;
  }
  inline TaskRunStep& operator=(TaskRunStep&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TaskRunStep& default_instance() {
    return *internal_default_instance();
  }
  static inline const TaskRunStep* internal_default_instance() {
    return reinterpret_cast<const TaskRunStep*>(
               &_TaskRunStep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(TaskRunStep& a, TaskRunStep& b) {
    a.Swap(&b);
  }
  inline void Swap(TaskRunStep* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TaskRunStep* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TaskRunStep* New() const final {
    return new TaskRunStep();
  }

  TaskRunStep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TaskRunStep>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TaskRunStep& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const TaskRunStep& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskRunStep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.TaskRunStep";
  }
  protected:
  explicit TaskRunStep(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kMessageFieldNumber = 2,
    kReasonFieldNumber = 3,
    kStartedAtFieldNumber = 4,
    kFinishedAtFieldNumber = 5,
    kDurationFieldNumber = 6,
    kTaskRunStepStatusFieldNumber = 7,
  };
  // string name = 1 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string message = 2 [json_name = "message"];
  void clear_message();
  const std::string& message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_message();
  void set_allocated_message(std::string* message);
  private:
  const std::string& _internal_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // string reason = 3 [json_name = "reason"];
  void clear_reason();
  const std::string& reason() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reason(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reason();
  PROTOBUF_MUST_USE_RESULT std::string* release_reason();
  void set_allocated_reason(std::string* reason);
  private:
  const std::string& _internal_reason() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reason(const std::string& value);
  std::string* _internal_mutable_reason();
  public:

  // string started_at = 4 [json_name = "startedAt"];
  void clear_started_at();
  const std::string& started_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_started_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_started_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_started_at();
  void set_allocated_started_at(std::string* started_at);
  private:
  const std::string& _internal_started_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_started_at(const std::string& value);
  std::string* _internal_mutable_started_at();
  public:

  // string finished_at = 5 [json_name = "finishedAt"];
  void clear_finished_at();
  const std::string& finished_at() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_finished_at(ArgT0&& arg0, ArgT... args);
  std::string* mutable_finished_at();
  PROTOBUF_MUST_USE_RESULT std::string* release_finished_at();
  void set_allocated_finished_at(std::string* finished_at);
  private:
  const std::string& _internal_finished_at() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_finished_at(const std::string& value);
  std::string* _internal_mutable_finished_at();
  public:

  // string duration = 6 [json_name = "duration"];
  void clear_duration();
  const std::string& duration() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_duration(ArgT0&& arg0, ArgT... args);
  std::string* mutable_duration();
  PROTOBUF_MUST_USE_RESULT std::string* release_duration();
  void set_allocated_duration(std::string* duration);
  private:
  const std::string& _internal_duration() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_duration(const std::string& value);
  std::string* _internal_mutable_duration();
  public:

  // string task_run_step_status = 7 [json_name = "taskRunStepStatus"];
  void clear_task_run_step_status();
  const std::string& task_run_step_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_run_step_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_run_step_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_task_run_step_status();
  void set_allocated_task_run_step_status(std::string* task_run_step_status);
  private:
  const std::string& _internal_task_run_step_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_run_step_status(const std::string& value);
  std::string* _internal_mutable_task_run_step_status();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.TaskRunStep)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reason_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr started_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr finished_at_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr duration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_run_step_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Params

// string name = 1 [json_name = "name"];
inline void Params::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Params::name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Params.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Params::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Params.name)
}
inline std::string* Params::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Params.name)
  return _s;
}
inline const std::string& Params::_internal_name() const {
  return name_.Get();
}
inline void Params::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Params::release_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Params.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Params::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Params.name)
}

// string value_string = 2 [json_name = "valueString"];
inline void Params::clear_value_string() {
  value_string_.ClearToEmpty();
}
inline const std::string& Params::value_string() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Params.value_string)
  return _internal_value_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Params::set_value_string(ArgT0&& arg0, ArgT... args) {
 
 value_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Params.value_string)
}
inline std::string* Params::mutable_value_string() {
  std::string* _s = _internal_mutable_value_string();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Params.value_string)
  return _s;
}
inline const std::string& Params::_internal_value_string() const {
  return value_string_.Get();
}
inline void Params::_internal_set_value_string(const std::string& value) {
  
  value_string_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_value_string() {
  
  return value_string_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Params::release_value_string() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Params.value_string)
  return value_string_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Params::set_allocated_value_string(std::string* value_string) {
  if (value_string != nullptr) {
    
  } else {
    
  }
  value_string_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_string,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Params.value_string)
}

// repeated string value_array = 3 [json_name = "valueArray"];
inline int Params::_internal_value_array_size() const {
  return value_array_.size();
}
inline int Params::value_array_size() const {
  return _internal_value_array_size();
}
inline void Params::clear_value_array() {
  value_array_.Clear();
}
inline std::string* Params::add_value_array() {
  std::string* _s = _internal_add_value_array();
  // @@protoc_insertion_point(field_add_mutable:pipelines.tekton.v1alpha1.Params.value_array)
  return _s;
}
inline const std::string& Params::_internal_value_array(int index) const {
  return value_array_.Get(index);
}
inline const std::string& Params::value_array(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Params.value_array)
  return _internal_value_array(index);
}
inline std::string* Params::mutable_value_array(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Params.value_array)
  return value_array_.Mutable(index);
}
inline void Params::set_value_array(int index, const std::string& value) {
  value_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Params.value_array)
}
inline void Params::set_value_array(int index, std::string&& value) {
  value_array_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Params.value_array)
}
inline void Params::set_value_array(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pipelines.tekton.v1alpha1.Params.value_array)
}
inline void Params::set_value_array(int index, const char* value, size_t size) {
  value_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pipelines.tekton.v1alpha1.Params.value_array)
}
inline std::string* Params::_internal_add_value_array() {
  return value_array_.Add();
}
inline void Params::add_value_array(const std::string& value) {
  value_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.Params.value_array)
}
inline void Params::add_value_array(std::string&& value) {
  value_array_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.Params.value_array)
}
inline void Params::add_value_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pipelines.tekton.v1alpha1.Params.value_array)
}
inline void Params::add_value_array(const char* value, size_t size) {
  value_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pipelines.tekton.v1alpha1.Params.value_array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Params::value_array() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.Params.value_array)
  return value_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Params::mutable_value_array() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.Params.value_array)
  return &value_array_;
}

// string value_type = 4 [json_name = "valueType"];
inline void Params::clear_value_type() {
  value_type_.ClearToEmpty();
}
inline const std::string& Params::value_type() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Params.value_type)
  return _internal_value_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Params::set_value_type(ArgT0&& arg0, ArgT... args) {
 
 value_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Params.value_type)
}
inline std::string* Params::mutable_value_type() {
  std::string* _s = _internal_mutable_value_type();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Params.value_type)
  return _s;
}
inline const std::string& Params::_internal_value_type() const {
  return value_type_.Get();
}
inline void Params::_internal_set_value_type(const std::string& value) {
  
  value_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Params::_internal_mutable_value_type() {
  
  return value_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Params::release_value_type() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Params.value_type)
  return value_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Params::set_allocated_value_type(std::string* value_type) {
  if (value_type != nullptr) {
    
  } else {
    
  }
  value_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Params.value_type)
}

// -------------------------------------------------------------------

// TaskParams

// string param_name = 1 [json_name = "paramName"];
inline void TaskParams::clear_param_name() {
  param_name_.ClearToEmpty();
}
inline const std::string& TaskParams::param_name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskParams.param_name)
  return _internal_param_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskParams::set_param_name(ArgT0&& arg0, ArgT... args) {
 
 param_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskParams.param_name)
}
inline std::string* TaskParams::mutable_param_name() {
  std::string* _s = _internal_mutable_param_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskParams.param_name)
  return _s;
}
inline const std::string& TaskParams::_internal_param_name() const {
  return param_name_.Get();
}
inline void TaskParams::_internal_set_param_name(const std::string& value) {
  
  param_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskParams::_internal_mutable_param_name() {
  
  return param_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskParams::release_param_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskParams.param_name)
  return param_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskParams::set_allocated_param_name(std::string* param_name) {
  if (param_name != nullptr) {
    
  } else {
    
  }
  param_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskParams.param_name)
}

// string param_value_type = 2 [json_name = "paramValueType"];
inline void TaskParams::clear_param_value_type() {
  param_value_type_.ClearToEmpty();
}
inline const std::string& TaskParams::param_value_type() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskParams.param_value_type)
  return _internal_param_value_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskParams::set_param_value_type(ArgT0&& arg0, ArgT... args) {
 
 param_value_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskParams.param_value_type)
}
inline std::string* TaskParams::mutable_param_value_type() {
  std::string* _s = _internal_mutable_param_value_type();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskParams.param_value_type)
  return _s;
}
inline const std::string& TaskParams::_internal_param_value_type() const {
  return param_value_type_.Get();
}
inline void TaskParams::_internal_set_param_value_type(const std::string& value) {
  
  param_value_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskParams::_internal_mutable_param_value_type() {
  
  return param_value_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskParams::release_param_value_type() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskParams.param_value_type)
  return param_value_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskParams::set_allocated_param_value_type(std::string* param_value_type) {
  if (param_value_type != nullptr) {
    
  } else {
    
  }
  param_value_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param_value_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskParams.param_value_type)
}

// string param_value = 3 [json_name = "paramValue"];
inline void TaskParams::clear_param_value() {
  param_value_.ClearToEmpty();
}
inline const std::string& TaskParams::param_value() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskParams.param_value)
  return _internal_param_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskParams::set_param_value(ArgT0&& arg0, ArgT... args) {
 
 param_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskParams.param_value)
}
inline std::string* TaskParams::mutable_param_value() {
  std::string* _s = _internal_mutable_param_value();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskParams.param_value)
  return _s;
}
inline const std::string& TaskParams::_internal_param_value() const {
  return param_value_.Get();
}
inline void TaskParams::_internal_set_param_value(const std::string& value) {
  
  param_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskParams::_internal_mutable_param_value() {
  
  return param_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskParams::release_param_value() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskParams.param_value)
  return param_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskParams::set_allocated_param_value(std::string* param_value) {
  if (param_value != nullptr) {
    
  } else {
    
  }
  param_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param_value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskParams.param_value)
}

// repeated string param_value_array = 4 [json_name = "paramValueArray"];
inline int TaskParams::_internal_param_value_array_size() const {
  return param_value_array_.size();
}
inline int TaskParams::param_value_array_size() const {
  return _internal_param_value_array_size();
}
inline void TaskParams::clear_param_value_array() {
  param_value_array_.Clear();
}
inline std::string* TaskParams::add_param_value_array() {
  std::string* _s = _internal_add_param_value_array();
  // @@protoc_insertion_point(field_add_mutable:pipelines.tekton.v1alpha1.TaskParams.param_value_array)
  return _s;
}
inline const std::string& TaskParams::_internal_param_value_array(int index) const {
  return param_value_array_.Get(index);
}
inline const std::string& TaskParams::param_value_array(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskParams.param_value_array)
  return _internal_param_value_array(index);
}
inline std::string* TaskParams::mutable_param_value_array(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskParams.param_value_array)
  return param_value_array_.Mutable(index);
}
inline void TaskParams::set_param_value_array(int index, const std::string& value) {
  param_value_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskParams.param_value_array)
}
inline void TaskParams::set_param_value_array(int index, std::string&& value) {
  param_value_array_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskParams.param_value_array)
}
inline void TaskParams::set_param_value_array(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  param_value_array_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pipelines.tekton.v1alpha1.TaskParams.param_value_array)
}
inline void TaskParams::set_param_value_array(int index, const char* value, size_t size) {
  param_value_array_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pipelines.tekton.v1alpha1.TaskParams.param_value_array)
}
inline std::string* TaskParams::_internal_add_param_value_array() {
  return param_value_array_.Add();
}
inline void TaskParams::add_param_value_array(const std::string& value) {
  param_value_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.TaskParams.param_value_array)
}
inline void TaskParams::add_param_value_array(std::string&& value) {
  param_value_array_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.TaskParams.param_value_array)
}
inline void TaskParams::add_param_value_array(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  param_value_array_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pipelines.tekton.v1alpha1.TaskParams.param_value_array)
}
inline void TaskParams::add_param_value_array(const char* value, size_t size) {
  param_value_array_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pipelines.tekton.v1alpha1.TaskParams.param_value_array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TaskParams::param_value_array() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.TaskParams.param_value_array)
  return param_value_array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TaskParams::mutable_param_value_array() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.TaskParams.param_value_array)
  return &param_value_array_;
}

// string description = 5 [json_name = "description"];
inline void TaskParams::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& TaskParams::description() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskParams.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskParams::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskParams.description)
}
inline std::string* TaskParams::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskParams.description)
  return _s;
}
inline const std::string& TaskParams::_internal_description() const {
  return description_.Get();
}
inline void TaskParams::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskParams::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskParams::release_description() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskParams.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskParams::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskParams.description)
}

// string default = 6 [json_name = "default"];
inline void TaskParams::clear_default_() {
  default__.ClearToEmpty();
}
inline const std::string& TaskParams::default_() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskParams.default)
  return _internal_default_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskParams::set_default_(ArgT0&& arg0, ArgT... args) {
 
 default__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskParams.default)
}
inline std::string* TaskParams::mutable_default_() {
  std::string* _s = _internal_mutable_default_();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskParams.default)
  return _s;
}
inline const std::string& TaskParams::_internal_default_() const {
  return default__.Get();
}
inline void TaskParams::_internal_set_default_(const std::string& value) {
  
  default__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskParams::_internal_mutable_default_() {
  
  return default__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskParams::release_default_() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskParams.default)
  return default__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskParams::set_allocated_default_(std::string* default_) {
  if (default_ != nullptr) {
    
  } else {
    
  }
  default__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskParams.default)
}

// -------------------------------------------------------------------

// Workspaces

// string name = 1 [json_name = "name"];
inline void Workspaces::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Workspaces::name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Workspaces.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Workspaces::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Workspaces.name)
}
inline std::string* Workspaces::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Workspaces.name)
  return _s;
}
inline const std::string& Workspaces::_internal_name() const {
  return name_.Get();
}
inline void Workspaces::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Workspaces::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Workspaces::release_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Workspaces.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Workspaces::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Workspaces.name)
}

// string main = 2 [json_name = "main"];
inline void Workspaces::clear_main() {
  main_.ClearToEmpty();
}
inline const std::string& Workspaces::main() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Workspaces.main)
  return _internal_main();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Workspaces::set_main(ArgT0&& arg0, ArgT... args) {
 
 main_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Workspaces.main)
}
inline std::string* Workspaces::mutable_main() {
  std::string* _s = _internal_mutable_main();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Workspaces.main)
  return _s;
}
inline const std::string& Workspaces::_internal_main() const {
  return main_.Get();
}
inline void Workspaces::_internal_set_main(const std::string& value) {
  
  main_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Workspaces::_internal_mutable_main() {
  
  return main_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Workspaces::release_main() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Workspaces.main)
  return main_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Workspaces::set_allocated_main(std::string* main) {
  if (main != nullptr) {
    
  } else {
    
  }
  main_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), main,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Workspaces.main)
}

// string type = 3 [json_name = "type"];
inline void Workspaces::clear_type() {
  type_.ClearToEmpty();
}
inline const std::string& Workspaces::type() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Workspaces.type)
  return _internal_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Workspaces::set_type(ArgT0&& arg0, ArgT... args) {
 
 type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Workspaces.type)
}
inline std::string* Workspaces::mutable_type() {
  std::string* _s = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Workspaces.type)
  return _s;
}
inline const std::string& Workspaces::_internal_type() const {
  return type_.Get();
}
inline void Workspaces::_internal_set_type(const std::string& value) {
  
  type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Workspaces::_internal_mutable_type() {
  
  return type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Workspaces::release_type() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Workspaces.type)
  return type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Workspaces::set_allocated_type(std::string* type) {
  if (type != nullptr) {
    
  } else {
    
  }
  type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Workspaces.type)
}

// -------------------------------------------------------------------

// Task

// string id = 1 [json_name = "id"];
inline void Task::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Task::id() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.id)
}
inline std::string* Task::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.id)
  return _s;
}
inline const std::string& Task::_internal_id() const {
  return id_.Get();
}
inline void Task::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Task::release_id() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Task.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Task::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Task.id)
}

// string task_name = 2 [json_name = "taskName"];
inline void Task::clear_task_name() {
  task_name_.ClearToEmpty();
}
inline const std::string& Task::task_name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.task_name)
  return _internal_task_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_task_name(ArgT0&& arg0, ArgT... args) {
 
 task_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.task_name)
}
inline std::string* Task::mutable_task_name() {
  std::string* _s = _internal_mutable_task_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.task_name)
  return _s;
}
inline const std::string& Task::_internal_task_name() const {
  return task_name_.Get();
}
inline void Task::_internal_set_task_name(const std::string& value) {
  
  task_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_task_name() {
  
  return task_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Task::release_task_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Task.task_name)
  return task_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Task::set_allocated_task_name(std::string* task_name) {
  if (task_name != nullptr) {
    
  } else {
    
  }
  task_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Task.task_name)
}

// string task_ref_name = 3 [json_name = "taskRefName"];
inline void Task::clear_task_ref_name() {
  task_ref_name_.ClearToEmpty();
}
inline const std::string& Task::task_ref_name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.task_ref_name)
  return _internal_task_ref_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_task_ref_name(ArgT0&& arg0, ArgT... args) {
 
 task_ref_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.task_ref_name)
}
inline std::string* Task::mutable_task_ref_name() {
  std::string* _s = _internal_mutable_task_ref_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.task_ref_name)
  return _s;
}
inline const std::string& Task::_internal_task_ref_name() const {
  return task_ref_name_.Get();
}
inline void Task::_internal_set_task_ref_name(const std::string& value) {
  
  task_ref_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_task_ref_name() {
  
  return task_ref_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Task::release_task_ref_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Task.task_ref_name)
  return task_ref_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Task::set_allocated_task_ref_name(std::string* task_ref_name) {
  if (task_ref_name != nullptr) {
    
  } else {
    
  }
  task_ref_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_ref_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Task.task_ref_name)
}

// string task_kind = 4 [json_name = "taskKind"];
inline void Task::clear_task_kind() {
  task_kind_.ClearToEmpty();
}
inline const std::string& Task::task_kind() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.task_kind)
  return _internal_task_kind();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_task_kind(ArgT0&& arg0, ArgT... args) {
 
 task_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.task_kind)
}
inline std::string* Task::mutable_task_kind() {
  std::string* _s = _internal_mutable_task_kind();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.task_kind)
  return _s;
}
inline const std::string& Task::_internal_task_kind() const {
  return task_kind_.Get();
}
inline void Task::_internal_set_task_kind(const std::string& value) {
  
  task_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_task_kind() {
  
  return task_kind_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Task::release_task_kind() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Task.task_kind)
  return task_kind_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Task::set_allocated_task_kind(std::string* task_kind) {
  if (task_kind != nullptr) {
    
  } else {
    
  }
  task_kind_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_kind,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Task.task_kind)
}

// repeated string task_run_after = 5 [json_name = "taskRunAfter"];
inline int Task::_internal_task_run_after_size() const {
  return task_run_after_.size();
}
inline int Task::task_run_after_size() const {
  return _internal_task_run_after_size();
}
inline void Task::clear_task_run_after() {
  task_run_after_.Clear();
}
inline std::string* Task::add_task_run_after() {
  std::string* _s = _internal_add_task_run_after();
  // @@protoc_insertion_point(field_add_mutable:pipelines.tekton.v1alpha1.Task.task_run_after)
  return _s;
}
inline const std::string& Task::_internal_task_run_after(int index) const {
  return task_run_after_.Get(index);
}
inline const std::string& Task::task_run_after(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.task_run_after)
  return _internal_task_run_after(index);
}
inline std::string* Task::mutable_task_run_after(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.task_run_after)
  return task_run_after_.Mutable(index);
}
inline void Task::set_task_run_after(int index, const std::string& value) {
  task_run_after_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.task_run_after)
}
inline void Task::set_task_run_after(int index, std::string&& value) {
  task_run_after_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.task_run_after)
}
inline void Task::set_task_run_after(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  task_run_after_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pipelines.tekton.v1alpha1.Task.task_run_after)
}
inline void Task::set_task_run_after(int index, const char* value, size_t size) {
  task_run_after_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pipelines.tekton.v1alpha1.Task.task_run_after)
}
inline std::string* Task::_internal_add_task_run_after() {
  return task_run_after_.Add();
}
inline void Task::add_task_run_after(const std::string& value) {
  task_run_after_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.Task.task_run_after)
}
inline void Task::add_task_run_after(std::string&& value) {
  task_run_after_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.Task.task_run_after)
}
inline void Task::add_task_run_after(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  task_run_after_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pipelines.tekton.v1alpha1.Task.task_run_after)
}
inline void Task::add_task_run_after(const char* value, size_t size) {
  task_run_after_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pipelines.tekton.v1alpha1.Task.task_run_after)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Task::task_run_after() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.Task.task_run_after)
  return task_run_after_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Task::mutable_task_run_after() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.Task.task_run_after)
  return &task_run_after_;
}

// repeated .pipelines.tekton.v1alpha1.Workspaces workspaces = 6 [json_name = "workspaces"];
inline int Task::_internal_workspaces_size() const {
  return workspaces_.size();
}
inline int Task::workspaces_size() const {
  return _internal_workspaces_size();
}
inline void Task::clear_workspaces() {
  workspaces_.Clear();
}
inline ::pipelines::tekton::v1alpha1::Workspaces* Task::mutable_workspaces(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.workspaces)
  return workspaces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Workspaces >*
Task::mutable_workspaces() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.Task.workspaces)
  return &workspaces_;
}
inline const ::pipelines::tekton::v1alpha1::Workspaces& Task::_internal_workspaces(int index) const {
  return workspaces_.Get(index);
}
inline const ::pipelines::tekton::v1alpha1::Workspaces& Task::workspaces(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.workspaces)
  return _internal_workspaces(index);
}
inline ::pipelines::tekton::v1alpha1::Workspaces* Task::_internal_add_workspaces() {
  return workspaces_.Add();
}
inline ::pipelines::tekton::v1alpha1::Workspaces* Task::add_workspaces() {
  ::pipelines::tekton::v1alpha1::Workspaces* _add = _internal_add_workspaces();
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.Task.workspaces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Workspaces >&
Task::workspaces() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.Task.workspaces)
  return workspaces_;
}

// repeated .pipelines.tekton.v1alpha1.TaskParams task_params = 7 [json_name = "taskParams"];
inline int Task::_internal_task_params_size() const {
  return task_params_.size();
}
inline int Task::task_params_size() const {
  return _internal_task_params_size();
}
inline void Task::clear_task_params() {
  task_params_.Clear();
}
inline ::pipelines::tekton::v1alpha1::TaskParams* Task::mutable_task_params(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.task_params)
  return task_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskParams >*
Task::mutable_task_params() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.Task.task_params)
  return &task_params_;
}
inline const ::pipelines::tekton::v1alpha1::TaskParams& Task::_internal_task_params(int index) const {
  return task_params_.Get(index);
}
inline const ::pipelines::tekton::v1alpha1::TaskParams& Task::task_params(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.task_params)
  return _internal_task_params(index);
}
inline ::pipelines::tekton::v1alpha1::TaskParams* Task::_internal_add_task_params() {
  return task_params_.Add();
}
inline ::pipelines::tekton::v1alpha1::TaskParams* Task::add_task_params() {
  ::pipelines::tekton::v1alpha1::TaskParams* _add = _internal_add_task_params();
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.Task.task_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskParams >&
Task::task_params() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.Task.task_params)
  return task_params_;
}

// string description = 8 [json_name = "description"];
inline void Task::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& Task::description() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Task::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.description)
}
inline std::string* Task::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Task.description)
  return _s;
}
inline const std::string& Task::_internal_description() const {
  return description_.Get();
}
inline void Task::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Task::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Task::release_description() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Task.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Task::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Task.description)
}

// bool before_deploy = 9 [json_name = "beforeDeploy"];
inline void Task::clear_before_deploy() {
  before_deploy_ = false;
}
inline bool Task::_internal_before_deploy() const {
  return before_deploy_;
}
inline bool Task::before_deploy() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.before_deploy)
  return _internal_before_deploy();
}
inline void Task::_internal_set_before_deploy(bool value) {
  
  before_deploy_ = value;
}
inline void Task::set_before_deploy(bool value) {
  _internal_set_before_deploy(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.before_deploy)
}

// bool after_deploy = 10 [json_name = "afterDeploy"];
inline void Task::clear_after_deploy() {
  after_deploy_ = false;
}
inline bool Task::_internal_after_deploy() const {
  return after_deploy_;
}
inline bool Task::after_deploy() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Task.after_deploy)
  return _internal_after_deploy();
}
inline void Task::_internal_set_after_deploy(bool value) {
  
  after_deploy_ = value;
}
inline void Task::set_after_deploy(bool value) {
  _internal_set_after_deploy(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Task.after_deploy)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Pipeline

// string id = 1 [json_name = "id"];
inline void Pipeline::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Pipeline::id() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pipeline::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.id)
}
inline std::string* Pipeline::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.id)
  return _s;
}
inline const std::string& Pipeline::_internal_id() const {
  return id_.Get();
}
inline void Pipeline::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pipeline::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pipeline::release_id() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Pipeline.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pipeline::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Pipeline.id)
}

// string name = 2 [json_name = "name"];
inline void Pipeline::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Pipeline::name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pipeline::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.name)
}
inline std::string* Pipeline::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.name)
  return _s;
}
inline const std::string& Pipeline::_internal_name() const {
  return name_.Get();
}
inline void Pipeline::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pipeline::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pipeline::release_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Pipeline.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pipeline::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Pipeline.name)
}

// int32 traffic_type = 3 [json_name = "trafficType"];
inline void Pipeline::clear_traffic_type() {
  traffic_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pipeline::_internal_traffic_type() const {
  return traffic_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Pipeline::traffic_type() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.traffic_type)
  return _internal_traffic_type();
}
inline void Pipeline::_internal_set_traffic_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  traffic_type_ = value;
}
inline void Pipeline::set_traffic_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_traffic_type(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.traffic_type)
}

// string organization_id = 4 [json_name = "organizationId"];
inline void Pipeline::clear_organization_id() {
  organization_id_.ClearToEmpty();
}
inline const std::string& Pipeline::organization_id() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.organization_id)
  return _internal_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pipeline::set_organization_id(ArgT0&& arg0, ArgT... args) {
 
 organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.organization_id)
}
inline std::string* Pipeline::mutable_organization_id() {
  std::string* _s = _internal_mutable_organization_id();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.organization_id)
  return _s;
}
inline const std::string& Pipeline::_internal_organization_id() const {
  return organization_id_.Get();
}
inline void Pipeline::_internal_set_organization_id(const std::string& value) {
  
  organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pipeline::_internal_mutable_organization_id() {
  
  return organization_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pipeline::release_organization_id() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Pipeline.organization_id)
  return organization_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pipeline::set_allocated_organization_id(std::string* organization_id) {
  if (organization_id != nullptr) {
    
  } else {
    
  }
  organization_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organization_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Pipeline.organization_id)
}

// string project_id = 5 [json_name = "projectId"];
inline void Pipeline::clear_project_id() {
  project_id_.ClearToEmpty();
}
inline const std::string& Pipeline::project_id() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pipeline::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.project_id)
}
inline std::string* Pipeline::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.project_id)
  return _s;
}
inline const std::string& Pipeline::_internal_project_id() const {
  return project_id_.Get();
}
inline void Pipeline::_internal_set_project_id(const std::string& value) {
  
  project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pipeline::_internal_mutable_project_id() {
  
  return project_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pipeline::release_project_id() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Pipeline.project_id)
  return project_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pipeline::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Pipeline.project_id)
}

// string name_project = 6 [json_name = "nameProject"];
inline void Pipeline::clear_name_project() {
  name_project_.ClearToEmpty();
}
inline const std::string& Pipeline::name_project() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.name_project)
  return _internal_name_project();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pipeline::set_name_project(ArgT0&& arg0, ArgT... args) {
 
 name_project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.name_project)
}
inline std::string* Pipeline::mutable_name_project() {
  std::string* _s = _internal_mutable_name_project();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.name_project)
  return _s;
}
inline const std::string& Pipeline::_internal_name_project() const {
  return name_project_.Get();
}
inline void Pipeline::_internal_set_name_project(const std::string& value) {
  
  name_project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pipeline::_internal_mutable_name_project() {
  
  return name_project_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pipeline::release_name_project() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Pipeline.name_project)
  return name_project_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pipeline::set_allocated_name_project(std::string* name_project) {
  if (name_project != nullptr) {
    
  } else {
    
  }
  name_project_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_project,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Pipeline.name_project)
}

// string environment_id = 7 [json_name = "environmentId"];
inline void Pipeline::clear_environment_id() {
  environment_id_.ClearToEmpty();
}
inline const std::string& Pipeline::environment_id() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.environment_id)
  return _internal_environment_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pipeline::set_environment_id(ArgT0&& arg0, ArgT... args) {
 
 environment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.environment_id)
}
inline std::string* Pipeline::mutable_environment_id() {
  std::string* _s = _internal_mutable_environment_id();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.environment_id)
  return _s;
}
inline const std::string& Pipeline::_internal_environment_id() const {
  return environment_id_.Get();
}
inline void Pipeline::_internal_set_environment_id(const std::string& value) {
  
  environment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pipeline::_internal_mutable_environment_id() {
  
  return environment_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pipeline::release_environment_id() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Pipeline.environment_id)
  return environment_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pipeline::set_allocated_environment_id(std::string* environment_id) {
  if (environment_id != nullptr) {
    
  } else {
    
  }
  environment_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), environment_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Pipeline.environment_id)
}

// string application_id = 8 [json_name = "applicationId"];
inline void Pipeline::clear_application_id() {
  application_id_.ClearToEmpty();
}
inline const std::string& Pipeline::application_id() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.application_id)
  return _internal_application_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pipeline::set_application_id(ArgT0&& arg0, ArgT... args) {
 
 application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.application_id)
}
inline std::string* Pipeline::mutable_application_id() {
  std::string* _s = _internal_mutable_application_id();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.application_id)
  return _s;
}
inline const std::string& Pipeline::_internal_application_id() const {
  return application_id_.Get();
}
inline void Pipeline::_internal_set_application_id(const std::string& value) {
  
  application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pipeline::_internal_mutable_application_id() {
  
  return application_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pipeline::release_application_id() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Pipeline.application_id)
  return application_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pipeline::set_allocated_application_id(std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Pipeline.application_id)
}

// string runtime_id = 9 [json_name = "runtimeId"];
inline void Pipeline::clear_runtime_id() {
  runtime_id_.ClearToEmpty();
}
inline const std::string& Pipeline::runtime_id() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.runtime_id)
  return _internal_runtime_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pipeline::set_runtime_id(ArgT0&& arg0, ArgT... args) {
 
 runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.runtime_id)
}
inline std::string* Pipeline::mutable_runtime_id() {
  std::string* _s = _internal_mutable_runtime_id();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.runtime_id)
  return _s;
}
inline const std::string& Pipeline::_internal_runtime_id() const {
  return runtime_id_.Get();
}
inline void Pipeline::_internal_set_runtime_id(const std::string& value) {
  
  runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pipeline::_internal_mutable_runtime_id() {
  
  return runtime_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pipeline::release_runtime_id() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Pipeline.runtime_id)
  return runtime_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pipeline::set_allocated_runtime_id(std::string* runtime_id) {
  if (runtime_id != nullptr) {
    
  } else {
    
  }
  runtime_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Pipeline.runtime_id)
}

// repeated .pipelines.tekton.v1alpha1.Params params = 10 [json_name = "params"];
inline int Pipeline::_internal_params_size() const {
  return params_.size();
}
inline int Pipeline::params_size() const {
  return _internal_params_size();
}
inline void Pipeline::clear_params() {
  params_.Clear();
}
inline ::pipelines::tekton::v1alpha1::Params* Pipeline::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.params)
  return params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Params >*
Pipeline::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.Pipeline.params)
  return &params_;
}
inline const ::pipelines::tekton::v1alpha1::Params& Pipeline::_internal_params(int index) const {
  return params_.Get(index);
}
inline const ::pipelines::tekton::v1alpha1::Params& Pipeline::params(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.params)
  return _internal_params(index);
}
inline ::pipelines::tekton::v1alpha1::Params* Pipeline::_internal_add_params() {
  return params_.Add();
}
inline ::pipelines::tekton::v1alpha1::Params* Pipeline::add_params() {
  ::pipelines::tekton::v1alpha1::Params* _add = _internal_add_params();
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.Pipeline.params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Params >&
Pipeline::params() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.Pipeline.params)
  return params_;
}

// repeated .pipelines.tekton.v1alpha1.Task tasks = 11 [json_name = "tasks"];
inline int Pipeline::_internal_tasks_size() const {
  return tasks_.size();
}
inline int Pipeline::tasks_size() const {
  return _internal_tasks_size();
}
inline void Pipeline::clear_tasks() {
  tasks_.Clear();
}
inline ::pipelines::tekton::v1alpha1::Task* Pipeline::mutable_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.tasks)
  return tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >*
Pipeline::mutable_tasks() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.Pipeline.tasks)
  return &tasks_;
}
inline const ::pipelines::tekton::v1alpha1::Task& Pipeline::_internal_tasks(int index) const {
  return tasks_.Get(index);
}
inline const ::pipelines::tekton::v1alpha1::Task& Pipeline::tasks(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.tasks)
  return _internal_tasks(index);
}
inline ::pipelines::tekton::v1alpha1::Task* Pipeline::_internal_add_tasks() {
  return tasks_.Add();
}
inline ::pipelines::tekton::v1alpha1::Task* Pipeline::add_tasks() {
  ::pipelines::tekton::v1alpha1::Task* _add = _internal_add_tasks();
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.Pipeline.tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >&
Pipeline::tasks() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.Pipeline.tasks)
  return tasks_;
}

// string status_type = 12 [json_name = "statusType"];
inline void Pipeline::clear_status_type() {
  status_type_.ClearToEmpty();
}
inline const std::string& Pipeline::status_type() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.status_type)
  return _internal_status_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Pipeline::set_status_type(ArgT0&& arg0, ArgT... args) {
 
 status_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.status_type)
}
inline std::string* Pipeline::mutable_status_type() {
  std::string* _s = _internal_mutable_status_type();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.status_type)
  return _s;
}
inline const std::string& Pipeline::_internal_status_type() const {
  return status_type_.Get();
}
inline void Pipeline::_internal_set_status_type(const std::string& value) {
  
  status_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Pipeline::_internal_mutable_status_type() {
  
  return status_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Pipeline::release_status_type() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.Pipeline.status_type)
  return status_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Pipeline::set_allocated_status_type(std::string* status_type) {
  if (status_type != nullptr) {
    
  } else {
    
  }
  status_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.Pipeline.status_type)
}

// map<string, string> integration = 13 [json_name = "integration"];
inline int Pipeline::_internal_integration_size() const {
  return integration_.size();
}
inline int Pipeline::integration_size() const {
  return _internal_integration_size();
}
inline void Pipeline::clear_integration() {
  integration_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Pipeline::_internal_integration() const {
  return integration_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Pipeline::integration() const {
  // @@protoc_insertion_point(field_map:pipelines.tekton.v1alpha1.Pipeline.integration)
  return _internal_integration();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Pipeline::_internal_mutable_integration() {
  return integration_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Pipeline::mutable_integration() {
  // @@protoc_insertion_point(field_mutable_map:pipelines.tekton.v1alpha1.Pipeline.integration)
  return _internal_mutable_integration();
}

// map<string, string> environment_variables = 14 [json_name = "environmentVariables"];
inline int Pipeline::_internal_environment_variables_size() const {
  return environment_variables_.size();
}
inline int Pipeline::environment_variables_size() const {
  return _internal_environment_variables_size();
}
inline void Pipeline::clear_environment_variables() {
  environment_variables_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Pipeline::_internal_environment_variables() const {
  return environment_variables_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Pipeline::environment_variables() const {
  // @@protoc_insertion_point(field_map:pipelines.tekton.v1alpha1.Pipeline.environment_variables)
  return _internal_environment_variables();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Pipeline::_internal_mutable_environment_variables() {
  return environment_variables_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Pipeline::mutable_environment_variables() {
  // @@protoc_insertion_point(field_mutable_map:pipelines.tekton.v1alpha1.Pipeline.environment_variables)
  return _internal_mutable_environment_variables();
}

// map<string, string> commands = 15 [json_name = "commands"];
inline int Pipeline::_internal_commands_size() const {
  return commands_.size();
}
inline int Pipeline::commands_size() const {
  return _internal_commands_size();
}
inline void Pipeline::clear_commands() {
  commands_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Pipeline::_internal_commands() const {
  return commands_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Pipeline::commands() const {
  // @@protoc_insertion_point(field_map:pipelines.tekton.v1alpha1.Pipeline.commands)
  return _internal_commands();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Pipeline::_internal_mutable_commands() {
  return commands_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Pipeline::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_map:pipelines.tekton.v1alpha1.Pipeline.commands)
  return _internal_mutable_commands();
}

// map<string, string> secrets = 16 [json_name = "secrets"];
inline int Pipeline::_internal_secrets_size() const {
  return secrets_.size();
}
inline int Pipeline::secrets_size() const {
  return _internal_secrets_size();
}
inline void Pipeline::clear_secrets() {
  secrets_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Pipeline::_internal_secrets() const {
  return secrets_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Pipeline::secrets() const {
  // @@protoc_insertion_point(field_map:pipelines.tekton.v1alpha1.Pipeline.secrets)
  return _internal_secrets();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Pipeline::_internal_mutable_secrets() {
  return secrets_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Pipeline::mutable_secrets() {
  // @@protoc_insertion_point(field_mutable_map:pipelines.tekton.v1alpha1.Pipeline.secrets)
  return _internal_mutable_secrets();
}

// map<string, string> extra_args = 17 [json_name = "extraArgs"];
inline int Pipeline::_internal_extra_args_size() const {
  return extra_args_.size();
}
inline int Pipeline::extra_args_size() const {
  return _internal_extra_args_size();
}
inline void Pipeline::clear_extra_args() {
  extra_args_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Pipeline::_internal_extra_args() const {
  return extra_args_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Pipeline::extra_args() const {
  // @@protoc_insertion_point(field_map:pipelines.tekton.v1alpha1.Pipeline.extra_args)
  return _internal_extra_args();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Pipeline::_internal_mutable_extra_args() {
  return extra_args_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Pipeline::mutable_extra_args() {
  // @@protoc_insertion_point(field_mutable_map:pipelines.tekton.v1alpha1.Pipeline.extra_args)
  return _internal_mutable_extra_args();
}

// map<string, string> instance_type = 18 [json_name = "instanceType"];
inline int Pipeline::_internal_instance_type_size() const {
  return instance_type_.size();
}
inline int Pipeline::instance_type_size() const {
  return _internal_instance_type_size();
}
inline void Pipeline::clear_instance_type() {
  instance_type_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Pipeline::_internal_instance_type() const {
  return instance_type_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Pipeline::instance_type() const {
  // @@protoc_insertion_point(field_map:pipelines.tekton.v1alpha1.Pipeline.instance_type)
  return _internal_instance_type();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Pipeline::_internal_mutable_instance_type() {
  return instance_type_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Pipeline::mutable_instance_type() {
  // @@protoc_insertion_point(field_mutable_map:pipelines.tekton.v1alpha1.Pipeline.instance_type)
  return _internal_mutable_instance_type();
}

// bool is_default = 19 [json_name = "isDefault"];
inline void Pipeline::clear_is_default() {
  is_default_ = false;
}
inline bool Pipeline::_internal_is_default() const {
  return is_default_;
}
inline bool Pipeline::is_default() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.is_default)
  return _internal_is_default();
}
inline void Pipeline::_internal_set_is_default(bool value) {
  
  is_default_ = value;
}
inline void Pipeline::set_is_default(bool value) {
  _internal_set_is_default(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.is_default)
}

// bool active = 20 [json_name = "active"];
inline void Pipeline::clear_active() {
  active_ = false;
}
inline bool Pipeline::_internal_active() const {
  return active_;
}
inline bool Pipeline::active() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.active)
  return _internal_active();
}
inline void Pipeline::_internal_set_active(bool value) {
  
  active_ = value;
}
inline void Pipeline::set_active(bool value) {
  _internal_set_active(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.active)
}

// bool custom_pipeline = 21 [json_name = "customPipeline"];
inline void Pipeline::clear_custom_pipeline() {
  custom_pipeline_ = false;
}
inline bool Pipeline::_internal_custom_pipeline() const {
  return custom_pipeline_;
}
inline bool Pipeline::custom_pipeline() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.custom_pipeline)
  return _internal_custom_pipeline();
}
inline void Pipeline::_internal_set_custom_pipeline(bool value) {
  
  custom_pipeline_ = value;
}
inline void Pipeline::set_custom_pipeline(bool value) {
  _internal_set_custom_pipeline(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.custom_pipeline)
}

// repeated .pipelines.tekton.v1alpha1.Task before_deploy_tasks = 22 [json_name = "beforeDeployTasks"];
inline int Pipeline::_internal_before_deploy_tasks_size() const {
  return before_deploy_tasks_.size();
}
inline int Pipeline::before_deploy_tasks_size() const {
  return _internal_before_deploy_tasks_size();
}
inline void Pipeline::clear_before_deploy_tasks() {
  before_deploy_tasks_.Clear();
}
inline ::pipelines::tekton::v1alpha1::Task* Pipeline::mutable_before_deploy_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.before_deploy_tasks)
  return before_deploy_tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >*
Pipeline::mutable_before_deploy_tasks() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.Pipeline.before_deploy_tasks)
  return &before_deploy_tasks_;
}
inline const ::pipelines::tekton::v1alpha1::Task& Pipeline::_internal_before_deploy_tasks(int index) const {
  return before_deploy_tasks_.Get(index);
}
inline const ::pipelines::tekton::v1alpha1::Task& Pipeline::before_deploy_tasks(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.before_deploy_tasks)
  return _internal_before_deploy_tasks(index);
}
inline ::pipelines::tekton::v1alpha1::Task* Pipeline::_internal_add_before_deploy_tasks() {
  return before_deploy_tasks_.Add();
}
inline ::pipelines::tekton::v1alpha1::Task* Pipeline::add_before_deploy_tasks() {
  ::pipelines::tekton::v1alpha1::Task* _add = _internal_add_before_deploy_tasks();
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.Pipeline.before_deploy_tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >&
Pipeline::before_deploy_tasks() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.Pipeline.before_deploy_tasks)
  return before_deploy_tasks_;
}

// repeated .pipelines.tekton.v1alpha1.Task after_deploy_tasks = 23 [json_name = "afterDeployTasks"];
inline int Pipeline::_internal_after_deploy_tasks_size() const {
  return after_deploy_tasks_.size();
}
inline int Pipeline::after_deploy_tasks_size() const {
  return _internal_after_deploy_tasks_size();
}
inline void Pipeline::clear_after_deploy_tasks() {
  after_deploy_tasks_.Clear();
}
inline ::pipelines::tekton::v1alpha1::Task* Pipeline::mutable_after_deploy_tasks(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.Pipeline.after_deploy_tasks)
  return after_deploy_tasks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >*
Pipeline::mutable_after_deploy_tasks() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.Pipeline.after_deploy_tasks)
  return &after_deploy_tasks_;
}
inline const ::pipelines::tekton::v1alpha1::Task& Pipeline::_internal_after_deploy_tasks(int index) const {
  return after_deploy_tasks_.Get(index);
}
inline const ::pipelines::tekton::v1alpha1::Task& Pipeline::after_deploy_tasks(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.after_deploy_tasks)
  return _internal_after_deploy_tasks(index);
}
inline ::pipelines::tekton::v1alpha1::Task* Pipeline::_internal_add_after_deploy_tasks() {
  return after_deploy_tasks_.Add();
}
inline ::pipelines::tekton::v1alpha1::Task* Pipeline::add_after_deploy_tasks() {
  ::pipelines::tekton::v1alpha1::Task* _add = _internal_add_after_deploy_tasks();
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.Pipeline.after_deploy_tasks)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >&
Pipeline::after_deploy_tasks() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.Pipeline.after_deploy_tasks)
  return after_deploy_tasks_;
}

// bool is_not_exist_dockerfile = 24 [json_name = "isNotExistDockerfile"];
inline void Pipeline::clear_is_not_exist_dockerfile() {
  is_not_exist_dockerfile_ = false;
}
inline bool Pipeline::_internal_is_not_exist_dockerfile() const {
  return is_not_exist_dockerfile_;
}
inline bool Pipeline::is_not_exist_dockerfile() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.Pipeline.is_not_exist_dockerfile)
  return _internal_is_not_exist_dockerfile();
}
inline void Pipeline::_internal_set_is_not_exist_dockerfile(bool value) {
  
  is_not_exist_dockerfile_ = value;
}
inline void Pipeline::set_is_not_exist_dockerfile(bool value) {
  _internal_set_is_not_exist_dockerfile(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.Pipeline.is_not_exist_dockerfile)
}

// -------------------------------------------------------------------

// TektonTask

// repeated .pipelines.tekton.v1alpha1.Task task = 1 [json_name = "task"];
inline int TektonTask::_internal_task_size() const {
  return task_.size();
}
inline int TektonTask::task_size() const {
  return _internal_task_size();
}
inline void TektonTask::clear_task() {
  task_.Clear();
}
inline ::pipelines::tekton::v1alpha1::Task* TektonTask::mutable_task(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TektonTask.task)
  return task_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >*
TektonTask::mutable_task() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.TektonTask.task)
  return &task_;
}
inline const ::pipelines::tekton::v1alpha1::Task& TektonTask::_internal_task(int index) const {
  return task_.Get(index);
}
inline const ::pipelines::tekton::v1alpha1::Task& TektonTask::task(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TektonTask.task)
  return _internal_task(index);
}
inline ::pipelines::tekton::v1alpha1::Task* TektonTask::_internal_add_task() {
  return task_.Add();
}
inline ::pipelines::tekton::v1alpha1::Task* TektonTask::add_task() {
  ::pipelines::tekton::v1alpha1::Task* _add = _internal_add_task();
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.TektonTask.task)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Task >&
TektonTask::task() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.TektonTask.task)
  return task_;
}

// int32 order = 2 [json_name = "order"];
inline void TektonTask::clear_order() {
  order_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TektonTask::_internal_order() const {
  return order_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TektonTask::order() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TektonTask.order)
  return _internal_order();
}
inline void TektonTask::_internal_set_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  order_ = value;
}
inline void TektonTask::set_order(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_order(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TektonTask.order)
}

// -------------------------------------------------------------------

// TektonTaskList

// repeated .pipelines.tekton.v1alpha1.TaskToCustomize items = 1 [json_name = "items"];
inline int TektonTaskList::_internal_items_size() const {
  return items_.size();
}
inline int TektonTaskList::items_size() const {
  return _internal_items_size();
}
inline void TektonTaskList::clear_items() {
  items_.Clear();
}
inline ::pipelines::tekton::v1alpha1::TaskToCustomize* TektonTaskList::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TektonTaskList.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskToCustomize >*
TektonTaskList::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.TektonTaskList.items)
  return &items_;
}
inline const ::pipelines::tekton::v1alpha1::TaskToCustomize& TektonTaskList::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::pipelines::tekton::v1alpha1::TaskToCustomize& TektonTaskList::items(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TektonTaskList.items)
  return _internal_items(index);
}
inline ::pipelines::tekton::v1alpha1::TaskToCustomize* TektonTaskList::_internal_add_items() {
  return items_.Add();
}
inline ::pipelines::tekton::v1alpha1::TaskToCustomize* TektonTaskList::add_items() {
  ::pipelines::tekton::v1alpha1::TaskToCustomize* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.TektonTaskList.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskToCustomize >&
TektonTaskList::items() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.TektonTaskList.items)
  return items_;
}

// -------------------------------------------------------------------

// TaskToCustomize

// string task_name = 1 [json_name = "taskName"];
inline void TaskToCustomize::clear_task_name() {
  task_name_.ClearToEmpty();
}
inline const std::string& TaskToCustomize::task_name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskToCustomize.task_name)
  return _internal_task_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskToCustomize::set_task_name(ArgT0&& arg0, ArgT... args) {
 
 task_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskToCustomize.task_name)
}
inline std::string* TaskToCustomize::mutable_task_name() {
  std::string* _s = _internal_mutable_task_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskToCustomize.task_name)
  return _s;
}
inline const std::string& TaskToCustomize::_internal_task_name() const {
  return task_name_.Get();
}
inline void TaskToCustomize::_internal_set_task_name(const std::string& value) {
  
  task_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskToCustomize::_internal_mutable_task_name() {
  
  return task_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskToCustomize::release_task_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskToCustomize.task_name)
  return task_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskToCustomize::set_allocated_task_name(std::string* task_name) {
  if (task_name != nullptr) {
    
  } else {
    
  }
  task_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskToCustomize.task_name)
}

// string task_ref_name = 2 [json_name = "taskRefName"];
inline void TaskToCustomize::clear_task_ref_name() {
  task_ref_name_.ClearToEmpty();
}
inline const std::string& TaskToCustomize::task_ref_name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskToCustomize.task_ref_name)
  return _internal_task_ref_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskToCustomize::set_task_ref_name(ArgT0&& arg0, ArgT... args) {
 
 task_ref_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskToCustomize.task_ref_name)
}
inline std::string* TaskToCustomize::mutable_task_ref_name() {
  std::string* _s = _internal_mutable_task_ref_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskToCustomize.task_ref_name)
  return _s;
}
inline const std::string& TaskToCustomize::_internal_task_ref_name() const {
  return task_ref_name_.Get();
}
inline void TaskToCustomize::_internal_set_task_ref_name(const std::string& value) {
  
  task_ref_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskToCustomize::_internal_mutable_task_ref_name() {
  
  return task_ref_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskToCustomize::release_task_ref_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskToCustomize.task_ref_name)
  return task_ref_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskToCustomize::set_allocated_task_ref_name(std::string* task_ref_name) {
  if (task_ref_name != nullptr) {
    
  } else {
    
  }
  task_ref_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_ref_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskToCustomize.task_ref_name)
}

// string task_kind = 3 [json_name = "taskKind"];
inline void TaskToCustomize::clear_task_kind() {
  task_kind_.ClearToEmpty();
}
inline const std::string& TaskToCustomize::task_kind() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskToCustomize.task_kind)
  return _internal_task_kind();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskToCustomize::set_task_kind(ArgT0&& arg0, ArgT... args) {
 
 task_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskToCustomize.task_kind)
}
inline std::string* TaskToCustomize::mutable_task_kind() {
  std::string* _s = _internal_mutable_task_kind();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskToCustomize.task_kind)
  return _s;
}
inline const std::string& TaskToCustomize::_internal_task_kind() const {
  return task_kind_.Get();
}
inline void TaskToCustomize::_internal_set_task_kind(const std::string& value) {
  
  task_kind_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskToCustomize::_internal_mutable_task_kind() {
  
  return task_kind_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskToCustomize::release_task_kind() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskToCustomize.task_kind)
  return task_kind_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskToCustomize::set_allocated_task_kind(std::string* task_kind) {
  if (task_kind != nullptr) {
    
  } else {
    
  }
  task_kind_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_kind,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskToCustomize.task_kind)
}

// repeated string task_run_after = 4 [json_name = "taskRunAfter"];
inline int TaskToCustomize::_internal_task_run_after_size() const {
  return task_run_after_.size();
}
inline int TaskToCustomize::task_run_after_size() const {
  return _internal_task_run_after_size();
}
inline void TaskToCustomize::clear_task_run_after() {
  task_run_after_.Clear();
}
inline std::string* TaskToCustomize::add_task_run_after() {
  std::string* _s = _internal_add_task_run_after();
  // @@protoc_insertion_point(field_add_mutable:pipelines.tekton.v1alpha1.TaskToCustomize.task_run_after)
  return _s;
}
inline const std::string& TaskToCustomize::_internal_task_run_after(int index) const {
  return task_run_after_.Get(index);
}
inline const std::string& TaskToCustomize::task_run_after(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskToCustomize.task_run_after)
  return _internal_task_run_after(index);
}
inline std::string* TaskToCustomize::mutable_task_run_after(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskToCustomize.task_run_after)
  return task_run_after_.Mutable(index);
}
inline void TaskToCustomize::set_task_run_after(int index, const std::string& value) {
  task_run_after_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskToCustomize.task_run_after)
}
inline void TaskToCustomize::set_task_run_after(int index, std::string&& value) {
  task_run_after_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskToCustomize.task_run_after)
}
inline void TaskToCustomize::set_task_run_after(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  task_run_after_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:pipelines.tekton.v1alpha1.TaskToCustomize.task_run_after)
}
inline void TaskToCustomize::set_task_run_after(int index, const char* value, size_t size) {
  task_run_after_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:pipelines.tekton.v1alpha1.TaskToCustomize.task_run_after)
}
inline std::string* TaskToCustomize::_internal_add_task_run_after() {
  return task_run_after_.Add();
}
inline void TaskToCustomize::add_task_run_after(const std::string& value) {
  task_run_after_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.TaskToCustomize.task_run_after)
}
inline void TaskToCustomize::add_task_run_after(std::string&& value) {
  task_run_after_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.TaskToCustomize.task_run_after)
}
inline void TaskToCustomize::add_task_run_after(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  task_run_after_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:pipelines.tekton.v1alpha1.TaskToCustomize.task_run_after)
}
inline void TaskToCustomize::add_task_run_after(const char* value, size_t size) {
  task_run_after_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:pipelines.tekton.v1alpha1.TaskToCustomize.task_run_after)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TaskToCustomize::task_run_after() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.TaskToCustomize.task_run_after)
  return task_run_after_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TaskToCustomize::mutable_task_run_after() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.TaskToCustomize.task_run_after)
  return &task_run_after_;
}

// repeated .pipelines.tekton.v1alpha1.Workspaces workspaces = 5 [json_name = "workspaces"];
inline int TaskToCustomize::_internal_workspaces_size() const {
  return workspaces_.size();
}
inline int TaskToCustomize::workspaces_size() const {
  return _internal_workspaces_size();
}
inline void TaskToCustomize::clear_workspaces() {
  workspaces_.Clear();
}
inline ::pipelines::tekton::v1alpha1::Workspaces* TaskToCustomize::mutable_workspaces(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskToCustomize.workspaces)
  return workspaces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Workspaces >*
TaskToCustomize::mutable_workspaces() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.TaskToCustomize.workspaces)
  return &workspaces_;
}
inline const ::pipelines::tekton::v1alpha1::Workspaces& TaskToCustomize::_internal_workspaces(int index) const {
  return workspaces_.Get(index);
}
inline const ::pipelines::tekton::v1alpha1::Workspaces& TaskToCustomize::workspaces(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskToCustomize.workspaces)
  return _internal_workspaces(index);
}
inline ::pipelines::tekton::v1alpha1::Workspaces* TaskToCustomize::_internal_add_workspaces() {
  return workspaces_.Add();
}
inline ::pipelines::tekton::v1alpha1::Workspaces* TaskToCustomize::add_workspaces() {
  ::pipelines::tekton::v1alpha1::Workspaces* _add = _internal_add_workspaces();
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.TaskToCustomize.workspaces)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Workspaces >&
TaskToCustomize::workspaces() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.TaskToCustomize.workspaces)
  return workspaces_;
}

// repeated .pipelines.tekton.v1alpha1.TaskParamsToCustomize task_params = 6 [json_name = "taskParams"];
inline int TaskToCustomize::_internal_task_params_size() const {
  return task_params_.size();
}
inline int TaskToCustomize::task_params_size() const {
  return _internal_task_params_size();
}
inline void TaskToCustomize::clear_task_params() {
  task_params_.Clear();
}
inline ::pipelines::tekton::v1alpha1::TaskParamsToCustomize* TaskToCustomize::mutable_task_params(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskToCustomize.task_params)
  return task_params_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskParamsToCustomize >*
TaskToCustomize::mutable_task_params() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.TaskToCustomize.task_params)
  return &task_params_;
}
inline const ::pipelines::tekton::v1alpha1::TaskParamsToCustomize& TaskToCustomize::_internal_task_params(int index) const {
  return task_params_.Get(index);
}
inline const ::pipelines::tekton::v1alpha1::TaskParamsToCustomize& TaskToCustomize::task_params(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskToCustomize.task_params)
  return _internal_task_params(index);
}
inline ::pipelines::tekton::v1alpha1::TaskParamsToCustomize* TaskToCustomize::_internal_add_task_params() {
  return task_params_.Add();
}
inline ::pipelines::tekton::v1alpha1::TaskParamsToCustomize* TaskToCustomize::add_task_params() {
  ::pipelines::tekton::v1alpha1::TaskParamsToCustomize* _add = _internal_add_task_params();
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.TaskToCustomize.task_params)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskParamsToCustomize >&
TaskToCustomize::task_params() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.TaskToCustomize.task_params)
  return task_params_;
}

// string description = 7 [json_name = "description"];
inline void TaskToCustomize::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& TaskToCustomize::description() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskToCustomize.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskToCustomize::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskToCustomize.description)
}
inline std::string* TaskToCustomize::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskToCustomize.description)
  return _s;
}
inline const std::string& TaskToCustomize::_internal_description() const {
  return description_.Get();
}
inline void TaskToCustomize::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskToCustomize::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskToCustomize::release_description() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskToCustomize.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskToCustomize::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskToCustomize.description)
}

// bool before_deploy = 8 [json_name = "beforeDeploy"];
inline void TaskToCustomize::clear_before_deploy() {
  before_deploy_ = false;
}
inline bool TaskToCustomize::_internal_before_deploy() const {
  return before_deploy_;
}
inline bool TaskToCustomize::before_deploy() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskToCustomize.before_deploy)
  return _internal_before_deploy();
}
inline void TaskToCustomize::_internal_set_before_deploy(bool value) {
  
  before_deploy_ = value;
}
inline void TaskToCustomize::set_before_deploy(bool value) {
  _internal_set_before_deploy(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskToCustomize.before_deploy)
}

// bool after_deploy = 9 [json_name = "afterDeploy"];
inline void TaskToCustomize::clear_after_deploy() {
  after_deploy_ = false;
}
inline bool TaskToCustomize::_internal_after_deploy() const {
  return after_deploy_;
}
inline bool TaskToCustomize::after_deploy() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskToCustomize.after_deploy)
  return _internal_after_deploy();
}
inline void TaskToCustomize::_internal_set_after_deploy(bool value) {
  
  after_deploy_ = value;
}
inline void TaskToCustomize::set_after_deploy(bool value) {
  _internal_set_after_deploy(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskToCustomize.after_deploy)
}

// -------------------------------------------------------------------

// TaskParamsToCustomize

// string param_name = 1 [json_name = "paramName"];
inline void TaskParamsToCustomize::clear_param_name() {
  param_name_.ClearToEmpty();
}
inline const std::string& TaskParamsToCustomize::param_name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskParamsToCustomize.param_name)
  return _internal_param_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskParamsToCustomize::set_param_name(ArgT0&& arg0, ArgT... args) {
 
 param_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskParamsToCustomize.param_name)
}
inline std::string* TaskParamsToCustomize::mutable_param_name() {
  std::string* _s = _internal_mutable_param_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskParamsToCustomize.param_name)
  return _s;
}
inline const std::string& TaskParamsToCustomize::_internal_param_name() const {
  return param_name_.Get();
}
inline void TaskParamsToCustomize::_internal_set_param_name(const std::string& value) {
  
  param_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskParamsToCustomize::_internal_mutable_param_name() {
  
  return param_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskParamsToCustomize::release_param_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskParamsToCustomize.param_name)
  return param_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskParamsToCustomize::set_allocated_param_name(std::string* param_name) {
  if (param_name != nullptr) {
    
  } else {
    
  }
  param_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskParamsToCustomize.param_name)
}

// string label = 2 [json_name = "label"];
inline void TaskParamsToCustomize::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& TaskParamsToCustomize::label() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskParamsToCustomize.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskParamsToCustomize::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskParamsToCustomize.label)
}
inline std::string* TaskParamsToCustomize::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskParamsToCustomize.label)
  return _s;
}
inline const std::string& TaskParamsToCustomize::_internal_label() const {
  return label_.Get();
}
inline void TaskParamsToCustomize::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskParamsToCustomize::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskParamsToCustomize::release_label() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskParamsToCustomize.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskParamsToCustomize::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskParamsToCustomize.label)
}

// string validation = 3 [json_name = "validation"];
inline void TaskParamsToCustomize::clear_validation() {
  validation_.ClearToEmpty();
}
inline const std::string& TaskParamsToCustomize::validation() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskParamsToCustomize.validation)
  return _internal_validation();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskParamsToCustomize::set_validation(ArgT0&& arg0, ArgT... args) {
 
 validation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskParamsToCustomize.validation)
}
inline std::string* TaskParamsToCustomize::mutable_validation() {
  std::string* _s = _internal_mutable_validation();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskParamsToCustomize.validation)
  return _s;
}
inline const std::string& TaskParamsToCustomize::_internal_validation() const {
  return validation_.Get();
}
inline void TaskParamsToCustomize::_internal_set_validation(const std::string& value) {
  
  validation_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskParamsToCustomize::_internal_mutable_validation() {
  
  return validation_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskParamsToCustomize::release_validation() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskParamsToCustomize.validation)
  return validation_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskParamsToCustomize::set_allocated_validation(std::string* validation) {
  if (validation != nullptr) {
    
  } else {
    
  }
  validation_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), validation,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskParamsToCustomize.validation)
}

// string type_value = 4 [json_name = "typeValue"];
inline void TaskParamsToCustomize::clear_type_value() {
  type_value_.ClearToEmpty();
}
inline const std::string& TaskParamsToCustomize::type_value() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskParamsToCustomize.type_value)
  return _internal_type_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskParamsToCustomize::set_type_value(ArgT0&& arg0, ArgT... args) {
 
 type_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskParamsToCustomize.type_value)
}
inline std::string* TaskParamsToCustomize::mutable_type_value() {
  std::string* _s = _internal_mutable_type_value();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskParamsToCustomize.type_value)
  return _s;
}
inline const std::string& TaskParamsToCustomize::_internal_type_value() const {
  return type_value_.Get();
}
inline void TaskParamsToCustomize::_internal_set_type_value(const std::string& value) {
  
  type_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskParamsToCustomize::_internal_mutable_type_value() {
  
  return type_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskParamsToCustomize::release_type_value() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskParamsToCustomize.type_value)
  return type_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskParamsToCustomize::set_allocated_type_value(std::string* type_value) {
  if (type_value != nullptr) {
    
  } else {
    
  }
  type_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), type_value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskParamsToCustomize.type_value)
}

// string description = 5 [json_name = "description"];
inline void TaskParamsToCustomize::clear_description() {
  description_.ClearToEmpty();
}
inline const std::string& TaskParamsToCustomize::description() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskParamsToCustomize.description)
  return _internal_description();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskParamsToCustomize::set_description(ArgT0&& arg0, ArgT... args) {
 
 description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskParamsToCustomize.description)
}
inline std::string* TaskParamsToCustomize::mutable_description() {
  std::string* _s = _internal_mutable_description();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskParamsToCustomize.description)
  return _s;
}
inline const std::string& TaskParamsToCustomize::_internal_description() const {
  return description_.Get();
}
inline void TaskParamsToCustomize::_internal_set_description(const std::string& value) {
  
  description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskParamsToCustomize::_internal_mutable_description() {
  
  return description_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskParamsToCustomize::release_description() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskParamsToCustomize.description)
  return description_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskParamsToCustomize::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskParamsToCustomize.description)
}

// string default = 6 [json_name = "default"];
inline void TaskParamsToCustomize::clear_default_() {
  default__.ClearToEmpty();
}
inline const std::string& TaskParamsToCustomize::default_() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskParamsToCustomize.default)
  return _internal_default_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskParamsToCustomize::set_default_(ArgT0&& arg0, ArgT... args) {
 
 default__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskParamsToCustomize.default)
}
inline std::string* TaskParamsToCustomize::mutable_default_() {
  std::string* _s = _internal_mutable_default_();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskParamsToCustomize.default)
  return _s;
}
inline const std::string& TaskParamsToCustomize::_internal_default_() const {
  return default__.Get();
}
inline void TaskParamsToCustomize::_internal_set_default_(const std::string& value) {
  
  default__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskParamsToCustomize::_internal_mutable_default_() {
  
  return default__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskParamsToCustomize::release_default_() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskParamsToCustomize.default)
  return default__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskParamsToCustomize::set_allocated_default_(std::string* default_) {
  if (default_ != nullptr) {
    
  } else {
    
  }
  default__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), default_,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskParamsToCustomize.default)
}

// -------------------------------------------------------------------

// PipelineRun

// string name = 1 [json_name = "name"];
inline void PipelineRun::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PipelineRun::name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.PipelineRun.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PipelineRun::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.PipelineRun.name)
}
inline std::string* PipelineRun::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.PipelineRun.name)
  return _s;
}
inline const std::string& PipelineRun::_internal_name() const {
  return name_.Get();
}
inline void PipelineRun::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PipelineRun::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PipelineRun::release_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.PipelineRun.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PipelineRun::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.PipelineRun.name)
}

// string label = 2 [json_name = "label"];
inline void PipelineRun::clear_label() {
  label_.ClearToEmpty();
}
inline const std::string& PipelineRun::label() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.PipelineRun.label)
  return _internal_label();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PipelineRun::set_label(ArgT0&& arg0, ArgT... args) {
 
 label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.PipelineRun.label)
}
inline std::string* PipelineRun::mutable_label() {
  std::string* _s = _internal_mutable_label();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.PipelineRun.label)
  return _s;
}
inline const std::string& PipelineRun::_internal_label() const {
  return label_.Get();
}
inline void PipelineRun::_internal_set_label(const std::string& value) {
  
  label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PipelineRun::_internal_mutable_label() {
  
  return label_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PipelineRun::release_label() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.PipelineRun.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PipelineRun::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.PipelineRun.label)
}

// string namespace = 3 [json_name = "namespace"];
inline void PipelineRun::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& PipelineRun::namespace_() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.PipelineRun.namespace)
  return _internal_namespace_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PipelineRun::set_namespace_(ArgT0&& arg0, ArgT... args) {
 
 namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.PipelineRun.namespace)
}
inline std::string* PipelineRun::mutable_namespace_() {
  std::string* _s = _internal_mutable_namespace_();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.PipelineRun.namespace)
  return _s;
}
inline const std::string& PipelineRun::_internal_namespace_() const {
  return namespace__.Get();
}
inline void PipelineRun::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PipelineRun::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PipelineRun::release_namespace_() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.PipelineRun.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PipelineRun::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.PipelineRun.namespace)
}

// string message = 4 [json_name = "message"];
inline void PipelineRun::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& PipelineRun::message() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.PipelineRun.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PipelineRun::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.PipelineRun.message)
}
inline std::string* PipelineRun::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.PipelineRun.message)
  return _s;
}
inline const std::string& PipelineRun::_internal_message() const {
  return message_.Get();
}
inline void PipelineRun::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PipelineRun::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PipelineRun::release_message() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.PipelineRun.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PipelineRun::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.PipelineRun.message)
}

// string reason = 5 [json_name = "reason"];
inline void PipelineRun::clear_reason() {
  reason_.ClearToEmpty();
}
inline const std::string& PipelineRun::reason() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.PipelineRun.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PipelineRun::set_reason(ArgT0&& arg0, ArgT... args) {
 
 reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.PipelineRun.reason)
}
inline std::string* PipelineRun::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.PipelineRun.reason)
  return _s;
}
inline const std::string& PipelineRun::_internal_reason() const {
  return reason_.Get();
}
inline void PipelineRun::_internal_set_reason(const std::string& value) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PipelineRun::_internal_mutable_reason() {
  
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PipelineRun::release_reason() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.PipelineRun.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PipelineRun::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.PipelineRun.reason)
}

// string started_at = 6 [json_name = "startedAt"];
inline void PipelineRun::clear_started_at() {
  started_at_.ClearToEmpty();
}
inline const std::string& PipelineRun::started_at() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.PipelineRun.started_at)
  return _internal_started_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PipelineRun::set_started_at(ArgT0&& arg0, ArgT... args) {
 
 started_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.PipelineRun.started_at)
}
inline std::string* PipelineRun::mutable_started_at() {
  std::string* _s = _internal_mutable_started_at();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.PipelineRun.started_at)
  return _s;
}
inline const std::string& PipelineRun::_internal_started_at() const {
  return started_at_.Get();
}
inline void PipelineRun::_internal_set_started_at(const std::string& value) {
  
  started_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PipelineRun::_internal_mutable_started_at() {
  
  return started_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PipelineRun::release_started_at() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.PipelineRun.started_at)
  return started_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PipelineRun::set_allocated_started_at(std::string* started_at) {
  if (started_at != nullptr) {
    
  } else {
    
  }
  started_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), started_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.PipelineRun.started_at)
}

// string finished_at = 7 [json_name = "finishedAt"];
inline void PipelineRun::clear_finished_at() {
  finished_at_.ClearToEmpty();
}
inline const std::string& PipelineRun::finished_at() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.PipelineRun.finished_at)
  return _internal_finished_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PipelineRun::set_finished_at(ArgT0&& arg0, ArgT... args) {
 
 finished_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.PipelineRun.finished_at)
}
inline std::string* PipelineRun::mutable_finished_at() {
  std::string* _s = _internal_mutable_finished_at();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.PipelineRun.finished_at)
  return _s;
}
inline const std::string& PipelineRun::_internal_finished_at() const {
  return finished_at_.Get();
}
inline void PipelineRun::_internal_set_finished_at(const std::string& value) {
  
  finished_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PipelineRun::_internal_mutable_finished_at() {
  
  return finished_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PipelineRun::release_finished_at() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.PipelineRun.finished_at)
  return finished_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PipelineRun::set_allocated_finished_at(std::string* finished_at) {
  if (finished_at != nullptr) {
    
  } else {
    
  }
  finished_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), finished_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.PipelineRun.finished_at)
}

// string duration = 8 [json_name = "duration"];
inline void PipelineRun::clear_duration() {
  duration_.ClearToEmpty();
}
inline const std::string& PipelineRun::duration() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.PipelineRun.duration)
  return _internal_duration();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PipelineRun::set_duration(ArgT0&& arg0, ArgT... args) {
 
 duration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.PipelineRun.duration)
}
inline std::string* PipelineRun::mutable_duration() {
  std::string* _s = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.PipelineRun.duration)
  return _s;
}
inline const std::string& PipelineRun::_internal_duration() const {
  return duration_.Get();
}
inline void PipelineRun::_internal_set_duration(const std::string& value) {
  
  duration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PipelineRun::_internal_mutable_duration() {
  
  return duration_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PipelineRun::release_duration() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.PipelineRun.duration)
  return duration_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PipelineRun::set_allocated_duration(std::string* duration) {
  if (duration != nullptr) {
    
  } else {
    
  }
  duration_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), duration,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.PipelineRun.duration)
}

// string pipeline_run_status = 9 [json_name = "pipelineRunStatus"];
inline void PipelineRun::clear_pipeline_run_status() {
  pipeline_run_status_.ClearToEmpty();
}
inline const std::string& PipelineRun::pipeline_run_status() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.PipelineRun.pipeline_run_status)
  return _internal_pipeline_run_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PipelineRun::set_pipeline_run_status(ArgT0&& arg0, ArgT... args) {
 
 pipeline_run_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.PipelineRun.pipeline_run_status)
}
inline std::string* PipelineRun::mutable_pipeline_run_status() {
  std::string* _s = _internal_mutable_pipeline_run_status();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.PipelineRun.pipeline_run_status)
  return _s;
}
inline const std::string& PipelineRun::_internal_pipeline_run_status() const {
  return pipeline_run_status_.Get();
}
inline void PipelineRun::_internal_set_pipeline_run_status(const std::string& value) {
  
  pipeline_run_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PipelineRun::_internal_mutable_pipeline_run_status() {
  
  return pipeline_run_status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PipelineRun::release_pipeline_run_status() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.PipelineRun.pipeline_run_status)
  return pipeline_run_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PipelineRun::set_allocated_pipeline_run_status(std::string* pipeline_run_status) {
  if (pipeline_run_status != nullptr) {
    
  } else {
    
  }
  pipeline_run_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pipeline_run_status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.PipelineRun.pipeline_run_status)
}

// repeated .pipelines.tekton.v1alpha1.TaskRun task_run = 10 [json_name = "taskRun"];
inline int PipelineRun::_internal_task_run_size() const {
  return task_run_.size();
}
inline int PipelineRun::task_run_size() const {
  return _internal_task_run_size();
}
inline void PipelineRun::clear_task_run() {
  task_run_.Clear();
}
inline ::pipelines::tekton::v1alpha1::TaskRun* PipelineRun::mutable_task_run(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.PipelineRun.task_run)
  return task_run_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskRun >*
PipelineRun::mutable_task_run() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.PipelineRun.task_run)
  return &task_run_;
}
inline const ::pipelines::tekton::v1alpha1::TaskRun& PipelineRun::_internal_task_run(int index) const {
  return task_run_.Get(index);
}
inline const ::pipelines::tekton::v1alpha1::TaskRun& PipelineRun::task_run(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.PipelineRun.task_run)
  return _internal_task_run(index);
}
inline ::pipelines::tekton::v1alpha1::TaskRun* PipelineRun::_internal_add_task_run() {
  return task_run_.Add();
}
inline ::pipelines::tekton::v1alpha1::TaskRun* PipelineRun::add_task_run() {
  ::pipelines::tekton::v1alpha1::TaskRun* _add = _internal_add_task_run();
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.PipelineRun.task_run)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskRun >&
PipelineRun::task_run() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.PipelineRun.task_run)
  return task_run_;
}

// -------------------------------------------------------------------

// PipelineRunList

// repeated .pipelines.tekton.v1alpha1.PipelineRun items = 1 [json_name = "items"];
inline int PipelineRunList::_internal_items_size() const {
  return items_.size();
}
inline int PipelineRunList::items_size() const {
  return _internal_items_size();
}
inline void PipelineRunList::clear_items() {
  items_.Clear();
}
inline ::pipelines::tekton::v1alpha1::PipelineRun* PipelineRunList::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.PipelineRunList.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::PipelineRun >*
PipelineRunList::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.PipelineRunList.items)
  return &items_;
}
inline const ::pipelines::tekton::v1alpha1::PipelineRun& PipelineRunList::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::pipelines::tekton::v1alpha1::PipelineRun& PipelineRunList::items(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.PipelineRunList.items)
  return _internal_items(index);
}
inline ::pipelines::tekton::v1alpha1::PipelineRun* PipelineRunList::_internal_add_items() {
  return items_.Add();
}
inline ::pipelines::tekton::v1alpha1::PipelineRun* PipelineRunList::add_items() {
  ::pipelines::tekton::v1alpha1::PipelineRun* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.PipelineRunList.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::PipelineRun >&
PipelineRunList::items() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.PipelineRunList.items)
  return items_;
}

// -------------------------------------------------------------------

// TaskRun

// string name = 1 [json_name = "name"];
inline void TaskRun::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TaskRun::name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskRun.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskRun::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskRun.name)
}
inline std::string* TaskRun::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskRun.name)
  return _s;
}
inline const std::string& TaskRun::_internal_name() const {
  return name_.Get();
}
inline void TaskRun::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskRun::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskRun::release_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskRun.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskRun::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskRun.name)
}

// string message = 2 [json_name = "message"];
inline void TaskRun::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& TaskRun::message() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskRun.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskRun::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskRun.message)
}
inline std::string* TaskRun::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskRun.message)
  return _s;
}
inline const std::string& TaskRun::_internal_message() const {
  return message_.Get();
}
inline void TaskRun::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskRun::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskRun::release_message() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskRun.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskRun::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskRun.message)
}

// string reason = 3 [json_name = "reason"];
inline void TaskRun::clear_reason() {
  reason_.ClearToEmpty();
}
inline const std::string& TaskRun::reason() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskRun.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskRun::set_reason(ArgT0&& arg0, ArgT... args) {
 
 reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskRun.reason)
}
inline std::string* TaskRun::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskRun.reason)
  return _s;
}
inline const std::string& TaskRun::_internal_reason() const {
  return reason_.Get();
}
inline void TaskRun::_internal_set_reason(const std::string& value) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskRun::_internal_mutable_reason() {
  
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskRun::release_reason() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskRun.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskRun::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskRun.reason)
}

// string started_at = 4 [json_name = "startedAt"];
inline void TaskRun::clear_started_at() {
  started_at_.ClearToEmpty();
}
inline const std::string& TaskRun::started_at() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskRun.started_at)
  return _internal_started_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskRun::set_started_at(ArgT0&& arg0, ArgT... args) {
 
 started_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskRun.started_at)
}
inline std::string* TaskRun::mutable_started_at() {
  std::string* _s = _internal_mutable_started_at();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskRun.started_at)
  return _s;
}
inline const std::string& TaskRun::_internal_started_at() const {
  return started_at_.Get();
}
inline void TaskRun::_internal_set_started_at(const std::string& value) {
  
  started_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskRun::_internal_mutable_started_at() {
  
  return started_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskRun::release_started_at() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskRun.started_at)
  return started_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskRun::set_allocated_started_at(std::string* started_at) {
  if (started_at != nullptr) {
    
  } else {
    
  }
  started_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), started_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskRun.started_at)
}

// string finished_at = 5 [json_name = "finishedAt"];
inline void TaskRun::clear_finished_at() {
  finished_at_.ClearToEmpty();
}
inline const std::string& TaskRun::finished_at() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskRun.finished_at)
  return _internal_finished_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskRun::set_finished_at(ArgT0&& arg0, ArgT... args) {
 
 finished_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskRun.finished_at)
}
inline std::string* TaskRun::mutable_finished_at() {
  std::string* _s = _internal_mutable_finished_at();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskRun.finished_at)
  return _s;
}
inline const std::string& TaskRun::_internal_finished_at() const {
  return finished_at_.Get();
}
inline void TaskRun::_internal_set_finished_at(const std::string& value) {
  
  finished_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskRun::_internal_mutable_finished_at() {
  
  return finished_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskRun::release_finished_at() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskRun.finished_at)
  return finished_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskRun::set_allocated_finished_at(std::string* finished_at) {
  if (finished_at != nullptr) {
    
  } else {
    
  }
  finished_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), finished_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskRun.finished_at)
}

// string duration = 6 [json_name = "duration"];
inline void TaskRun::clear_duration() {
  duration_.ClearToEmpty();
}
inline const std::string& TaskRun::duration() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskRun.duration)
  return _internal_duration();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskRun::set_duration(ArgT0&& arg0, ArgT... args) {
 
 duration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskRun.duration)
}
inline std::string* TaskRun::mutable_duration() {
  std::string* _s = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskRun.duration)
  return _s;
}
inline const std::string& TaskRun::_internal_duration() const {
  return duration_.Get();
}
inline void TaskRun::_internal_set_duration(const std::string& value) {
  
  duration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskRun::_internal_mutable_duration() {
  
  return duration_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskRun::release_duration() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskRun.duration)
  return duration_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskRun::set_allocated_duration(std::string* duration) {
  if (duration != nullptr) {
    
  } else {
    
  }
  duration_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), duration,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskRun.duration)
}

// string task_run_status = 7 [json_name = "taskRunStatus"];
inline void TaskRun::clear_task_run_status() {
  task_run_status_.ClearToEmpty();
}
inline const std::string& TaskRun::task_run_status() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskRun.task_run_status)
  return _internal_task_run_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskRun::set_task_run_status(ArgT0&& arg0, ArgT... args) {
 
 task_run_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskRun.task_run_status)
}
inline std::string* TaskRun::mutable_task_run_status() {
  std::string* _s = _internal_mutable_task_run_status();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskRun.task_run_status)
  return _s;
}
inline const std::string& TaskRun::_internal_task_run_status() const {
  return task_run_status_.Get();
}
inline void TaskRun::_internal_set_task_run_status(const std::string& value) {
  
  task_run_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskRun::_internal_mutable_task_run_status() {
  
  return task_run_status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskRun::release_task_run_status() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskRun.task_run_status)
  return task_run_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskRun::set_allocated_task_run_status(std::string* task_run_status) {
  if (task_run_status != nullptr) {
    
  } else {
    
  }
  task_run_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_run_status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskRun.task_run_status)
}

// repeated .pipelines.tekton.v1alpha1.TaskRunStep task_run = 8 [json_name = "taskRun"];
inline int TaskRun::_internal_task_run_size() const {
  return task_run_.size();
}
inline int TaskRun::task_run_size() const {
  return _internal_task_run_size();
}
inline void TaskRun::clear_task_run() {
  task_run_.Clear();
}
inline ::pipelines::tekton::v1alpha1::TaskRunStep* TaskRun::mutable_task_run(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskRun.task_run)
  return task_run_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskRunStep >*
TaskRun::mutable_task_run() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.TaskRun.task_run)
  return &task_run_;
}
inline const ::pipelines::tekton::v1alpha1::TaskRunStep& TaskRun::_internal_task_run(int index) const {
  return task_run_.Get(index);
}
inline const ::pipelines::tekton::v1alpha1::TaskRunStep& TaskRun::task_run(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskRun.task_run)
  return _internal_task_run(index);
}
inline ::pipelines::tekton::v1alpha1::TaskRunStep* TaskRun::_internal_add_task_run() {
  return task_run_.Add();
}
inline ::pipelines::tekton::v1alpha1::TaskRunStep* TaskRun::add_task_run() {
  ::pipelines::tekton::v1alpha1::TaskRunStep* _add = _internal_add_task_run();
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.TaskRun.task_run)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::TaskRunStep >&
TaskRun::task_run() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.TaskRun.task_run)
  return task_run_;
}

// -------------------------------------------------------------------

// TaskRunStep

// string name = 1 [json_name = "name"];
inline void TaskRunStep::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& TaskRunStep::name() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskRunStep.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskRunStep::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskRunStep.name)
}
inline std::string* TaskRunStep::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskRunStep.name)
  return _s;
}
inline const std::string& TaskRunStep::_internal_name() const {
  return name_.Get();
}
inline void TaskRunStep::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskRunStep::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskRunStep::release_name() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskRunStep.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskRunStep::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskRunStep.name)
}

// string message = 2 [json_name = "message"];
inline void TaskRunStep::clear_message() {
  message_.ClearToEmpty();
}
inline const std::string& TaskRunStep::message() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskRunStep.message)
  return _internal_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskRunStep::set_message(ArgT0&& arg0, ArgT... args) {
 
 message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskRunStep.message)
}
inline std::string* TaskRunStep::mutable_message() {
  std::string* _s = _internal_mutable_message();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskRunStep.message)
  return _s;
}
inline const std::string& TaskRunStep::_internal_message() const {
  return message_.Get();
}
inline void TaskRunStep::_internal_set_message(const std::string& value) {
  
  message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskRunStep::_internal_mutable_message() {
  
  return message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskRunStep::release_message() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskRunStep.message)
  return message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskRunStep::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskRunStep.message)
}

// string reason = 3 [json_name = "reason"];
inline void TaskRunStep::clear_reason() {
  reason_.ClearToEmpty();
}
inline const std::string& TaskRunStep::reason() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskRunStep.reason)
  return _internal_reason();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskRunStep::set_reason(ArgT0&& arg0, ArgT... args) {
 
 reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskRunStep.reason)
}
inline std::string* TaskRunStep::mutable_reason() {
  std::string* _s = _internal_mutable_reason();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskRunStep.reason)
  return _s;
}
inline const std::string& TaskRunStep::_internal_reason() const {
  return reason_.Get();
}
inline void TaskRunStep::_internal_set_reason(const std::string& value) {
  
  reason_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskRunStep::_internal_mutable_reason() {
  
  return reason_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskRunStep::release_reason() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskRunStep.reason)
  return reason_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskRunStep::set_allocated_reason(std::string* reason) {
  if (reason != nullptr) {
    
  } else {
    
  }
  reason_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reason,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskRunStep.reason)
}

// string started_at = 4 [json_name = "startedAt"];
inline void TaskRunStep::clear_started_at() {
  started_at_.ClearToEmpty();
}
inline const std::string& TaskRunStep::started_at() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskRunStep.started_at)
  return _internal_started_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskRunStep::set_started_at(ArgT0&& arg0, ArgT... args) {
 
 started_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskRunStep.started_at)
}
inline std::string* TaskRunStep::mutable_started_at() {
  std::string* _s = _internal_mutable_started_at();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskRunStep.started_at)
  return _s;
}
inline const std::string& TaskRunStep::_internal_started_at() const {
  return started_at_.Get();
}
inline void TaskRunStep::_internal_set_started_at(const std::string& value) {
  
  started_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskRunStep::_internal_mutable_started_at() {
  
  return started_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskRunStep::release_started_at() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskRunStep.started_at)
  return started_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskRunStep::set_allocated_started_at(std::string* started_at) {
  if (started_at != nullptr) {
    
  } else {
    
  }
  started_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), started_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskRunStep.started_at)
}

// string finished_at = 5 [json_name = "finishedAt"];
inline void TaskRunStep::clear_finished_at() {
  finished_at_.ClearToEmpty();
}
inline const std::string& TaskRunStep::finished_at() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskRunStep.finished_at)
  return _internal_finished_at();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskRunStep::set_finished_at(ArgT0&& arg0, ArgT... args) {
 
 finished_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskRunStep.finished_at)
}
inline std::string* TaskRunStep::mutable_finished_at() {
  std::string* _s = _internal_mutable_finished_at();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskRunStep.finished_at)
  return _s;
}
inline const std::string& TaskRunStep::_internal_finished_at() const {
  return finished_at_.Get();
}
inline void TaskRunStep::_internal_set_finished_at(const std::string& value) {
  
  finished_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskRunStep::_internal_mutable_finished_at() {
  
  return finished_at_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskRunStep::release_finished_at() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskRunStep.finished_at)
  return finished_at_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskRunStep::set_allocated_finished_at(std::string* finished_at) {
  if (finished_at != nullptr) {
    
  } else {
    
  }
  finished_at_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), finished_at,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskRunStep.finished_at)
}

// string duration = 6 [json_name = "duration"];
inline void TaskRunStep::clear_duration() {
  duration_.ClearToEmpty();
}
inline const std::string& TaskRunStep::duration() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskRunStep.duration)
  return _internal_duration();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskRunStep::set_duration(ArgT0&& arg0, ArgT... args) {
 
 duration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskRunStep.duration)
}
inline std::string* TaskRunStep::mutable_duration() {
  std::string* _s = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskRunStep.duration)
  return _s;
}
inline const std::string& TaskRunStep::_internal_duration() const {
  return duration_.Get();
}
inline void TaskRunStep::_internal_set_duration(const std::string& value) {
  
  duration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskRunStep::_internal_mutable_duration() {
  
  return duration_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskRunStep::release_duration() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskRunStep.duration)
  return duration_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskRunStep::set_allocated_duration(std::string* duration) {
  if (duration != nullptr) {
    
  } else {
    
  }
  duration_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), duration,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskRunStep.duration)
}

// string task_run_step_status = 7 [json_name = "taskRunStepStatus"];
inline void TaskRunStep::clear_task_run_step_status() {
  task_run_step_status_.ClearToEmpty();
}
inline const std::string& TaskRunStep::task_run_step_status() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.TaskRunStep.task_run_step_status)
  return _internal_task_run_step_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TaskRunStep::set_task_run_step_status(ArgT0&& arg0, ArgT... args) {
 
 task_run_step_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.TaskRunStep.task_run_step_status)
}
inline std::string* TaskRunStep::mutable_task_run_step_status() {
  std::string* _s = _internal_mutable_task_run_step_status();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.TaskRunStep.task_run_step_status)
  return _s;
}
inline const std::string& TaskRunStep::_internal_task_run_step_status() const {
  return task_run_step_status_.Get();
}
inline void TaskRunStep::_internal_set_task_run_step_status(const std::string& value) {
  
  task_run_step_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* TaskRunStep::_internal_mutable_task_run_step_status() {
  
  return task_run_step_status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* TaskRunStep::release_task_run_step_status() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.TaskRunStep.task_run_step_status)
  return task_run_step_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void TaskRunStep::set_allocated_task_run_step_status(std::string* task_run_step_status) {
  if (task_run_step_status != nullptr) {
    
  } else {
    
  }
  task_run_step_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_run_step_status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.TaskRunStep.task_run_step_status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace tekton
}  // namespace pipelines

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto
