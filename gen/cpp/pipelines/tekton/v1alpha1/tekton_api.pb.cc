// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipelines/tekton/v1alpha1/tekton_api.proto

#include "pipelines/tekton/v1alpha1/tekton_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pipelines {
namespace tekton {
namespace v1alpha1 {
constexpr CreateTektonPipelineRequest::CreateTektonPipelineRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tekton_pipeline_(nullptr){}
struct CreateTektonPipelineRequestDefaultTypeInternal {
  constexpr CreateTektonPipelineRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateTektonPipelineRequestDefaultTypeInternal() {}
  union {
    CreateTektonPipelineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateTektonPipelineRequestDefaultTypeInternal _CreateTektonPipelineRequest_default_instance_;
constexpr CreateTektonPipelineResponse::CreateTektonPipelineResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tekton_pipeline_(nullptr){}
struct CreateTektonPipelineResponseDefaultTypeInternal {
  constexpr CreateTektonPipelineResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateTektonPipelineResponseDefaultTypeInternal() {}
  union {
    CreateTektonPipelineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateTektonPipelineResponseDefaultTypeInternal _CreateTektonPipelineResponse_default_instance_;
constexpr DeleteTektonPipelineRequest::DeleteTektonPipelineRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : runtime_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , application_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , environment_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteTektonPipelineRequestDefaultTypeInternal {
  constexpr DeleteTektonPipelineRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteTektonPipelineRequestDefaultTypeInternal() {}
  union {
    DeleteTektonPipelineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteTektonPipelineRequestDefaultTypeInternal _DeleteTektonPipelineRequest_default_instance_;
constexpr DeleteTektonPipelineResponse::DeleteTektonPipelineResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteTektonPipelineResponseDefaultTypeInternal {
  constexpr DeleteTektonPipelineResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteTektonPipelineResponseDefaultTypeInternal() {}
  union {
    DeleteTektonPipelineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteTektonPipelineResponseDefaultTypeInternal _DeleteTektonPipelineResponse_default_instance_;
constexpr ListTektonTaskPipelineRequest::ListTektonTaskPipelineRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ListTektonTaskPipelineRequestDefaultTypeInternal {
  constexpr ListTektonTaskPipelineRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListTektonTaskPipelineRequestDefaultTypeInternal() {}
  union {
    ListTektonTaskPipelineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListTektonTaskPipelineRequestDefaultTypeInternal _ListTektonTaskPipelineRequest_default_instance_;
constexpr ListTektonTaskPipelineResponse::ListTektonTaskPipelineResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , task_list_(nullptr){}
struct ListTektonTaskPipelineResponseDefaultTypeInternal {
  constexpr ListTektonTaskPipelineResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListTektonTaskPipelineResponseDefaultTypeInternal() {}
  union {
    ListTektonTaskPipelineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListTektonTaskPipelineResponseDefaultTypeInternal _ListTektonTaskPipelineResponse_default_instance_;
constexpr GetPipelineRunRequest::GetPipelineRunRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : runtime_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetPipelineRunRequestDefaultTypeInternal {
  constexpr GetPipelineRunRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPipelineRunRequestDefaultTypeInternal() {}
  union {
    GetPipelineRunRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPipelineRunRequestDefaultTypeInternal _GetPipelineRunRequest_default_instance_;
constexpr GetPipelineRunResponse::GetPipelineRunResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pipeline_run_(nullptr){}
struct GetPipelineRunResponseDefaultTypeInternal {
  constexpr GetPipelineRunResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetPipelineRunResponseDefaultTypeInternal() {}
  union {
    GetPipelineRunResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetPipelineRunResponseDefaultTypeInternal _GetPipelineRunResponse_default_instance_;
constexpr ListPipelineRunRequest::ListPipelineRunRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : runtime_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ListPipelineRunRequestDefaultTypeInternal {
  constexpr ListPipelineRunRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListPipelineRunRequestDefaultTypeInternal() {}
  union {
    ListPipelineRunRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListPipelineRunRequestDefaultTypeInternal _ListPipelineRunRequest_default_instance_;
constexpr ListPipelineRunResponse::ListPipelineRunResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pipeline_run_list_(nullptr){}
struct ListPipelineRunResponseDefaultTypeInternal {
  constexpr ListPipelineRunResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListPipelineRunResponseDefaultTypeInternal() {}
  union {
    ListPipelineRunResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListPipelineRunResponseDefaultTypeInternal _ListPipelineRunResponse_default_instance_;
constexpr GetStatusRuntimeRequest::GetStatusRuntimeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : runtime_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetStatusRuntimeRequestDefaultTypeInternal {
  constexpr GetStatusRuntimeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetStatusRuntimeRequestDefaultTypeInternal() {}
  union {
    GetStatusRuntimeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetStatusRuntimeRequestDefaultTypeInternal _GetStatusRuntimeRequest_default_instance_;
constexpr GetStatusRuntimeResponse::GetStatusRuntimeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_(nullptr){}
struct GetStatusRuntimeResponseDefaultTypeInternal {
  constexpr GetStatusRuntimeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetStatusRuntimeResponseDefaultTypeInternal() {}
  union {
    GetStatusRuntimeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetStatusRuntimeResponseDefaultTypeInternal _GetStatusRuntimeResponse_default_instance_;
constexpr ChangeStatusRuntimeAndApplicationRequest::ChangeStatusRuntimeAndApplicationRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : application_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , runtime_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , namespace__(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , runtime_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ChangeStatusRuntimeAndApplicationRequestDefaultTypeInternal {
  constexpr ChangeStatusRuntimeAndApplicationRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeStatusRuntimeAndApplicationRequestDefaultTypeInternal() {}
  union {
    ChangeStatusRuntimeAndApplicationRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeStatusRuntimeAndApplicationRequestDefaultTypeInternal _ChangeStatusRuntimeAndApplicationRequest_default_instance_;
constexpr ChangeStatusRuntimeAndApplicationResponse::ChangeStatusRuntimeAndApplicationResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ChangeStatusRuntimeAndApplicationResponseDefaultTypeInternal {
  constexpr ChangeStatusRuntimeAndApplicationResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChangeStatusRuntimeAndApplicationResponseDefaultTypeInternal() {}
  union {
    ChangeStatusRuntimeAndApplicationResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChangeStatusRuntimeAndApplicationResponseDefaultTypeInternal _ChangeStatusRuntimeAndApplicationResponse_default_instance_;
constexpr RebuildTektonPipelineRequest::RebuildTektonPipelineRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tekton_pipeline_(nullptr){}
struct RebuildTektonPipelineRequestDefaultTypeInternal {
  constexpr RebuildTektonPipelineRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RebuildTektonPipelineRequestDefaultTypeInternal() {}
  union {
    RebuildTektonPipelineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RebuildTektonPipelineRequestDefaultTypeInternal _RebuildTektonPipelineRequest_default_instance_;
constexpr RebuildTektonPipelineResponse::RebuildTektonPipelineResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tekton_pipeline_(nullptr){}
struct RebuildTektonPipelineResponseDefaultTypeInternal {
  constexpr RebuildTektonPipelineResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RebuildTektonPipelineResponseDefaultTypeInternal() {}
  union {
    RebuildTektonPipelineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RebuildTektonPipelineResponseDefaultTypeInternal _RebuildTektonPipelineResponse_default_instance_;
constexpr MakeRollbackRuntimeRequest::MakeRollbackRuntimeRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : application_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , runtime_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tag_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , runtime_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , namespace__(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MakeRollbackRuntimeRequestDefaultTypeInternal {
  constexpr MakeRollbackRuntimeRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MakeRollbackRuntimeRequestDefaultTypeInternal() {}
  union {
    MakeRollbackRuntimeRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MakeRollbackRuntimeRequestDefaultTypeInternal _MakeRollbackRuntimeRequest_default_instance_;
constexpr MakeRollbackRuntimeResponse::MakeRollbackRuntimeResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct MakeRollbackRuntimeResponseDefaultTypeInternal {
  constexpr MakeRollbackRuntimeResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MakeRollbackRuntimeResponseDefaultTypeInternal() {}
  union {
    MakeRollbackRuntimeResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MakeRollbackRuntimeResponseDefaultTypeInternal _MakeRollbackRuntimeResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace tekton
}  // namespace pipelines
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[18];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest, tekton_pipeline_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse, tekton_pipeline_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest, runtime_name_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest, application_id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest, environment_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ListTektonTaskPipelineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse, task_list_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::GetPipelineRunRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::GetPipelineRunRequest, runtime_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::GetPipelineRunResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::GetPipelineRunResponse, pipeline_run_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::GetPipelineRunResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ListPipelineRunRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ListPipelineRunRequest, runtime_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ListPipelineRunResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ListPipelineRunResponse, pipeline_run_list_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ListPipelineRunResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::GetStatusRuntimeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::GetStatusRuntimeRequest, runtime_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::GetStatusRuntimeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::GetStatusRuntimeResponse, event_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationRequest, application_id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationRequest, project_id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationRequest, organization_id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationRequest, runtime_name_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationRequest, namespace__),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationRequest, runtime_id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationRequest, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationResponse, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::RebuildTektonPipelineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::RebuildTektonPipelineRequest, tekton_pipeline_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::RebuildTektonPipelineRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::RebuildTektonPipelineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::RebuildTektonPipelineResponse, tekton_pipeline_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::RebuildTektonPipelineResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::MakeRollbackRuntimeRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::MakeRollbackRuntimeRequest, application_id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::MakeRollbackRuntimeRequest, project_id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::MakeRollbackRuntimeRequest, organization_id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::MakeRollbackRuntimeRequest, runtime_id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::MakeRollbackRuntimeRequest, tag_name_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::MakeRollbackRuntimeRequest, runtime_name_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::MakeRollbackRuntimeRequest, namespace__),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::MakeRollbackRuntimeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::MakeRollbackRuntimeResponse, msg_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::MakeRollbackRuntimeResponse, error_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest)},
  { 7, -1, sizeof(::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse)},
  { 14, -1, sizeof(::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest)},
  { 22, -1, sizeof(::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse)},
  { 28, -1, sizeof(::pipelines::tekton::v1alpha1::ListTektonTaskPipelineRequest)},
  { 33, -1, sizeof(::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse)},
  { 40, -1, sizeof(::pipelines::tekton::v1alpha1::GetPipelineRunRequest)},
  { 46, -1, sizeof(::pipelines::tekton::v1alpha1::GetPipelineRunResponse)},
  { 53, -1, sizeof(::pipelines::tekton::v1alpha1::ListPipelineRunRequest)},
  { 59, -1, sizeof(::pipelines::tekton::v1alpha1::ListPipelineRunResponse)},
  { 66, -1, sizeof(::pipelines::tekton::v1alpha1::GetStatusRuntimeRequest)},
  { 72, -1, sizeof(::pipelines::tekton::v1alpha1::GetStatusRuntimeResponse)},
  { 78, -1, sizeof(::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationRequest)},
  { 90, -1, sizeof(::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationResponse)},
  { 97, -1, sizeof(::pipelines::tekton::v1alpha1::RebuildTektonPipelineRequest)},
  { 104, -1, sizeof(::pipelines::tekton::v1alpha1::RebuildTektonPipelineResponse)},
  { 111, -1, sizeof(::pipelines::tekton::v1alpha1::MakeRollbackRuntimeRequest)},
  { 123, -1, sizeof(::pipelines::tekton::v1alpha1::MakeRollbackRuntimeResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_CreateTektonPipelineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_CreateTektonPipelineResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_DeleteTektonPipelineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_DeleteTektonPipelineResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_ListTektonTaskPipelineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_ListTektonTaskPipelineResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_GetPipelineRunRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_GetPipelineRunResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_ListPipelineRunRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_ListPipelineRunResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_GetStatusRuntimeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_GetStatusRuntimeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_ChangeStatusRuntimeAndApplicationRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_ChangeStatusRuntimeAndApplicationResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_RebuildTektonPipelineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_RebuildTektonPipelineResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_MakeRollbackRuntimeRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_MakeRollbackRuntimeResponse_default_instance_),
};

const char descriptor_table_protodef_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*pipelines/tekton/v1alpha1/tekton_api.p"
  "roto\022\031pipelines.tekton.v1alpha1\032&pipelin"
  "es/tekton/v1alpha1/tekton.proto\"\204\001\n\033Crea"
  "teTektonPipelineRequest\022L\n\017tekton_pipeli"
  "ne\030\001 \001(\0132#.pipelines.tekton.v1alpha1.Pip"
  "elineR\016tektonPipeline\022\027\n\007user_id\030\002 \001(\tR\006"
  "userId\"\204\001\n\034CreateTektonPipelineResponse\022"
  "L\n\017tekton_pipeline\030\001 \001(\0132#.pipelines.tek"
  "ton.v1alpha1.PipelineR\016tektonPipeline\022\026\n"
  "\006status\030\002 \001(\tR\006status\"\216\001\n\033DeleteTektonPi"
  "pelineRequest\022!\n\014runtime_name\030\001 \001(\tR\013run"
  "timeName\022%\n\016application_id\030\002 \001(\tR\rapplic"
  "ationId\022%\n\016environment_id\030\003 \001(\tR\renviron"
  "mentId\"6\n\034DeleteTektonPipelineResponse\022\026"
  "\n\006status\030\001 \001(\tR\006status\"\037\n\035ListTektonTask"
  "PipelineRequest\"\200\001\n\036ListTektonTaskPipeli"
  "neResponse\022F\n\ttask_list\030\001 \001(\0132).pipeline"
  "s.tekton.v1alpha1.TektonTaskListR\010taskLi"
  "st\022\026\n\006status\030\002 \001(\tR\006status\"6\n\025GetPipelin"
  "eRunRequest\022\035\n\nruntime_id\030\001 \001(\tR\truntime"
  "Id\"{\n\026GetPipelineRunResponse\022I\n\014pipeline"
  "_run\030\001 \001(\0132&.pipelines.tekton.v1alpha1.P"
  "ipelineRunR\013pipelineRun\022\026\n\006status\030\002 \001(\tR"
  "\006status\"7\n\026ListPipelineRunRequest\022\035\n\nrun"
  "time_id\030\001 \001(\tR\truntimeId\"\211\001\n\027ListPipelin"
  "eRunResponse\022V\n\021pipeline_run_list\030\001 \001(\0132"
  "*.pipelines.tekton.v1alpha1.PipelineRunL"
  "istR\017pipelineRunList\022\026\n\006status\030\002 \001(\tR\006st"
  "atus\"8\n\027GetStatusRuntimeRequest\022\035\n\nrunti"
  "me_id\030\001 \001(\tR\truntimeId\"R\n\030GetStatusRunti"
  "meResponse\0226\n\005event\030\001 \001(\0132 .pipelines.te"
  "kton.v1alpha1.EventR\005event\"\221\002\n(ChangeSta"
  "tusRuntimeAndApplicationRequest\022%\n\016appli"
  "cation_id\030\001 \001(\tR\rapplicationId\022\035\n\nprojec"
  "t_id\030\002 \001(\tR\tprojectId\022\'\n\017organization_id"
  "\030\003 \001(\tR\016organizationId\022!\n\014runtime_name\030\004"
  " \001(\tR\013runtimeName\022\034\n\tnamespace\030\005 \001(\tR\tna"
  "mespace\022\035\n\nruntime_id\030\006 \001(\tR\truntimeId\022\026"
  "\n\006status\030\007 \001(\tR\006status\"S\n)ChangeStatusRu"
  "ntimeAndApplicationResponse\022\020\n\003msg\030\001 \001(\t"
  "R\003msg\022\024\n\005error\030\002 \001(\tR\005error\"\205\001\n\034RebuildT"
  "ektonPipelineRequest\022L\n\017tekton_pipeline\030"
  "\001 \001(\0132#.pipelines.tekton.v1alpha1.Pipeli"
  "neR\016tektonPipeline\022\027\n\007user_id\030\002 \001(\tR\006use"
  "rId\"\205\001\n\035RebuildTektonPipelineResponse\022L\n"
  "\017tekton_pipeline\030\001 \001(\0132#.pipelines.tekto"
  "n.v1alpha1.PipelineR\016tektonPipeline\022\026\n\006s"
  "tatus\030\002 \001(\tR\006status\"\206\002\n\032MakeRollbackRunt"
  "imeRequest\022%\n\016application_id\030\001 \001(\tR\rappl"
  "icationId\022\035\n\nproject_id\030\002 \001(\tR\tprojectId"
  "\022\'\n\017organization_id\030\003 \001(\tR\016organizationI"
  "d\022\035\n\nruntime_id\030\004 \001(\tR\truntimeId\022\031\n\010tag_"
  "name\030\005 \001(\tR\007tagName\022!\n\014runtime_name\030\006 \001("
  "\tR\013runtimeName\022\034\n\tnamespace\030\007 \001(\tR\tnames"
  "pace\"E\n\033MakeRollbackRuntimeResponse\022\020\n\003m"
  "sg\030\001 \001(\tR\003msg\022\024\n\005error\030\002 \001(\tR\005error2\367\t\n\030"
  "TektonPipelineAPIService\022\207\001\n\024CreateTekto"
  "nPipeline\0226.pipelines.tekton.v1alpha1.Cr"
  "eateTektonPipelineRequest\0327.pipelines.te"
  "kton.v1alpha1.CreateTektonPipelineRespon"
  "se\022\207\001\n\024DeleteTektonPipeline\0226.pipelines."
  "tekton.v1alpha1.DeleteTektonPipelineRequ"
  "est\0327.pipelines.tekton.v1alpha1.DeleteTe"
  "ktonPipelineResponse\022\215\001\n\026ListTektonTaskP"
  "ipeline\0228.pipelines.tekton.v1alpha1.List"
  "TektonTaskPipelineRequest\0329.pipelines.te"
  "kton.v1alpha1.ListTektonTaskPipelineResp"
  "onse\022u\n\016GetPipelineRun\0220.pipelines.tekto"
  "n.v1alpha1.GetPipelineRunRequest\0321.pipel"
  "ines.tekton.v1alpha1.GetPipelineRunRespo"
  "nse\022x\n\017ListPipelineRun\0221.pipelines.tekto"
  "n.v1alpha1.ListPipelineRunRequest\0322.pipe"
  "lines.tekton.v1alpha1.ListPipelineRunRes"
  "ponse\022}\n\020GetStatusRuntime\0222.pipelines.te"
  "kton.v1alpha1.GetStatusRuntimeRequest\0323."
  "pipelines.tekton.v1alpha1.GetStatusRunti"
  "meResponse0\001\022\260\001\n!ChangeStatusRuntimeAndA"
  "pplication\022C.pipelines.tekton.v1alpha1.C"
  "hangeStatusRuntimeAndApplicationRequest\032"
  "D.pipelines.tekton.v1alpha1.ChangeStatus"
  "RuntimeAndApplicationResponse\"\000\022\212\001\n\025Rebu"
  "ildTektonPipeline\0227.pipelines.tekton.v1a"
  "lpha1.RebuildTektonPipelineRequest\0328.pip"
  "elines.tekton.v1alpha1.RebuildTektonPipe"
  "lineResponse\022\206\001\n\023MakeRollbackRuntime\0225.p"
  "ipelines.tekton.v1alpha1.MakeRollbackRun"
  "timeRequest\0326.pipelines.tekton.v1alpha1."
  "MakeRollbackRuntimeResponse\"\000B\261\001\n#io.cue"
  "mby.pipelines.tekton.v1alpha1B\016TektonAPI"
  "ProtoP\001Z:github.com/cuemby/ccp-sdk/gen/g"
  "o/pipelines/tekton/v1alpha1\242\002\003PPX\252\002\031Pipe"
  "lines.Tekton.V1Alpha1\312\002\031Pipelines\\Tekton"
  "\\V1Alpha1b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_deps[1] = {
  &::descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto = {
  false, false, 3697, descriptor_table_protodef_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto, "pipelines/tekton/v1alpha1/tekton_api.proto", 
  &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once, descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_deps, 1, 18,
  schemas, file_default_instances, TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto::offsets,
  file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto, file_level_enum_descriptors_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto, file_level_service_descriptors_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter() {
  return &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto(&descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto);
namespace pipelines {
namespace tekton {
namespace v1alpha1 {

// ===================================================================

class CreateTektonPipelineRequest::_Internal {
 public:
  static const ::pipelines::tekton::v1alpha1::Pipeline& tekton_pipeline(const CreateTektonPipelineRequest* msg);
};

const ::pipelines::tekton::v1alpha1::Pipeline&
CreateTektonPipelineRequest::_Internal::tekton_pipeline(const CreateTektonPipelineRequest* msg) {
  return *msg->tekton_pipeline_;
}
void CreateTektonPipelineRequest::clear_tekton_pipeline() {
  if (GetArenaForAllocation() == nullptr && tekton_pipeline_ != nullptr) {
    delete tekton_pipeline_;
  }
  tekton_pipeline_ = nullptr;
}
CreateTektonPipelineRequest::CreateTektonPipelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest)
}
CreateTektonPipelineRequest::CreateTektonPipelineRequest(const CreateTektonPipelineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tekton_pipeline()) {
    tekton_pipeline_ = new ::pipelines::tekton::v1alpha1::Pipeline(*from.tekton_pipeline_);
  } else {
    tekton_pipeline_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest)
}

inline void CreateTektonPipelineRequest::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tekton_pipeline_ = nullptr;
}

CreateTektonPipelineRequest::~CreateTektonPipelineRequest() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateTektonPipelineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tekton_pipeline_;
}

void CreateTektonPipelineRequest::ArenaDtor(void* object) {
  CreateTektonPipelineRequest* _this = reinterpret_cast< CreateTektonPipelineRequest* >(object);
  (void)_this;
}
void CreateTektonPipelineRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTektonPipelineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateTektonPipelineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && tekton_pipeline_ != nullptr) {
    delete tekton_pipeline_;
  }
  tekton_pipeline_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTektonPipelineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tekton_pipeline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 2 [json_name = "userId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.CreateTektonPipelineRequest.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTektonPipelineRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
  if (this->_internal_has_tekton_pipeline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tekton_pipeline(this), target, stream);
  }

  // string user_id = 2 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.CreateTektonPipelineRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest)
  return target;
}

size_t CreateTektonPipelineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 2 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
  if (this->_internal_has_tekton_pipeline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tekton_pipeline_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTektonPipelineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateTektonPipelineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTektonPipelineRequest::GetClassData() const { return &_class_data_; }

void CreateTektonPipelineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateTektonPipelineRequest *>(to)->MergeFrom(
      static_cast<const CreateTektonPipelineRequest &>(from));
}


void CreateTektonPipelineRequest::MergeFrom(const CreateTektonPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_tekton_pipeline()) {
    _internal_mutable_tekton_pipeline()->::pipelines::tekton::v1alpha1::Pipeline::MergeFrom(from._internal_tekton_pipeline());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTektonPipelineRequest::CopyFrom(const CreateTektonPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTektonPipelineRequest::IsInitialized() const {
  return true;
}

void CreateTektonPipelineRequest::InternalSwap(CreateTektonPipelineRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  swap(tekton_pipeline_, other->tekton_pipeline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTektonPipelineRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[0]);
}

// ===================================================================

class CreateTektonPipelineResponse::_Internal {
 public:
  static const ::pipelines::tekton::v1alpha1::Pipeline& tekton_pipeline(const CreateTektonPipelineResponse* msg);
};

const ::pipelines::tekton::v1alpha1::Pipeline&
CreateTektonPipelineResponse::_Internal::tekton_pipeline(const CreateTektonPipelineResponse* msg) {
  return *msg->tekton_pipeline_;
}
void CreateTektonPipelineResponse::clear_tekton_pipeline() {
  if (GetArenaForAllocation() == nullptr && tekton_pipeline_ != nullptr) {
    delete tekton_pipeline_;
  }
  tekton_pipeline_ = nullptr;
}
CreateTektonPipelineResponse::CreateTektonPipelineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse)
}
CreateTektonPipelineResponse::CreateTektonPipelineResponse(const CreateTektonPipelineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tekton_pipeline()) {
    tekton_pipeline_ = new ::pipelines::tekton::v1alpha1::Pipeline(*from.tekton_pipeline_);
  } else {
    tekton_pipeline_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse)
}

inline void CreateTektonPipelineResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tekton_pipeline_ = nullptr;
}

CreateTektonPipelineResponse::~CreateTektonPipelineResponse() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateTektonPipelineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tekton_pipeline_;
}

void CreateTektonPipelineResponse::ArenaDtor(void* object) {
  CreateTektonPipelineResponse* _this = reinterpret_cast< CreateTektonPipelineResponse* >(object);
  (void)_this;
}
void CreateTektonPipelineResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTektonPipelineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateTektonPipelineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && tekton_pipeline_ != nullptr) {
    delete tekton_pipeline_;
  }
  tekton_pipeline_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTektonPipelineResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tekton_pipeline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.CreateTektonPipelineResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTektonPipelineResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
  if (this->_internal_has_tekton_pipeline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tekton_pipeline(this), target, stream);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.CreateTektonPipelineResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse)
  return target;
}

size_t CreateTektonPipelineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
  if (this->_internal_has_tekton_pipeline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tekton_pipeline_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTektonPipelineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateTektonPipelineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTektonPipelineResponse::GetClassData() const { return &_class_data_; }

void CreateTektonPipelineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateTektonPipelineResponse *>(to)->MergeFrom(
      static_cast<const CreateTektonPipelineResponse &>(from));
}


void CreateTektonPipelineResponse::MergeFrom(const CreateTektonPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_tekton_pipeline()) {
    _internal_mutable_tekton_pipeline()->::pipelines::tekton::v1alpha1::Pipeline::MergeFrom(from._internal_tekton_pipeline());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTektonPipelineResponse::CopyFrom(const CreateTektonPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTektonPipelineResponse::IsInitialized() const {
  return true;
}

void CreateTektonPipelineResponse::InternalSwap(CreateTektonPipelineResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
  swap(tekton_pipeline_, other->tekton_pipeline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTektonPipelineResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[1]);
}

// ===================================================================

class DeleteTektonPipelineRequest::_Internal {
 public:
};

DeleteTektonPipelineRequest::DeleteTektonPipelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest)
}
DeleteTektonPipelineRequest::DeleteTektonPipelineRequest(const DeleteTektonPipelineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  runtime_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runtime_name().empty()) {
    runtime_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_runtime_name(), 
      GetArenaForAllocation());
  }
  application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_application_id().empty()) {
    application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_application_id(), 
      GetArenaForAllocation());
  }
  environment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_environment_id().empty()) {
    environment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_environment_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest)
}

inline void DeleteTektonPipelineRequest::SharedCtor() {
runtime_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
environment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteTektonPipelineRequest::~DeleteTektonPipelineRequest() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteTektonPipelineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  runtime_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  application_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  environment_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteTektonPipelineRequest::ArenaDtor(void* object) {
  DeleteTektonPipelineRequest* _this = reinterpret_cast< DeleteTektonPipelineRequest* >(object);
  (void)_this;
}
void DeleteTektonPipelineRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteTektonPipelineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteTektonPipelineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  runtime_name_.ClearToEmpty();
  application_id_.ClearToEmpty();
  environment_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTektonPipelineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string runtime_name = 1 [json_name = "runtimeName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_runtime_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.runtime_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string application_id = 2 [json_name = "applicationId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_application_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.application_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string environment_id = 3 [json_name = "environmentId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_environment_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.environment_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTektonPipelineRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string runtime_name = 1 [json_name = "runtimeName"];
  if (!this->_internal_runtime_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime_name().data(), static_cast<int>(this->_internal_runtime_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.runtime_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_runtime_name(), target);
  }

  // string application_id = 2 [json_name = "applicationId"];
  if (!this->_internal_application_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_application_id().data(), static_cast<int>(this->_internal_application_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.application_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_application_id(), target);
  }

  // string environment_id = 3 [json_name = "environmentId"];
  if (!this->_internal_environment_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_environment_id().data(), static_cast<int>(this->_internal_environment_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.environment_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_environment_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest)
  return target;
}

size_t DeleteTektonPipelineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string runtime_name = 1 [json_name = "runtimeName"];
  if (!this->_internal_runtime_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtime_name());
  }

  // string application_id = 2 [json_name = "applicationId"];
  if (!this->_internal_application_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_application_id());
  }

  // string environment_id = 3 [json_name = "environmentId"];
  if (!this->_internal_environment_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_environment_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteTektonPipelineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteTektonPipelineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteTektonPipelineRequest::GetClassData() const { return &_class_data_; }

void DeleteTektonPipelineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteTektonPipelineRequest *>(to)->MergeFrom(
      static_cast<const DeleteTektonPipelineRequest &>(from));
}


void DeleteTektonPipelineRequest::MergeFrom(const DeleteTektonPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_runtime_name().empty()) {
    _internal_set_runtime_name(from._internal_runtime_name());
  }
  if (!from._internal_application_id().empty()) {
    _internal_set_application_id(from._internal_application_id());
  }
  if (!from._internal_environment_id().empty()) {
    _internal_set_environment_id(from._internal_environment_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteTektonPipelineRequest::CopyFrom(const DeleteTektonPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTektonPipelineRequest::IsInitialized() const {
  return true;
}

void DeleteTektonPipelineRequest::InternalSwap(DeleteTektonPipelineRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &runtime_name_, GetArenaForAllocation(),
      &other->runtime_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &application_id_, GetArenaForAllocation(),
      &other->application_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &environment_id_, GetArenaForAllocation(),
      &other->environment_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTektonPipelineRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[2]);
}

// ===================================================================

class DeleteTektonPipelineResponse::_Internal {
 public:
};

DeleteTektonPipelineResponse::DeleteTektonPipelineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse)
}
DeleteTektonPipelineResponse::DeleteTektonPipelineResponse(const DeleteTektonPipelineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse)
}

inline void DeleteTektonPipelineResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteTektonPipelineResponse::~DeleteTektonPipelineResponse() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteTektonPipelineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteTektonPipelineResponse::ArenaDtor(void* object) {
  DeleteTektonPipelineResponse* _this = reinterpret_cast< DeleteTektonPipelineResponse* >(object);
  (void)_this;
}
void DeleteTektonPipelineResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteTektonPipelineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteTektonPipelineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTektonPipelineResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTektonPipelineResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse)
  return target;
}

size_t DeleteTektonPipelineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteTektonPipelineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteTektonPipelineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteTektonPipelineResponse::GetClassData() const { return &_class_data_; }

void DeleteTektonPipelineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteTektonPipelineResponse *>(to)->MergeFrom(
      static_cast<const DeleteTektonPipelineResponse &>(from));
}


void DeleteTektonPipelineResponse::MergeFrom(const DeleteTektonPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteTektonPipelineResponse::CopyFrom(const DeleteTektonPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTektonPipelineResponse::IsInitialized() const {
  return true;
}

void DeleteTektonPipelineResponse::InternalSwap(DeleteTektonPipelineResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTektonPipelineResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[3]);
}

// ===================================================================

class ListTektonTaskPipelineRequest::_Internal {
 public:
};

ListTektonTaskPipelineRequest::ListTektonTaskPipelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.ListTektonTaskPipelineRequest)
}
ListTektonTaskPipelineRequest::ListTektonTaskPipelineRequest(const ListTektonTaskPipelineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.ListTektonTaskPipelineRequest)
}

inline void ListTektonTaskPipelineRequest::SharedCtor() {
}

ListTektonTaskPipelineRequest::~ListTektonTaskPipelineRequest() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.ListTektonTaskPipelineRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListTektonTaskPipelineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListTektonTaskPipelineRequest::ArenaDtor(void* object) {
  ListTektonTaskPipelineRequest* _this = reinterpret_cast< ListTektonTaskPipelineRequest* >(object);
  (void)_this;
}
void ListTektonTaskPipelineRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTektonTaskPipelineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListTektonTaskPipelineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.ListTektonTaskPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTektonTaskPipelineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTektonTaskPipelineRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.ListTektonTaskPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.ListTektonTaskPipelineRequest)
  return target;
}

size_t ListTektonTaskPipelineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.ListTektonTaskPipelineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListTektonTaskPipelineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListTektonTaskPipelineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListTektonTaskPipelineRequest::GetClassData() const { return &_class_data_; }

void ListTektonTaskPipelineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListTektonTaskPipelineRequest *>(to)->MergeFrom(
      static_cast<const ListTektonTaskPipelineRequest &>(from));
}


void ListTektonTaskPipelineRequest::MergeFrom(const ListTektonTaskPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.ListTektonTaskPipelineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListTektonTaskPipelineRequest::CopyFrom(const ListTektonTaskPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.ListTektonTaskPipelineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTektonTaskPipelineRequest::IsInitialized() const {
  return true;
}

void ListTektonTaskPipelineRequest::InternalSwap(ListTektonTaskPipelineRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTektonTaskPipelineRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[4]);
}

// ===================================================================

class ListTektonTaskPipelineResponse::_Internal {
 public:
  static const ::pipelines::tekton::v1alpha1::TektonTaskList& task_list(const ListTektonTaskPipelineResponse* msg);
};

const ::pipelines::tekton::v1alpha1::TektonTaskList&
ListTektonTaskPipelineResponse::_Internal::task_list(const ListTektonTaskPipelineResponse* msg) {
  return *msg->task_list_;
}
void ListTektonTaskPipelineResponse::clear_task_list() {
  if (GetArenaForAllocation() == nullptr && task_list_ != nullptr) {
    delete task_list_;
  }
  task_list_ = nullptr;
}
ListTektonTaskPipelineResponse::ListTektonTaskPipelineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse)
}
ListTektonTaskPipelineResponse::ListTektonTaskPipelineResponse(const ListTektonTaskPipelineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_task_list()) {
    task_list_ = new ::pipelines::tekton::v1alpha1::TektonTaskList(*from.task_list_);
  } else {
    task_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse)
}

inline void ListTektonTaskPipelineResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
task_list_ = nullptr;
}

ListTektonTaskPipelineResponse::~ListTektonTaskPipelineResponse() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListTektonTaskPipelineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete task_list_;
}

void ListTektonTaskPipelineResponse::ArenaDtor(void* object) {
  ListTektonTaskPipelineResponse* _this = reinterpret_cast< ListTektonTaskPipelineResponse* >(object);
  (void)_this;
}
void ListTektonTaskPipelineResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTektonTaskPipelineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListTektonTaskPipelineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && task_list_ != nullptr) {
    delete task_list_;
  }
  task_list_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTektonTaskPipelineResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pipelines.tekton.v1alpha1.TektonTaskList task_list = 1 [json_name = "taskList"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTektonTaskPipelineResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.TektonTaskList task_list = 1 [json_name = "taskList"];
  if (this->_internal_has_task_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task_list(this), target, stream);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse)
  return target;
}

size_t ListTektonTaskPipelineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .pipelines.tekton.v1alpha1.TektonTaskList task_list = 1 [json_name = "taskList"];
  if (this->_internal_has_task_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_list_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListTektonTaskPipelineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListTektonTaskPipelineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListTektonTaskPipelineResponse::GetClassData() const { return &_class_data_; }

void ListTektonTaskPipelineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListTektonTaskPipelineResponse *>(to)->MergeFrom(
      static_cast<const ListTektonTaskPipelineResponse &>(from));
}


void ListTektonTaskPipelineResponse::MergeFrom(const ListTektonTaskPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_task_list()) {
    _internal_mutable_task_list()->::pipelines::tekton::v1alpha1::TektonTaskList::MergeFrom(from._internal_task_list());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListTektonTaskPipelineResponse::CopyFrom(const ListTektonTaskPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTektonTaskPipelineResponse::IsInitialized() const {
  return true;
}

void ListTektonTaskPipelineResponse::InternalSwap(ListTektonTaskPipelineResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
  swap(task_list_, other->task_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTektonTaskPipelineResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[5]);
}

// ===================================================================

class GetPipelineRunRequest::_Internal {
 public:
};

GetPipelineRunRequest::GetPipelineRunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.GetPipelineRunRequest)
}
GetPipelineRunRequest::GetPipelineRunRequest(const GetPipelineRunRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  runtime_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runtime_id().empty()) {
    runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_runtime_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.GetPipelineRunRequest)
}

inline void GetPipelineRunRequest::SharedCtor() {
runtime_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetPipelineRunRequest::~GetPipelineRunRequest() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.GetPipelineRunRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetPipelineRunRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  runtime_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetPipelineRunRequest::ArenaDtor(void* object) {
  GetPipelineRunRequest* _this = reinterpret_cast< GetPipelineRunRequest* >(object);
  (void)_this;
}
void GetPipelineRunRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPipelineRunRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPipelineRunRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.GetPipelineRunRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  runtime_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPipelineRunRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string runtime_id = 1 [json_name = "runtimeId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_runtime_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.GetPipelineRunRequest.runtime_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPipelineRunRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.GetPipelineRunRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string runtime_id = 1 [json_name = "runtimeId"];
  if (!this->_internal_runtime_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime_id().data(), static_cast<int>(this->_internal_runtime_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.GetPipelineRunRequest.runtime_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_runtime_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.GetPipelineRunRequest)
  return target;
}

size_t GetPipelineRunRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.GetPipelineRunRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string runtime_id = 1 [json_name = "runtimeId"];
  if (!this->_internal_runtime_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtime_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPipelineRunRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPipelineRunRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPipelineRunRequest::GetClassData() const { return &_class_data_; }

void GetPipelineRunRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetPipelineRunRequest *>(to)->MergeFrom(
      static_cast<const GetPipelineRunRequest &>(from));
}


void GetPipelineRunRequest::MergeFrom(const GetPipelineRunRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.GetPipelineRunRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_runtime_id().empty()) {
    _internal_set_runtime_id(from._internal_runtime_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPipelineRunRequest::CopyFrom(const GetPipelineRunRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.GetPipelineRunRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPipelineRunRequest::IsInitialized() const {
  return true;
}

void GetPipelineRunRequest::InternalSwap(GetPipelineRunRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &runtime_id_, GetArenaForAllocation(),
      &other->runtime_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPipelineRunRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[6]);
}

// ===================================================================

class GetPipelineRunResponse::_Internal {
 public:
  static const ::pipelines::tekton::v1alpha1::PipelineRun& pipeline_run(const GetPipelineRunResponse* msg);
};

const ::pipelines::tekton::v1alpha1::PipelineRun&
GetPipelineRunResponse::_Internal::pipeline_run(const GetPipelineRunResponse* msg) {
  return *msg->pipeline_run_;
}
void GetPipelineRunResponse::clear_pipeline_run() {
  if (GetArenaForAllocation() == nullptr && pipeline_run_ != nullptr) {
    delete pipeline_run_;
  }
  pipeline_run_ = nullptr;
}
GetPipelineRunResponse::GetPipelineRunResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.GetPipelineRunResponse)
}
GetPipelineRunResponse::GetPipelineRunResponse(const GetPipelineRunResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pipeline_run()) {
    pipeline_run_ = new ::pipelines::tekton::v1alpha1::PipelineRun(*from.pipeline_run_);
  } else {
    pipeline_run_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.GetPipelineRunResponse)
}

inline void GetPipelineRunResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pipeline_run_ = nullptr;
}

GetPipelineRunResponse::~GetPipelineRunResponse() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.GetPipelineRunResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetPipelineRunResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pipeline_run_;
}

void GetPipelineRunResponse::ArenaDtor(void* object) {
  GetPipelineRunResponse* _this = reinterpret_cast< GetPipelineRunResponse* >(object);
  (void)_this;
}
void GetPipelineRunResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetPipelineRunResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetPipelineRunResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.GetPipelineRunResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pipeline_run_ != nullptr) {
    delete pipeline_run_;
  }
  pipeline_run_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetPipelineRunResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pipelines.tekton.v1alpha1.PipelineRun pipeline_run = 1 [json_name = "pipelineRun"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pipeline_run(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.GetPipelineRunResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetPipelineRunResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.GetPipelineRunResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.PipelineRun pipeline_run = 1 [json_name = "pipelineRun"];
  if (this->_internal_has_pipeline_run()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pipeline_run(this), target, stream);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.GetPipelineRunResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.GetPipelineRunResponse)
  return target;
}

size_t GetPipelineRunResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.GetPipelineRunResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .pipelines.tekton.v1alpha1.PipelineRun pipeline_run = 1 [json_name = "pipelineRun"];
  if (this->_internal_has_pipeline_run()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pipeline_run_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetPipelineRunResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetPipelineRunResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetPipelineRunResponse::GetClassData() const { return &_class_data_; }

void GetPipelineRunResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetPipelineRunResponse *>(to)->MergeFrom(
      static_cast<const GetPipelineRunResponse &>(from));
}


void GetPipelineRunResponse::MergeFrom(const GetPipelineRunResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.GetPipelineRunResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_pipeline_run()) {
    _internal_mutable_pipeline_run()->::pipelines::tekton::v1alpha1::PipelineRun::MergeFrom(from._internal_pipeline_run());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetPipelineRunResponse::CopyFrom(const GetPipelineRunResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.GetPipelineRunResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetPipelineRunResponse::IsInitialized() const {
  return true;
}

void GetPipelineRunResponse::InternalSwap(GetPipelineRunResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
  swap(pipeline_run_, other->pipeline_run_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetPipelineRunResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[7]);
}

// ===================================================================

class ListPipelineRunRequest::_Internal {
 public:
};

ListPipelineRunRequest::ListPipelineRunRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.ListPipelineRunRequest)
}
ListPipelineRunRequest::ListPipelineRunRequest(const ListPipelineRunRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  runtime_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runtime_id().empty()) {
    runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_runtime_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.ListPipelineRunRequest)
}

inline void ListPipelineRunRequest::SharedCtor() {
runtime_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ListPipelineRunRequest::~ListPipelineRunRequest() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.ListPipelineRunRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListPipelineRunRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  runtime_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ListPipelineRunRequest::ArenaDtor(void* object) {
  ListPipelineRunRequest* _this = reinterpret_cast< ListPipelineRunRequest* >(object);
  (void)_this;
}
void ListPipelineRunRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPipelineRunRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListPipelineRunRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.ListPipelineRunRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  runtime_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPipelineRunRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string runtime_id = 1 [json_name = "runtimeId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_runtime_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.ListPipelineRunRequest.runtime_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPipelineRunRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.ListPipelineRunRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string runtime_id = 1 [json_name = "runtimeId"];
  if (!this->_internal_runtime_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime_id().data(), static_cast<int>(this->_internal_runtime_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.ListPipelineRunRequest.runtime_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_runtime_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.ListPipelineRunRequest)
  return target;
}

size_t ListPipelineRunRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.ListPipelineRunRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string runtime_id = 1 [json_name = "runtimeId"];
  if (!this->_internal_runtime_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtime_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListPipelineRunRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListPipelineRunRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListPipelineRunRequest::GetClassData() const { return &_class_data_; }

void ListPipelineRunRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListPipelineRunRequest *>(to)->MergeFrom(
      static_cast<const ListPipelineRunRequest &>(from));
}


void ListPipelineRunRequest::MergeFrom(const ListPipelineRunRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.ListPipelineRunRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_runtime_id().empty()) {
    _internal_set_runtime_id(from._internal_runtime_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListPipelineRunRequest::CopyFrom(const ListPipelineRunRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.ListPipelineRunRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPipelineRunRequest::IsInitialized() const {
  return true;
}

void ListPipelineRunRequest::InternalSwap(ListPipelineRunRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &runtime_id_, GetArenaForAllocation(),
      &other->runtime_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPipelineRunRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[8]);
}

// ===================================================================

class ListPipelineRunResponse::_Internal {
 public:
  static const ::pipelines::tekton::v1alpha1::PipelineRunList& pipeline_run_list(const ListPipelineRunResponse* msg);
};

const ::pipelines::tekton::v1alpha1::PipelineRunList&
ListPipelineRunResponse::_Internal::pipeline_run_list(const ListPipelineRunResponse* msg) {
  return *msg->pipeline_run_list_;
}
void ListPipelineRunResponse::clear_pipeline_run_list() {
  if (GetArenaForAllocation() == nullptr && pipeline_run_list_ != nullptr) {
    delete pipeline_run_list_;
  }
  pipeline_run_list_ = nullptr;
}
ListPipelineRunResponse::ListPipelineRunResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.ListPipelineRunResponse)
}
ListPipelineRunResponse::ListPipelineRunResponse(const ListPipelineRunResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_pipeline_run_list()) {
    pipeline_run_list_ = new ::pipelines::tekton::v1alpha1::PipelineRunList(*from.pipeline_run_list_);
  } else {
    pipeline_run_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.ListPipelineRunResponse)
}

inline void ListPipelineRunResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pipeline_run_list_ = nullptr;
}

ListPipelineRunResponse::~ListPipelineRunResponse() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.ListPipelineRunResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListPipelineRunResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete pipeline_run_list_;
}

void ListPipelineRunResponse::ArenaDtor(void* object) {
  ListPipelineRunResponse* _this = reinterpret_cast< ListPipelineRunResponse* >(object);
  (void)_this;
}
void ListPipelineRunResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListPipelineRunResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListPipelineRunResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.ListPipelineRunResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && pipeline_run_list_ != nullptr) {
    delete pipeline_run_list_;
  }
  pipeline_run_list_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListPipelineRunResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pipelines.tekton.v1alpha1.PipelineRunList pipeline_run_list = 1 [json_name = "pipelineRunList"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pipeline_run_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.ListPipelineRunResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListPipelineRunResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.ListPipelineRunResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.PipelineRunList pipeline_run_list = 1 [json_name = "pipelineRunList"];
  if (this->_internal_has_pipeline_run_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::pipeline_run_list(this), target, stream);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.ListPipelineRunResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.ListPipelineRunResponse)
  return target;
}

size_t ListPipelineRunResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.ListPipelineRunResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .pipelines.tekton.v1alpha1.PipelineRunList pipeline_run_list = 1 [json_name = "pipelineRunList"];
  if (this->_internal_has_pipeline_run_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pipeline_run_list_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListPipelineRunResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListPipelineRunResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListPipelineRunResponse::GetClassData() const { return &_class_data_; }

void ListPipelineRunResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListPipelineRunResponse *>(to)->MergeFrom(
      static_cast<const ListPipelineRunResponse &>(from));
}


void ListPipelineRunResponse::MergeFrom(const ListPipelineRunResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.ListPipelineRunResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_pipeline_run_list()) {
    _internal_mutable_pipeline_run_list()->::pipelines::tekton::v1alpha1::PipelineRunList::MergeFrom(from._internal_pipeline_run_list());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListPipelineRunResponse::CopyFrom(const ListPipelineRunResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.ListPipelineRunResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListPipelineRunResponse::IsInitialized() const {
  return true;
}

void ListPipelineRunResponse::InternalSwap(ListPipelineRunResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
  swap(pipeline_run_list_, other->pipeline_run_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListPipelineRunResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[9]);
}

// ===================================================================

class GetStatusRuntimeRequest::_Internal {
 public:
};

GetStatusRuntimeRequest::GetStatusRuntimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.GetStatusRuntimeRequest)
}
GetStatusRuntimeRequest::GetStatusRuntimeRequest(const GetStatusRuntimeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  runtime_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runtime_id().empty()) {
    runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_runtime_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.GetStatusRuntimeRequest)
}

inline void GetStatusRuntimeRequest::SharedCtor() {
runtime_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetStatusRuntimeRequest::~GetStatusRuntimeRequest() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.GetStatusRuntimeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetStatusRuntimeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  runtime_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetStatusRuntimeRequest::ArenaDtor(void* object) {
  GetStatusRuntimeRequest* _this = reinterpret_cast< GetStatusRuntimeRequest* >(object);
  (void)_this;
}
void GetStatusRuntimeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStatusRuntimeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetStatusRuntimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.GetStatusRuntimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  runtime_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatusRuntimeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string runtime_id = 1 [json_name = "runtimeId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_runtime_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.GetStatusRuntimeRequest.runtime_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStatusRuntimeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.GetStatusRuntimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string runtime_id = 1 [json_name = "runtimeId"];
  if (!this->_internal_runtime_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime_id().data(), static_cast<int>(this->_internal_runtime_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.GetStatusRuntimeRequest.runtime_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_runtime_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.GetStatusRuntimeRequest)
  return target;
}

size_t GetStatusRuntimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.GetStatusRuntimeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string runtime_id = 1 [json_name = "runtimeId"];
  if (!this->_internal_runtime_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtime_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStatusRuntimeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetStatusRuntimeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStatusRuntimeRequest::GetClassData() const { return &_class_data_; }

void GetStatusRuntimeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetStatusRuntimeRequest *>(to)->MergeFrom(
      static_cast<const GetStatusRuntimeRequest &>(from));
}


void GetStatusRuntimeRequest::MergeFrom(const GetStatusRuntimeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.GetStatusRuntimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_runtime_id().empty()) {
    _internal_set_runtime_id(from._internal_runtime_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStatusRuntimeRequest::CopyFrom(const GetStatusRuntimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.GetStatusRuntimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusRuntimeRequest::IsInitialized() const {
  return true;
}

void GetStatusRuntimeRequest::InternalSwap(GetStatusRuntimeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &runtime_id_, GetArenaForAllocation(),
      &other->runtime_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatusRuntimeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[10]);
}

// ===================================================================

class GetStatusRuntimeResponse::_Internal {
 public:
  static const ::pipelines::tekton::v1alpha1::Event& event(const GetStatusRuntimeResponse* msg);
};

const ::pipelines::tekton::v1alpha1::Event&
GetStatusRuntimeResponse::_Internal::event(const GetStatusRuntimeResponse* msg) {
  return *msg->event_;
}
void GetStatusRuntimeResponse::clear_event() {
  if (GetArenaForAllocation() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
}
GetStatusRuntimeResponse::GetStatusRuntimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.GetStatusRuntimeResponse)
}
GetStatusRuntimeResponse::GetStatusRuntimeResponse(const GetStatusRuntimeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_event()) {
    event_ = new ::pipelines::tekton::v1alpha1::Event(*from.event_);
  } else {
    event_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.GetStatusRuntimeResponse)
}

inline void GetStatusRuntimeResponse::SharedCtor() {
event_ = nullptr;
}

GetStatusRuntimeResponse::~GetStatusRuntimeResponse() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.GetStatusRuntimeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetStatusRuntimeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete event_;
}

void GetStatusRuntimeResponse::ArenaDtor(void* object) {
  GetStatusRuntimeResponse* _this = reinterpret_cast< GetStatusRuntimeResponse* >(object);
  (void)_this;
}
void GetStatusRuntimeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetStatusRuntimeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetStatusRuntimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.GetStatusRuntimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && event_ != nullptr) {
    delete event_;
  }
  event_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetStatusRuntimeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pipelines.tekton.v1alpha1.Event event = 1 [json_name = "event"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetStatusRuntimeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.GetStatusRuntimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.Event event = 1 [json_name = "event"];
  if (this->_internal_has_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::event(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.GetStatusRuntimeResponse)
  return target;
}

size_t GetStatusRuntimeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.GetStatusRuntimeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.Event event = 1 [json_name = "event"];
  if (this->_internal_has_event()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *event_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetStatusRuntimeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetStatusRuntimeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetStatusRuntimeResponse::GetClassData() const { return &_class_data_; }

void GetStatusRuntimeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetStatusRuntimeResponse *>(to)->MergeFrom(
      static_cast<const GetStatusRuntimeResponse &>(from));
}


void GetStatusRuntimeResponse::MergeFrom(const GetStatusRuntimeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.GetStatusRuntimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_event()) {
    _internal_mutable_event()->::pipelines::tekton::v1alpha1::Event::MergeFrom(from._internal_event());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetStatusRuntimeResponse::CopyFrom(const GetStatusRuntimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.GetStatusRuntimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetStatusRuntimeResponse::IsInitialized() const {
  return true;
}

void GetStatusRuntimeResponse::InternalSwap(GetStatusRuntimeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_, other->event_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetStatusRuntimeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[11]);
}

// ===================================================================

class ChangeStatusRuntimeAndApplicationRequest::_Internal {
 public:
};

ChangeStatusRuntimeAndApplicationRequest::ChangeStatusRuntimeAndApplicationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest)
}
ChangeStatusRuntimeAndApplicationRequest::ChangeStatusRuntimeAndApplicationRequest(const ChangeStatusRuntimeAndApplicationRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_application_id().empty()) {
    application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_application_id(), 
      GetArenaForAllocation());
  }
  project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_id().empty()) {
    project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_id(), 
      GetArenaForAllocation());
  }
  organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization_id().empty()) {
    organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization_id(), 
      GetArenaForAllocation());
  }
  runtime_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runtime_name().empty()) {
    runtime_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_runtime_name(), 
      GetArenaForAllocation());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArenaForAllocation());
  }
  runtime_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runtime_id().empty()) {
    runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_runtime_id(), 
      GetArenaForAllocation());
  }
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest)
}

inline void ChangeStatusRuntimeAndApplicationRequest::SharedCtor() {
application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
runtime_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
runtime_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChangeStatusRuntimeAndApplicationRequest::~ChangeStatusRuntimeAndApplicationRequest() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChangeStatusRuntimeAndApplicationRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  application_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtime_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtime_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChangeStatusRuntimeAndApplicationRequest::ArenaDtor(void* object) {
  ChangeStatusRuntimeAndApplicationRequest* _this = reinterpret_cast< ChangeStatusRuntimeAndApplicationRequest* >(object);
  (void)_this;
}
void ChangeStatusRuntimeAndApplicationRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeStatusRuntimeAndApplicationRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeStatusRuntimeAndApplicationRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  application_id_.ClearToEmpty();
  project_id_.ClearToEmpty();
  organization_id_.ClearToEmpty();
  runtime_name_.ClearToEmpty();
  namespace__.ClearToEmpty();
  runtime_id_.ClearToEmpty();
  status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeStatusRuntimeAndApplicationRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string application_id = 1 [json_name = "applicationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_application_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.application_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string project_id = 2 [json_name = "projectId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string organization_id = 3 [json_name = "organizationId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string runtime_name = 4 [json_name = "runtimeName"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_runtime_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.runtime_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string namespace = 5 [json_name = "namespace"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string runtime_id = 6 [json_name = "runtimeId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_runtime_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.runtime_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 7 [json_name = "status"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeStatusRuntimeAndApplicationRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string application_id = 1 [json_name = "applicationId"];
  if (!this->_internal_application_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_application_id().data(), static_cast<int>(this->_internal_application_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.application_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_application_id(), target);
  }

  // string project_id = 2 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_id().data(), static_cast<int>(this->_internal_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.project_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_project_id(), target);
  }

  // string organization_id = 3 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.organization_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_organization_id(), target);
  }

  // string runtime_name = 4 [json_name = "runtimeName"];
  if (!this->_internal_runtime_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime_name().data(), static_cast<int>(this->_internal_runtime_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.runtime_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_runtime_name(), target);
  }

  // string namespace = 5 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.namespace");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_namespace_(), target);
  }

  // string runtime_id = 6 [json_name = "runtimeId"];
  if (!this->_internal_runtime_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime_id().data(), static_cast<int>(this->_internal_runtime_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.runtime_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_runtime_id(), target);
  }

  // string status = 7 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.status");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest)
  return target;
}

size_t ChangeStatusRuntimeAndApplicationRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string application_id = 1 [json_name = "applicationId"];
  if (!this->_internal_application_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_application_id());
  }

  // string project_id = 2 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_id());
  }

  // string organization_id = 3 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  // string runtime_name = 4 [json_name = "runtimeName"];
  if (!this->_internal_runtime_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtime_name());
  }

  // string namespace = 5 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string runtime_id = 6 [json_name = "runtimeId"];
  if (!this->_internal_runtime_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtime_id());
  }

  // string status = 7 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeStatusRuntimeAndApplicationRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangeStatusRuntimeAndApplicationRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeStatusRuntimeAndApplicationRequest::GetClassData() const { return &_class_data_; }

void ChangeStatusRuntimeAndApplicationRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChangeStatusRuntimeAndApplicationRequest *>(to)->MergeFrom(
      static_cast<const ChangeStatusRuntimeAndApplicationRequest &>(from));
}


void ChangeStatusRuntimeAndApplicationRequest::MergeFrom(const ChangeStatusRuntimeAndApplicationRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_application_id().empty()) {
    _internal_set_application_id(from._internal_application_id());
  }
  if (!from._internal_project_id().empty()) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (!from._internal_organization_id().empty()) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (!from._internal_runtime_name().empty()) {
    _internal_set_runtime_name(from._internal_runtime_name());
  }
  if (!from._internal_namespace_().empty()) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (!from._internal_runtime_id().empty()) {
    _internal_set_runtime_id(from._internal_runtime_id());
  }
  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeStatusRuntimeAndApplicationRequest::CopyFrom(const ChangeStatusRuntimeAndApplicationRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeStatusRuntimeAndApplicationRequest::IsInitialized() const {
  return true;
}

void ChangeStatusRuntimeAndApplicationRequest::InternalSwap(ChangeStatusRuntimeAndApplicationRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &application_id_, GetArenaForAllocation(),
      &other->application_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_id_, GetArenaForAllocation(),
      &other->project_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_id_, GetArenaForAllocation(),
      &other->organization_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &runtime_name_, GetArenaForAllocation(),
      &other->runtime_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &namespace__, GetArenaForAllocation(),
      &other->namespace__, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &runtime_id_, GetArenaForAllocation(),
      &other->runtime_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeStatusRuntimeAndApplicationRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[12]);
}

// ===================================================================

class ChangeStatusRuntimeAndApplicationResponse::_Internal {
 public:
};

ChangeStatusRuntimeAndApplicationResponse::ChangeStatusRuntimeAndApplicationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationResponse)
}
ChangeStatusRuntimeAndApplicationResponse::ChangeStatusRuntimeAndApplicationResponse(const ChangeStatusRuntimeAndApplicationResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationResponse)
}

inline void ChangeStatusRuntimeAndApplicationResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ChangeStatusRuntimeAndApplicationResponse::~ChangeStatusRuntimeAndApplicationResponse() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChangeStatusRuntimeAndApplicationResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChangeStatusRuntimeAndApplicationResponse::ArenaDtor(void* object) {
  ChangeStatusRuntimeAndApplicationResponse* _this = reinterpret_cast< ChangeStatusRuntimeAndApplicationResponse* >(object);
  (void)_this;
}
void ChangeStatusRuntimeAndApplicationResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChangeStatusRuntimeAndApplicationResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChangeStatusRuntimeAndApplicationResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChangeStatusRuntimeAndApplicationResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ChangeStatusRuntimeAndApplicationResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationResponse)
  return target;
}

size_t ChangeStatusRuntimeAndApplicationResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChangeStatusRuntimeAndApplicationResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChangeStatusRuntimeAndApplicationResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChangeStatusRuntimeAndApplicationResponse::GetClassData() const { return &_class_data_; }

void ChangeStatusRuntimeAndApplicationResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ChangeStatusRuntimeAndApplicationResponse *>(to)->MergeFrom(
      static_cast<const ChangeStatusRuntimeAndApplicationResponse &>(from));
}


void ChangeStatusRuntimeAndApplicationResponse::MergeFrom(const ChangeStatusRuntimeAndApplicationResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChangeStatusRuntimeAndApplicationResponse::CopyFrom(const ChangeStatusRuntimeAndApplicationResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.ChangeStatusRuntimeAndApplicationResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeStatusRuntimeAndApplicationResponse::IsInitialized() const {
  return true;
}

void ChangeStatusRuntimeAndApplicationResponse::InternalSwap(ChangeStatusRuntimeAndApplicationResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ChangeStatusRuntimeAndApplicationResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[13]);
}

// ===================================================================

class RebuildTektonPipelineRequest::_Internal {
 public:
  static const ::pipelines::tekton::v1alpha1::Pipeline& tekton_pipeline(const RebuildTektonPipelineRequest* msg);
};

const ::pipelines::tekton::v1alpha1::Pipeline&
RebuildTektonPipelineRequest::_Internal::tekton_pipeline(const RebuildTektonPipelineRequest* msg) {
  return *msg->tekton_pipeline_;
}
void RebuildTektonPipelineRequest::clear_tekton_pipeline() {
  if (GetArenaForAllocation() == nullptr && tekton_pipeline_ != nullptr) {
    delete tekton_pipeline_;
  }
  tekton_pipeline_ = nullptr;
}
RebuildTektonPipelineRequest::RebuildTektonPipelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.RebuildTektonPipelineRequest)
}
RebuildTektonPipelineRequest::RebuildTektonPipelineRequest(const RebuildTektonPipelineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tekton_pipeline()) {
    tekton_pipeline_ = new ::pipelines::tekton::v1alpha1::Pipeline(*from.tekton_pipeline_);
  } else {
    tekton_pipeline_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.RebuildTektonPipelineRequest)
}

inline void RebuildTektonPipelineRequest::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tekton_pipeline_ = nullptr;
}

RebuildTektonPipelineRequest::~RebuildTektonPipelineRequest() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.RebuildTektonPipelineRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RebuildTektonPipelineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tekton_pipeline_;
}

void RebuildTektonPipelineRequest::ArenaDtor(void* object) {
  RebuildTektonPipelineRequest* _this = reinterpret_cast< RebuildTektonPipelineRequest* >(object);
  (void)_this;
}
void RebuildTektonPipelineRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RebuildTektonPipelineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RebuildTektonPipelineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.RebuildTektonPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && tekton_pipeline_ != nullptr) {
    delete tekton_pipeline_;
  }
  tekton_pipeline_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RebuildTektonPipelineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tekton_pipeline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 2 [json_name = "userId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.RebuildTektonPipelineRequest.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RebuildTektonPipelineRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.RebuildTektonPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
  if (this->_internal_has_tekton_pipeline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tekton_pipeline(this), target, stream);
  }

  // string user_id = 2 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.RebuildTektonPipelineRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.RebuildTektonPipelineRequest)
  return target;
}

size_t RebuildTektonPipelineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.RebuildTektonPipelineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 2 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
  if (this->_internal_has_tekton_pipeline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tekton_pipeline_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RebuildTektonPipelineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RebuildTektonPipelineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RebuildTektonPipelineRequest::GetClassData() const { return &_class_data_; }

void RebuildTektonPipelineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RebuildTektonPipelineRequest *>(to)->MergeFrom(
      static_cast<const RebuildTektonPipelineRequest &>(from));
}


void RebuildTektonPipelineRequest::MergeFrom(const RebuildTektonPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.RebuildTektonPipelineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_tekton_pipeline()) {
    _internal_mutable_tekton_pipeline()->::pipelines::tekton::v1alpha1::Pipeline::MergeFrom(from._internal_tekton_pipeline());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RebuildTektonPipelineRequest::CopyFrom(const RebuildTektonPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.RebuildTektonPipelineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RebuildTektonPipelineRequest::IsInitialized() const {
  return true;
}

void RebuildTektonPipelineRequest::InternalSwap(RebuildTektonPipelineRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  swap(tekton_pipeline_, other->tekton_pipeline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RebuildTektonPipelineRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[14]);
}

// ===================================================================

class RebuildTektonPipelineResponse::_Internal {
 public:
  static const ::pipelines::tekton::v1alpha1::Pipeline& tekton_pipeline(const RebuildTektonPipelineResponse* msg);
};

const ::pipelines::tekton::v1alpha1::Pipeline&
RebuildTektonPipelineResponse::_Internal::tekton_pipeline(const RebuildTektonPipelineResponse* msg) {
  return *msg->tekton_pipeline_;
}
void RebuildTektonPipelineResponse::clear_tekton_pipeline() {
  if (GetArenaForAllocation() == nullptr && tekton_pipeline_ != nullptr) {
    delete tekton_pipeline_;
  }
  tekton_pipeline_ = nullptr;
}
RebuildTektonPipelineResponse::RebuildTektonPipelineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.RebuildTektonPipelineResponse)
}
RebuildTektonPipelineResponse::RebuildTektonPipelineResponse(const RebuildTektonPipelineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tekton_pipeline()) {
    tekton_pipeline_ = new ::pipelines::tekton::v1alpha1::Pipeline(*from.tekton_pipeline_);
  } else {
    tekton_pipeline_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.RebuildTektonPipelineResponse)
}

inline void RebuildTektonPipelineResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tekton_pipeline_ = nullptr;
}

RebuildTektonPipelineResponse::~RebuildTektonPipelineResponse() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.RebuildTektonPipelineResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RebuildTektonPipelineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tekton_pipeline_;
}

void RebuildTektonPipelineResponse::ArenaDtor(void* object) {
  RebuildTektonPipelineResponse* _this = reinterpret_cast< RebuildTektonPipelineResponse* >(object);
  (void)_this;
}
void RebuildTektonPipelineResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RebuildTektonPipelineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RebuildTektonPipelineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.RebuildTektonPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && tekton_pipeline_ != nullptr) {
    delete tekton_pipeline_;
  }
  tekton_pipeline_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RebuildTektonPipelineResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tekton_pipeline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.RebuildTektonPipelineResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RebuildTektonPipelineResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.RebuildTektonPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
  if (this->_internal_has_tekton_pipeline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tekton_pipeline(this), target, stream);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.RebuildTektonPipelineResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.RebuildTektonPipelineResponse)
  return target;
}

size_t RebuildTektonPipelineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.RebuildTektonPipelineResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
  if (this->_internal_has_tekton_pipeline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tekton_pipeline_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RebuildTektonPipelineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RebuildTektonPipelineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RebuildTektonPipelineResponse::GetClassData() const { return &_class_data_; }

void RebuildTektonPipelineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RebuildTektonPipelineResponse *>(to)->MergeFrom(
      static_cast<const RebuildTektonPipelineResponse &>(from));
}


void RebuildTektonPipelineResponse::MergeFrom(const RebuildTektonPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.RebuildTektonPipelineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_tekton_pipeline()) {
    _internal_mutable_tekton_pipeline()->::pipelines::tekton::v1alpha1::Pipeline::MergeFrom(from._internal_tekton_pipeline());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RebuildTektonPipelineResponse::CopyFrom(const RebuildTektonPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.RebuildTektonPipelineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RebuildTektonPipelineResponse::IsInitialized() const {
  return true;
}

void RebuildTektonPipelineResponse::InternalSwap(RebuildTektonPipelineResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
  swap(tekton_pipeline_, other->tekton_pipeline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RebuildTektonPipelineResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[15]);
}

// ===================================================================

class MakeRollbackRuntimeRequest::_Internal {
 public:
};

MakeRollbackRuntimeRequest::MakeRollbackRuntimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest)
}
MakeRollbackRuntimeRequest::MakeRollbackRuntimeRequest(const MakeRollbackRuntimeRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_application_id().empty()) {
    application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_application_id(), 
      GetArenaForAllocation());
  }
  project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_id().empty()) {
    project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_id(), 
      GetArenaForAllocation());
  }
  organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization_id().empty()) {
    organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization_id(), 
      GetArenaForAllocation());
  }
  runtime_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runtime_id().empty()) {
    runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_runtime_id(), 
      GetArenaForAllocation());
  }
  tag_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag_name().empty()) {
    tag_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag_name(), 
      GetArenaForAllocation());
  }
  runtime_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runtime_name().empty()) {
    runtime_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_runtime_name(), 
      GetArenaForAllocation());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest)
}

inline void MakeRollbackRuntimeRequest::SharedCtor() {
application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
runtime_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tag_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
runtime_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MakeRollbackRuntimeRequest::~MakeRollbackRuntimeRequest() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MakeRollbackRuntimeRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  application_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtime_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  runtime_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MakeRollbackRuntimeRequest::ArenaDtor(void* object) {
  MakeRollbackRuntimeRequest* _this = reinterpret_cast< MakeRollbackRuntimeRequest* >(object);
  (void)_this;
}
void MakeRollbackRuntimeRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MakeRollbackRuntimeRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MakeRollbackRuntimeRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  application_id_.ClearToEmpty();
  project_id_.ClearToEmpty();
  organization_id_.ClearToEmpty();
  runtime_id_.ClearToEmpty();
  tag_name_.ClearToEmpty();
  runtime_name_.ClearToEmpty();
  namespace__.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MakeRollbackRuntimeRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string application_id = 1 [json_name = "applicationId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_application_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest.application_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string project_id = 2 [json_name = "projectId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest.project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string organization_id = 3 [json_name = "organizationId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest.organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string runtime_id = 4 [json_name = "runtimeId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_runtime_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest.runtime_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tag_name = 5 [json_name = "tagName"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_tag_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest.tag_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string runtime_name = 6 [json_name = "runtimeName"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_runtime_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest.runtime_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string namespace = 7 [json_name = "namespace"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MakeRollbackRuntimeRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string application_id = 1 [json_name = "applicationId"];
  if (!this->_internal_application_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_application_id().data(), static_cast<int>(this->_internal_application_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest.application_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_application_id(), target);
  }

  // string project_id = 2 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_id().data(), static_cast<int>(this->_internal_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest.project_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_project_id(), target);
  }

  // string organization_id = 3 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest.organization_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_organization_id(), target);
  }

  // string runtime_id = 4 [json_name = "runtimeId"];
  if (!this->_internal_runtime_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime_id().data(), static_cast<int>(this->_internal_runtime_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest.runtime_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_runtime_id(), target);
  }

  // string tag_name = 5 [json_name = "tagName"];
  if (!this->_internal_tag_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag_name().data(), static_cast<int>(this->_internal_tag_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest.tag_name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_tag_name(), target);
  }

  // string runtime_name = 6 [json_name = "runtimeName"];
  if (!this->_internal_runtime_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime_name().data(), static_cast<int>(this->_internal_runtime_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest.runtime_name");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_runtime_name(), target);
  }

  // string namespace = 7 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest.namespace");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_namespace_(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest)
  return target;
}

size_t MakeRollbackRuntimeRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string application_id = 1 [json_name = "applicationId"];
  if (!this->_internal_application_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_application_id());
  }

  // string project_id = 2 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_id());
  }

  // string organization_id = 3 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  // string runtime_id = 4 [json_name = "runtimeId"];
  if (!this->_internal_runtime_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtime_id());
  }

  // string tag_name = 5 [json_name = "tagName"];
  if (!this->_internal_tag_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag_name());
  }

  // string runtime_name = 6 [json_name = "runtimeName"];
  if (!this->_internal_runtime_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtime_name());
  }

  // string namespace = 7 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MakeRollbackRuntimeRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MakeRollbackRuntimeRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MakeRollbackRuntimeRequest::GetClassData() const { return &_class_data_; }

void MakeRollbackRuntimeRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MakeRollbackRuntimeRequest *>(to)->MergeFrom(
      static_cast<const MakeRollbackRuntimeRequest &>(from));
}


void MakeRollbackRuntimeRequest::MergeFrom(const MakeRollbackRuntimeRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_application_id().empty()) {
    _internal_set_application_id(from._internal_application_id());
  }
  if (!from._internal_project_id().empty()) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (!from._internal_organization_id().empty()) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (!from._internal_runtime_id().empty()) {
    _internal_set_runtime_id(from._internal_runtime_id());
  }
  if (!from._internal_tag_name().empty()) {
    _internal_set_tag_name(from._internal_tag_name());
  }
  if (!from._internal_runtime_name().empty()) {
    _internal_set_runtime_name(from._internal_runtime_name());
  }
  if (!from._internal_namespace_().empty()) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MakeRollbackRuntimeRequest::CopyFrom(const MakeRollbackRuntimeRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.MakeRollbackRuntimeRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeRollbackRuntimeRequest::IsInitialized() const {
  return true;
}

void MakeRollbackRuntimeRequest::InternalSwap(MakeRollbackRuntimeRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &application_id_, GetArenaForAllocation(),
      &other->application_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_id_, GetArenaForAllocation(),
      &other->project_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_id_, GetArenaForAllocation(),
      &other->organization_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &runtime_id_, GetArenaForAllocation(),
      &other->runtime_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tag_name_, GetArenaForAllocation(),
      &other->tag_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &runtime_name_, GetArenaForAllocation(),
      &other->runtime_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &namespace__, GetArenaForAllocation(),
      &other->namespace__, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MakeRollbackRuntimeRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[16]);
}

// ===================================================================

class MakeRollbackRuntimeResponse::_Internal {
 public:
};

MakeRollbackRuntimeResponse::MakeRollbackRuntimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.MakeRollbackRuntimeResponse)
}
MakeRollbackRuntimeResponse::MakeRollbackRuntimeResponse(const MakeRollbackRuntimeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.MakeRollbackRuntimeResponse)
}

inline void MakeRollbackRuntimeResponse::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MakeRollbackRuntimeResponse::~MakeRollbackRuntimeResponse() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.MakeRollbackRuntimeResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MakeRollbackRuntimeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MakeRollbackRuntimeResponse::ArenaDtor(void* object) {
  MakeRollbackRuntimeResponse* _this = reinterpret_cast< MakeRollbackRuntimeResponse* >(object);
  (void)_this;
}
void MakeRollbackRuntimeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MakeRollbackRuntimeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MakeRollbackRuntimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.MakeRollbackRuntimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MakeRollbackRuntimeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string msg = 1 [json_name = "msg"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.MakeRollbackRuntimeResponse.msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string error = 2 [json_name = "error"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.MakeRollbackRuntimeResponse.error"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MakeRollbackRuntimeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.MakeRollbackRuntimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.MakeRollbackRuntimeResponse.msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.MakeRollbackRuntimeResponse.error");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.MakeRollbackRuntimeResponse)
  return target;
}

size_t MakeRollbackRuntimeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.MakeRollbackRuntimeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string msg = 1 [json_name = "msg"];
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  // string error = 2 [json_name = "error"];
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MakeRollbackRuntimeResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MakeRollbackRuntimeResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MakeRollbackRuntimeResponse::GetClassData() const { return &_class_data_; }

void MakeRollbackRuntimeResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<MakeRollbackRuntimeResponse *>(to)->MergeFrom(
      static_cast<const MakeRollbackRuntimeResponse &>(from));
}


void MakeRollbackRuntimeResponse::MergeFrom(const MakeRollbackRuntimeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.MakeRollbackRuntimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MakeRollbackRuntimeResponse::CopyFrom(const MakeRollbackRuntimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.MakeRollbackRuntimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MakeRollbackRuntimeResponse::IsInitialized() const {
  return true;
}

void MakeRollbackRuntimeResponse::InternalSwap(MakeRollbackRuntimeResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, GetArenaForAllocation(),
      &other->msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, GetArenaForAllocation(),
      &other->error_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata MakeRollbackRuntimeResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[17]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace tekton
}  // namespace pipelines
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineRequest* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::GetPipelineRunRequest* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::GetPipelineRunRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::GetPipelineRunRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::GetPipelineRunResponse* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::GetPipelineRunResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::GetPipelineRunResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::ListPipelineRunRequest* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::ListPipelineRunRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::ListPipelineRunRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::ListPipelineRunResponse* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::ListPipelineRunResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::ListPipelineRunResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::GetStatusRuntimeRequest* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::GetStatusRuntimeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::GetStatusRuntimeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::GetStatusRuntimeResponse* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::GetStatusRuntimeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::GetStatusRuntimeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationRequest* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationResponse* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::RebuildTektonPipelineRequest* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::RebuildTektonPipelineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::RebuildTektonPipelineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::RebuildTektonPipelineResponse* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::RebuildTektonPipelineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::RebuildTektonPipelineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::MakeRollbackRuntimeRequest* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::MakeRollbackRuntimeRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::MakeRollbackRuntimeRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::MakeRollbackRuntimeResponse* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::MakeRollbackRuntimeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::MakeRollbackRuntimeResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
