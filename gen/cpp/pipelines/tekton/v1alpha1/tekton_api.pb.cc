// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipelines/tekton/v1alpha1/tekton_api.proto

#include "pipelines/tekton/v1alpha1/tekton_api.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pipelines {
namespace tekton {
namespace v1alpha1 {
constexpr CreateTektonPipelineRequest::CreateTektonPipelineRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tekton_pipeline_(nullptr){}
struct CreateTektonPipelineRequestDefaultTypeInternal {
  constexpr CreateTektonPipelineRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateTektonPipelineRequestDefaultTypeInternal() {}
  union {
    CreateTektonPipelineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateTektonPipelineRequestDefaultTypeInternal _CreateTektonPipelineRequest_default_instance_;
constexpr CreateTektonPipelineResponse::CreateTektonPipelineResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tekton_pipeline_(nullptr){}
struct CreateTektonPipelineResponseDefaultTypeInternal {
  constexpr CreateTektonPipelineResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateTektonPipelineResponseDefaultTypeInternal() {}
  union {
    CreateTektonPipelineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateTektonPipelineResponseDefaultTypeInternal _CreateTektonPipelineResponse_default_instance_;
constexpr DeleteTektonPipelineRequest::DeleteTektonPipelineRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : runtime_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , application_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , environment_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteTektonPipelineRequestDefaultTypeInternal {
  constexpr DeleteTektonPipelineRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteTektonPipelineRequestDefaultTypeInternal() {}
  union {
    DeleteTektonPipelineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteTektonPipelineRequestDefaultTypeInternal _DeleteTektonPipelineRequest_default_instance_;
constexpr DeleteTektonPipelineResponse::DeleteTektonPipelineResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteTektonPipelineResponseDefaultTypeInternal {
  constexpr DeleteTektonPipelineResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteTektonPipelineResponseDefaultTypeInternal() {}
  union {
    DeleteTektonPipelineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteTektonPipelineResponseDefaultTypeInternal _DeleteTektonPipelineResponse_default_instance_;
constexpr CreateTektonTaskPipelineRequest::CreateTektonTaskPipelineRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tekton_task_(nullptr)
  , order_(0){}
struct CreateTektonTaskPipelineRequestDefaultTypeInternal {
  constexpr CreateTektonTaskPipelineRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateTektonTaskPipelineRequestDefaultTypeInternal() {}
  union {
    CreateTektonTaskPipelineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateTektonTaskPipelineRequestDefaultTypeInternal _CreateTektonTaskPipelineRequest_default_instance_;
constexpr CreateTektonTaskPipelineResponse::CreateTektonTaskPipelineResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : tekton_task_(nullptr){}
struct CreateTektonTaskPipelineResponseDefaultTypeInternal {
  constexpr CreateTektonTaskPipelineResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateTektonTaskPipelineResponseDefaultTypeInternal() {}
  union {
    CreateTektonTaskPipelineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateTektonTaskPipelineResponseDefaultTypeInternal _CreateTektonTaskPipelineResponse_default_instance_;
constexpr DeleteTektonTaskPipelineRequest::DeleteTektonTaskPipelineRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteTektonTaskPipelineRequestDefaultTypeInternal {
  constexpr DeleteTektonTaskPipelineRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteTektonTaskPipelineRequestDefaultTypeInternal() {}
  union {
    DeleteTektonTaskPipelineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteTektonTaskPipelineRequestDefaultTypeInternal _DeleteTektonTaskPipelineRequest_default_instance_;
constexpr DeleteTektonTaskPipelineResponse::DeleteTektonTaskPipelineResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteTektonTaskPipelineResponseDefaultTypeInternal {
  constexpr DeleteTektonTaskPipelineResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteTektonTaskPipelineResponseDefaultTypeInternal() {}
  union {
    DeleteTektonTaskPipelineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteTektonTaskPipelineResponseDefaultTypeInternal _DeleteTektonTaskPipelineResponse_default_instance_;
constexpr ListTektonTaskPipelineRequest::ListTektonTaskPipelineRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ListTektonTaskPipelineRequestDefaultTypeInternal {
  constexpr ListTektonTaskPipelineRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListTektonTaskPipelineRequestDefaultTypeInternal() {}
  union {
    ListTektonTaskPipelineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListTektonTaskPipelineRequestDefaultTypeInternal _ListTektonTaskPipelineRequest_default_instance_;
constexpr ListTektonTaskPipelineResponse::ListTektonTaskPipelineResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , task_list_(nullptr){}
struct ListTektonTaskPipelineResponseDefaultTypeInternal {
  constexpr ListTektonTaskPipelineResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListTektonTaskPipelineResponseDefaultTypeInternal() {}
  union {
    ListTektonTaskPipelineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListTektonTaskPipelineResponseDefaultTypeInternal _ListTektonTaskPipelineResponse_default_instance_;
constexpr GetTektonTaskPipelineRequest::GetTektonTaskPipelineRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetTektonTaskPipelineRequestDefaultTypeInternal {
  constexpr GetTektonTaskPipelineRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTektonTaskPipelineRequestDefaultTypeInternal() {}
  union {
    GetTektonTaskPipelineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTektonTaskPipelineRequestDefaultTypeInternal _GetTektonTaskPipelineRequest_default_instance_;
constexpr GetTektonTaskPipelineResponse::GetTektonTaskPipelineResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , task_(nullptr){}
struct GetTektonTaskPipelineResponseDefaultTypeInternal {
  constexpr GetTektonTaskPipelineResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetTektonTaskPipelineResponseDefaultTypeInternal() {}
  union {
    GetTektonTaskPipelineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetTektonTaskPipelineResponseDefaultTypeInternal _GetTektonTaskPipelineResponse_default_instance_;
constexpr CreateCustomPipelineRequest::CreateCustomPipelineRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_pipeline_(nullptr){}
struct CreateCustomPipelineRequestDefaultTypeInternal {
  constexpr CreateCustomPipelineRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateCustomPipelineRequestDefaultTypeInternal() {}
  union {
    CreateCustomPipelineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateCustomPipelineRequestDefaultTypeInternal _CreateCustomPipelineRequest_default_instance_;
constexpr CreateCustomPipelineResponse::CreateCustomPipelineResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_pipeline_response_(nullptr){}
struct CreateCustomPipelineResponseDefaultTypeInternal {
  constexpr CreateCustomPipelineResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CreateCustomPipelineResponseDefaultTypeInternal() {}
  union {
    CreateCustomPipelineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CreateCustomPipelineResponseDefaultTypeInternal _CreateCustomPipelineResponse_default_instance_;
constexpr DeleteCustomPipelineRequest::DeleteCustomPipelineRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : custom_pipeline_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteCustomPipelineRequestDefaultTypeInternal {
  constexpr DeleteCustomPipelineRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteCustomPipelineRequestDefaultTypeInternal() {}
  union {
    DeleteCustomPipelineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteCustomPipelineRequestDefaultTypeInternal _DeleteCustomPipelineRequest_default_instance_;
constexpr DeleteCustomPipelineResponse::DeleteCustomPipelineResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct DeleteCustomPipelineResponseDefaultTypeInternal {
  constexpr DeleteCustomPipelineResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeleteCustomPipelineResponseDefaultTypeInternal() {}
  union {
    DeleteCustomPipelineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeleteCustomPipelineResponseDefaultTypeInternal _DeleteCustomPipelineResponse_default_instance_;
constexpr ListCustomPipelineRequest::ListCustomPipelineRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ListCustomPipelineRequestDefaultTypeInternal {
  constexpr ListCustomPipelineRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListCustomPipelineRequestDefaultTypeInternal() {}
  union {
    ListCustomPipelineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListCustomPipelineRequestDefaultTypeInternal _ListCustomPipelineRequest_default_instance_;
constexpr ListCustomPipelineResponse::ListCustomPipelineResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , custom_pipeline_(nullptr){}
struct ListCustomPipelineResponseDefaultTypeInternal {
  constexpr ListCustomPipelineResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ListCustomPipelineResponseDefaultTypeInternal() {}
  union {
    ListCustomPipelineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ListCustomPipelineResponseDefaultTypeInternal _ListCustomPipelineResponse_default_instance_;
constexpr GetCustomPipelineRequest::GetCustomPipelineRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : task_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct GetCustomPipelineRequestDefaultTypeInternal {
  constexpr GetCustomPipelineRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCustomPipelineRequestDefaultTypeInternal() {}
  union {
    GetCustomPipelineRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCustomPipelineRequestDefaultTypeInternal _GetCustomPipelineRequest_default_instance_;
constexpr GetCustomPipelineResponse::GetCustomPipelineResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , task_(nullptr){}
struct GetCustomPipelineResponseDefaultTypeInternal {
  constexpr GetCustomPipelineResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~GetCustomPipelineResponseDefaultTypeInternal() {}
  union {
    GetCustomPipelineResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT GetCustomPipelineResponseDefaultTypeInternal _GetCustomPipelineResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace tekton
}  // namespace pipelines
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[20];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest, tekton_pipeline_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse, tekton_pipeline_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest, runtime_name_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest, application_id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest, environment_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::CreateTektonTaskPipelineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::CreateTektonTaskPipelineRequest, tekton_task_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::CreateTektonTaskPipelineRequest, order_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::CreateTektonTaskPipelineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::CreateTektonTaskPipelineResponse, tekton_task_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::DeleteTektonTaskPipelineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::DeleteTektonTaskPipelineRequest, task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::DeleteTektonTaskPipelineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::DeleteTektonTaskPipelineResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ListTektonTaskPipelineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse, task_list_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::GetTektonTaskPipelineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::GetTektonTaskPipelineRequest, task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::GetTektonTaskPipelineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::GetTektonTaskPipelineResponse, task_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::GetTektonTaskPipelineResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::CreateCustomPipelineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::CreateCustomPipelineRequest, custom_pipeline_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::CreateCustomPipelineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::CreateCustomPipelineResponse, custom_pipeline_response_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::DeleteCustomPipelineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::DeleteCustomPipelineRequest, custom_pipeline_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::DeleteCustomPipelineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::DeleteCustomPipelineResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ListCustomPipelineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ListCustomPipelineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ListCustomPipelineResponse, custom_pipeline_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::ListCustomPipelineResponse, status_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::GetCustomPipelineRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::GetCustomPipelineRequest, task_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::GetCustomPipelineResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::GetCustomPipelineResponse, task_),
  PROTOBUF_FIELD_OFFSET(::pipelines::tekton::v1alpha1::GetCustomPipelineResponse, status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest)},
  { 7, -1, sizeof(::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse)},
  { 14, -1, sizeof(::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest)},
  { 22, -1, sizeof(::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse)},
  { 28, -1, sizeof(::pipelines::tekton::v1alpha1::CreateTektonTaskPipelineRequest)},
  { 35, -1, sizeof(::pipelines::tekton::v1alpha1::CreateTektonTaskPipelineResponse)},
  { 41, -1, sizeof(::pipelines::tekton::v1alpha1::DeleteTektonTaskPipelineRequest)},
  { 47, -1, sizeof(::pipelines::tekton::v1alpha1::DeleteTektonTaskPipelineResponse)},
  { 53, -1, sizeof(::pipelines::tekton::v1alpha1::ListTektonTaskPipelineRequest)},
  { 58, -1, sizeof(::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse)},
  { 65, -1, sizeof(::pipelines::tekton::v1alpha1::GetTektonTaskPipelineRequest)},
  { 71, -1, sizeof(::pipelines::tekton::v1alpha1::GetTektonTaskPipelineResponse)},
  { 78, -1, sizeof(::pipelines::tekton::v1alpha1::CreateCustomPipelineRequest)},
  { 84, -1, sizeof(::pipelines::tekton::v1alpha1::CreateCustomPipelineResponse)},
  { 90, -1, sizeof(::pipelines::tekton::v1alpha1::DeleteCustomPipelineRequest)},
  { 96, -1, sizeof(::pipelines::tekton::v1alpha1::DeleteCustomPipelineResponse)},
  { 102, -1, sizeof(::pipelines::tekton::v1alpha1::ListCustomPipelineRequest)},
  { 107, -1, sizeof(::pipelines::tekton::v1alpha1::ListCustomPipelineResponse)},
  { 114, -1, sizeof(::pipelines::tekton::v1alpha1::GetCustomPipelineRequest)},
  { 120, -1, sizeof(::pipelines::tekton::v1alpha1::GetCustomPipelineResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_CreateTektonPipelineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_CreateTektonPipelineResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_DeleteTektonPipelineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_DeleteTektonPipelineResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_CreateTektonTaskPipelineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_CreateTektonTaskPipelineResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_DeleteTektonTaskPipelineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_DeleteTektonTaskPipelineResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_ListTektonTaskPipelineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_ListTektonTaskPipelineResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_GetTektonTaskPipelineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_GetTektonTaskPipelineResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_CreateCustomPipelineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_CreateCustomPipelineResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_DeleteCustomPipelineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_DeleteCustomPipelineResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_ListCustomPipelineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_ListCustomPipelineResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_GetCustomPipelineRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::tekton::v1alpha1::_GetCustomPipelineResponse_default_instance_),
};

const char descriptor_table_protodef_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*pipelines/tekton/v1alpha1/tekton_api.p"
  "roto\022\031pipelines.tekton.v1alpha1\032&pipelin"
  "es/tekton/v1alpha1/tekton.proto\"\204\001\n\033Crea"
  "teTektonPipelineRequest\022L\n\017tekton_pipeli"
  "ne\030\001 \001(\0132#.pipelines.tekton.v1alpha1.Pip"
  "elineR\016tektonPipeline\022\027\n\007user_id\030\002 \001(\tR\006"
  "userId\"\204\001\n\034CreateTektonPipelineResponse\022"
  "L\n\017tekton_pipeline\030\001 \001(\0132#.pipelines.tek"
  "ton.v1alpha1.PipelineR\016tektonPipeline\022\026\n"
  "\006status\030\002 \001(\tR\006status\"\216\001\n\033DeleteTektonPi"
  "pelineRequest\022!\n\014runtime_name\030\001 \001(\tR\013run"
  "timeName\022%\n\016application_id\030\002 \001(\tR\rapplic"
  "ationId\022%\n\016environment_id\030\003 \001(\tR\renviron"
  "mentId\"6\n\034DeleteTektonPipelineResponse\022\026"
  "\n\006status\030\001 \001(\tR\006status\"y\n\037CreateTektonTa"
  "skPipelineRequest\022@\n\013tekton_task\030\001 \001(\0132\037"
  ".pipelines.tekton.v1alpha1.TaskR\ntektonT"
  "ask\022\024\n\005order\030\002 \001(\005R\005order\"d\n CreateTekto"
  "nTaskPipelineResponse\022@\n\013tekton_task\030\001 \001"
  "(\0132\037.pipelines.tekton.v1alpha1.TaskR\ntek"
  "tonTask\":\n\037DeleteTektonTaskPipelineReque"
  "st\022\027\n\007task_id\030\002 \001(\tR\006taskId\":\n DeleteTek"
  "tonTaskPipelineResponse\022\026\n\006status\030\001 \001(\tR"
  "\006status\"\037\n\035ListTektonTaskPipelineRequest"
  "\"\204\001\n\036ListTektonTaskPipelineResponse\022J\n\tt"
  "ask_list\030\001 \001(\0132-.pipelines.tekton.v1alph"
  "a1.CustomPipelineListR\010taskList\022\026\n\006statu"
  "s\030\002 \001(\tR\006status\"7\n\034GetTektonTaskPipeline"
  "Request\022\027\n\007task_id\030\001 \001(\tR\006taskId\"v\n\035GetT"
  "ektonTaskPipelineResponse\022=\n\004task\030\001 \001(\0132"
  ").pipelines.tekton.v1alpha1.CustomPipeli"
  "neR\004task\022\026\n\006status\030\002 \001(\tR\006status\"q\n\033Crea"
  "teCustomPipelineRequest\022R\n\017custom_pipeli"
  "ne\030\001 \001(\0132).pipelines.tekton.v1alpha1.Cus"
  "tomPipelineR\016customPipeline\"\213\001\n\034CreateCu"
  "stomPipelineResponse\022k\n\030custom_pipeline_"
  "response\030\001 \001(\01321.pipelines.tekton.v1alph"
  "a1.CustomPipelineResponseR\026customPipelin"
  "eResponse\"K\n\033DeleteCustomPipelineRequest"
  "\022,\n\022custom_pipeline_id\030\001 \001(\tR\020customPipe"
  "lineId\"6\n\034DeleteCustomPipelineResponse\022\026"
  "\n\006status\030\001 \001(\tR\006status\"\033\n\031ListCustomPipe"
  "lineRequest\"\210\001\n\032ListCustomPipelineRespon"
  "se\022R\n\017custom_pipeline\030\001 \001(\0132).pipelines."
  "tekton.v1alpha1.CustomPipelineR\016customPi"
  "peline\022\026\n\006status\030\002 \001(\tR\006status\"3\n\030GetCus"
  "tomPipelineRequest\022\027\n\007task_id\030\001 \001(\tR\006tas"
  "kId\"h\n\031GetCustomPipelineResponse\0223\n\004task"
  "\030\001 \001(\0132\037.pipelines.tekton.v1alpha1.TaskR"
  "\004task\022\026\n\006status\030\002 \001(\tR\006status2\217\013\n\030Tekton"
  "PipelineAPIService\022\207\001\n\024CreateTektonPipel"
  "ine\0226.pipelines.tekton.v1alpha1.CreateTe"
  "ktonPipelineRequest\0327.pipelines.tekton.v"
  "1alpha1.CreateTektonPipelineResponse\022\207\001\n"
  "\024DeleteTektonPipeline\0226.pipelines.tekton"
  ".v1alpha1.DeleteTektonPipelineRequest\0327."
  "pipelines.tekton.v1alpha1.DeleteTektonPi"
  "pelineResponse\022\223\001\n\030CreateTektonTaskPipel"
  "ine\022:.pipelines.tekton.v1alpha1.CreateTe"
  "ktonTaskPipelineRequest\032;.pipelines.tekt"
  "on.v1alpha1.CreateTektonTaskPipelineResp"
  "onse\022\223\001\n\030DeleteTektonTaskPipeline\022:.pipe"
  "lines.tekton.v1alpha1.DeleteTektonTaskPi"
  "pelineRequest\032;.pipelines.tekton.v1alpha"
  "1.DeleteTektonTaskPipelineResponse\022\215\001\n\026L"
  "istTektonTaskPipeline\0228.pipelines.tekton"
  ".v1alpha1.ListTektonTaskPipelineRequest\032"
  "9.pipelines.tekton.v1alpha1.ListTektonTa"
  "skPipelineResponse\022\212\001\n\025GetTektonTaskPipe"
  "line\0227.pipelines.tekton.v1alpha1.GetTekt"
  "onTaskPipelineRequest\0328.pipelines.tekton"
  ".v1alpha1.GetTektonTaskPipelineResponse\022"
  "\207\001\n\024CreateCustomPipeline\0226.pipelines.tek"
  "ton.v1alpha1.CreateCustomPipelineRequest"
  "\0327.pipelines.tekton.v1alpha1.CreateCusto"
  "mPipelineResponse\022\207\001\n\024DeleteCustomPipeli"
  "ne\0226.pipelines.tekton.v1alpha1.DeleteCus"
  "tomPipelineRequest\0327.pipelines.tekton.v1"
  "alpha1.DeleteCustomPipelineResponse\022\201\001\n\022"
  "ListCustomPipeline\0224.pipelines.tekton.v1"
  "alpha1.ListCustomPipelineRequest\0325.pipel"
  "ines.tekton.v1alpha1.ListCustomPipelineR"
  "esponse\022~\n\021GetCustomPipeline\0223.pipelines"
  ".tekton.v1alpha1.GetCustomPipelineReques"
  "t\0324.pipelines.tekton.v1alpha1.GetCustomP"
  "ipelineResponseB\261\001\n#io.cuemby.pipelines."
  "tekton.v1alpha1B\016TektonAPIProtoP\001Z:githu"
  "b.com/cuemby/ccp-sdk/gen/go/pipelines/te"
  "kton/v1alpha1\242\002\003PPX\252\002\031Pipelines.Tekton.V"
  "1Alpha1\312\002\031Pipelines\\Tekton\\V1Alpha1b\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_deps[1] = {
  &::descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto = {
  false, false, 3603, descriptor_table_protodef_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto, "pipelines/tekton/v1alpha1/tekton_api.proto", 
  &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once, descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_deps, 1, 20,
  schemas, file_default_instances, TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto::offsets,
  file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto, file_level_enum_descriptors_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto, file_level_service_descriptors_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter() {
  return &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto(&descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto);
namespace pipelines {
namespace tekton {
namespace v1alpha1 {

// ===================================================================

class CreateTektonPipelineRequest::_Internal {
 public:
  static const ::pipelines::tekton::v1alpha1::Pipeline& tekton_pipeline(const CreateTektonPipelineRequest* msg);
};

const ::pipelines::tekton::v1alpha1::Pipeline&
CreateTektonPipelineRequest::_Internal::tekton_pipeline(const CreateTektonPipelineRequest* msg) {
  return *msg->tekton_pipeline_;
}
void CreateTektonPipelineRequest::clear_tekton_pipeline() {
  if (GetArenaForAllocation() == nullptr && tekton_pipeline_ != nullptr) {
    delete tekton_pipeline_;
  }
  tekton_pipeline_ = nullptr;
}
CreateTektonPipelineRequest::CreateTektonPipelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest)
}
CreateTektonPipelineRequest::CreateTektonPipelineRequest(const CreateTektonPipelineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tekton_pipeline()) {
    tekton_pipeline_ = new ::pipelines::tekton::v1alpha1::Pipeline(*from.tekton_pipeline_);
  } else {
    tekton_pipeline_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest)
}

inline void CreateTektonPipelineRequest::SharedCtor() {
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tekton_pipeline_ = nullptr;
}

CreateTektonPipelineRequest::~CreateTektonPipelineRequest() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateTektonPipelineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tekton_pipeline_;
}

void CreateTektonPipelineRequest::ArenaDtor(void* object) {
  CreateTektonPipelineRequest* _this = reinterpret_cast< CreateTektonPipelineRequest* >(object);
  (void)_this;
}
void CreateTektonPipelineRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTektonPipelineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateTektonPipelineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && tekton_pipeline_ != nullptr) {
    delete tekton_pipeline_;
  }
  tekton_pipeline_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTektonPipelineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tekton_pipeline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 2 [json_name = "userId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.CreateTektonPipelineRequest.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTektonPipelineRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
  if (this->_internal_has_tekton_pipeline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tekton_pipeline(this), target, stream);
  }

  // string user_id = 2 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.CreateTektonPipelineRequest.user_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest)
  return target;
}

size_t CreateTektonPipelineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string user_id = 2 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
  if (this->_internal_has_tekton_pipeline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tekton_pipeline_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTektonPipelineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateTektonPipelineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTektonPipelineRequest::GetClassData() const { return &_class_data_; }

void CreateTektonPipelineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateTektonPipelineRequest *>(to)->MergeFrom(
      static_cast<const CreateTektonPipelineRequest &>(from));
}


void CreateTektonPipelineRequest::MergeFrom(const CreateTektonPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_tekton_pipeline()) {
    _internal_mutable_tekton_pipeline()->::pipelines::tekton::v1alpha1::Pipeline::MergeFrom(from._internal_tekton_pipeline());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTektonPipelineRequest::CopyFrom(const CreateTektonPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTektonPipelineRequest::IsInitialized() const {
  return true;
}

void CreateTektonPipelineRequest::InternalSwap(CreateTektonPipelineRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  swap(tekton_pipeline_, other->tekton_pipeline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTektonPipelineRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[0]);
}

// ===================================================================

class CreateTektonPipelineResponse::_Internal {
 public:
  static const ::pipelines::tekton::v1alpha1::Pipeline& tekton_pipeline(const CreateTektonPipelineResponse* msg);
};

const ::pipelines::tekton::v1alpha1::Pipeline&
CreateTektonPipelineResponse::_Internal::tekton_pipeline(const CreateTektonPipelineResponse* msg) {
  return *msg->tekton_pipeline_;
}
void CreateTektonPipelineResponse::clear_tekton_pipeline() {
  if (GetArenaForAllocation() == nullptr && tekton_pipeline_ != nullptr) {
    delete tekton_pipeline_;
  }
  tekton_pipeline_ = nullptr;
}
CreateTektonPipelineResponse::CreateTektonPipelineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse)
}
CreateTektonPipelineResponse::CreateTektonPipelineResponse(const CreateTektonPipelineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_tekton_pipeline()) {
    tekton_pipeline_ = new ::pipelines::tekton::v1alpha1::Pipeline(*from.tekton_pipeline_);
  } else {
    tekton_pipeline_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse)
}

inline void CreateTektonPipelineResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tekton_pipeline_ = nullptr;
}

CreateTektonPipelineResponse::~CreateTektonPipelineResponse() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateTektonPipelineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tekton_pipeline_;
}

void CreateTektonPipelineResponse::ArenaDtor(void* object) {
  CreateTektonPipelineResponse* _this = reinterpret_cast< CreateTektonPipelineResponse* >(object);
  (void)_this;
}
void CreateTektonPipelineResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTektonPipelineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateTektonPipelineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && tekton_pipeline_ != nullptr) {
    delete tekton_pipeline_;
  }
  tekton_pipeline_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTektonPipelineResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tekton_pipeline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.CreateTektonPipelineResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTektonPipelineResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
  if (this->_internal_has_tekton_pipeline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tekton_pipeline(this), target, stream);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.CreateTektonPipelineResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse)
  return target;
}

size_t CreateTektonPipelineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
  if (this->_internal_has_tekton_pipeline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tekton_pipeline_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTektonPipelineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateTektonPipelineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTektonPipelineResponse::GetClassData() const { return &_class_data_; }

void CreateTektonPipelineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateTektonPipelineResponse *>(to)->MergeFrom(
      static_cast<const CreateTektonPipelineResponse &>(from));
}


void CreateTektonPipelineResponse::MergeFrom(const CreateTektonPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_tekton_pipeline()) {
    _internal_mutable_tekton_pipeline()->::pipelines::tekton::v1alpha1::Pipeline::MergeFrom(from._internal_tekton_pipeline());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTektonPipelineResponse::CopyFrom(const CreateTektonPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTektonPipelineResponse::IsInitialized() const {
  return true;
}

void CreateTektonPipelineResponse::InternalSwap(CreateTektonPipelineResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
  swap(tekton_pipeline_, other->tekton_pipeline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTektonPipelineResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[1]);
}

// ===================================================================

class DeleteTektonPipelineRequest::_Internal {
 public:
};

DeleteTektonPipelineRequest::DeleteTektonPipelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest)
}
DeleteTektonPipelineRequest::DeleteTektonPipelineRequest(const DeleteTektonPipelineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  runtime_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runtime_name().empty()) {
    runtime_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_runtime_name(), 
      GetArenaForAllocation());
  }
  application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_application_id().empty()) {
    application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_application_id(), 
      GetArenaForAllocation());
  }
  environment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_environment_id().empty()) {
    environment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_environment_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest)
}

inline void DeleteTektonPipelineRequest::SharedCtor() {
runtime_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
environment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteTektonPipelineRequest::~DeleteTektonPipelineRequest() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteTektonPipelineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  runtime_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  application_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  environment_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteTektonPipelineRequest::ArenaDtor(void* object) {
  DeleteTektonPipelineRequest* _this = reinterpret_cast< DeleteTektonPipelineRequest* >(object);
  (void)_this;
}
void DeleteTektonPipelineRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteTektonPipelineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteTektonPipelineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  runtime_name_.ClearToEmpty();
  application_id_.ClearToEmpty();
  environment_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTektonPipelineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string runtime_name = 1 [json_name = "runtimeName"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_runtime_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.runtime_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string application_id = 2 [json_name = "applicationId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_application_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.application_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string environment_id = 3 [json_name = "environmentId"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_environment_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.environment_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTektonPipelineRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string runtime_name = 1 [json_name = "runtimeName"];
  if (!this->_internal_runtime_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime_name().data(), static_cast<int>(this->_internal_runtime_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.runtime_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_runtime_name(), target);
  }

  // string application_id = 2 [json_name = "applicationId"];
  if (!this->_internal_application_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_application_id().data(), static_cast<int>(this->_internal_application_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.application_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_application_id(), target);
  }

  // string environment_id = 3 [json_name = "environmentId"];
  if (!this->_internal_environment_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_environment_id().data(), static_cast<int>(this->_internal_environment_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.environment_id");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_environment_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest)
  return target;
}

size_t DeleteTektonPipelineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string runtime_name = 1 [json_name = "runtimeName"];
  if (!this->_internal_runtime_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtime_name());
  }

  // string application_id = 2 [json_name = "applicationId"];
  if (!this->_internal_application_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_application_id());
  }

  // string environment_id = 3 [json_name = "environmentId"];
  if (!this->_internal_environment_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_environment_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteTektonPipelineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteTektonPipelineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteTektonPipelineRequest::GetClassData() const { return &_class_data_; }

void DeleteTektonPipelineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteTektonPipelineRequest *>(to)->MergeFrom(
      static_cast<const DeleteTektonPipelineRequest &>(from));
}


void DeleteTektonPipelineRequest::MergeFrom(const DeleteTektonPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_runtime_name().empty()) {
    _internal_set_runtime_name(from._internal_runtime_name());
  }
  if (!from._internal_application_id().empty()) {
    _internal_set_application_id(from._internal_application_id());
  }
  if (!from._internal_environment_id().empty()) {
    _internal_set_environment_id(from._internal_environment_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteTektonPipelineRequest::CopyFrom(const DeleteTektonPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTektonPipelineRequest::IsInitialized() const {
  return true;
}

void DeleteTektonPipelineRequest::InternalSwap(DeleteTektonPipelineRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &runtime_name_, GetArenaForAllocation(),
      &other->runtime_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &application_id_, GetArenaForAllocation(),
      &other->application_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &environment_id_, GetArenaForAllocation(),
      &other->environment_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTektonPipelineRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[2]);
}

// ===================================================================

class DeleteTektonPipelineResponse::_Internal {
 public:
};

DeleteTektonPipelineResponse::DeleteTektonPipelineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse)
}
DeleteTektonPipelineResponse::DeleteTektonPipelineResponse(const DeleteTektonPipelineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse)
}

inline void DeleteTektonPipelineResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteTektonPipelineResponse::~DeleteTektonPipelineResponse() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteTektonPipelineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteTektonPipelineResponse::ArenaDtor(void* object) {
  DeleteTektonPipelineResponse* _this = reinterpret_cast< DeleteTektonPipelineResponse* >(object);
  (void)_this;
}
void DeleteTektonPipelineResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteTektonPipelineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteTektonPipelineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTektonPipelineResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTektonPipelineResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse)
  return target;
}

size_t DeleteTektonPipelineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteTektonPipelineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteTektonPipelineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteTektonPipelineResponse::GetClassData() const { return &_class_data_; }

void DeleteTektonPipelineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteTektonPipelineResponse *>(to)->MergeFrom(
      static_cast<const DeleteTektonPipelineResponse &>(from));
}


void DeleteTektonPipelineResponse::MergeFrom(const DeleteTektonPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteTektonPipelineResponse::CopyFrom(const DeleteTektonPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTektonPipelineResponse::IsInitialized() const {
  return true;
}

void DeleteTektonPipelineResponse::InternalSwap(DeleteTektonPipelineResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTektonPipelineResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[3]);
}

// ===================================================================

class CreateTektonTaskPipelineRequest::_Internal {
 public:
  static const ::pipelines::tekton::v1alpha1::Task& tekton_task(const CreateTektonTaskPipelineRequest* msg);
};

const ::pipelines::tekton::v1alpha1::Task&
CreateTektonTaskPipelineRequest::_Internal::tekton_task(const CreateTektonTaskPipelineRequest* msg) {
  return *msg->tekton_task_;
}
void CreateTektonTaskPipelineRequest::clear_tekton_task() {
  if (GetArenaForAllocation() == nullptr && tekton_task_ != nullptr) {
    delete tekton_task_;
  }
  tekton_task_ = nullptr;
}
CreateTektonTaskPipelineRequest::CreateTektonTaskPipelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.CreateTektonTaskPipelineRequest)
}
CreateTektonTaskPipelineRequest::CreateTektonTaskPipelineRequest(const CreateTektonTaskPipelineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tekton_task()) {
    tekton_task_ = new ::pipelines::tekton::v1alpha1::Task(*from.tekton_task_);
  } else {
    tekton_task_ = nullptr;
  }
  order_ = from.order_;
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.CreateTektonTaskPipelineRequest)
}

inline void CreateTektonTaskPipelineRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&tekton_task_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&order_) -
    reinterpret_cast<char*>(&tekton_task_)) + sizeof(order_));
}

CreateTektonTaskPipelineRequest::~CreateTektonTaskPipelineRequest() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.CreateTektonTaskPipelineRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateTektonTaskPipelineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tekton_task_;
}

void CreateTektonTaskPipelineRequest::ArenaDtor(void* object) {
  CreateTektonTaskPipelineRequest* _this = reinterpret_cast< CreateTektonTaskPipelineRequest* >(object);
  (void)_this;
}
void CreateTektonTaskPipelineRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTektonTaskPipelineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateTektonTaskPipelineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.CreateTektonTaskPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && tekton_task_ != nullptr) {
    delete tekton_task_;
  }
  tekton_task_ = nullptr;
  order_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTektonTaskPipelineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pipelines.tekton.v1alpha1.Task tekton_task = 1 [json_name = "tektonTask"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tekton_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 order = 2 [json_name = "order"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          order_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTektonTaskPipelineRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.CreateTektonTaskPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.Task tekton_task = 1 [json_name = "tektonTask"];
  if (this->_internal_has_tekton_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tekton_task(this), target, stream);
  }

  // int32 order = 2 [json_name = "order"];
  if (this->_internal_order() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_order(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.CreateTektonTaskPipelineRequest)
  return target;
}

size_t CreateTektonTaskPipelineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.CreateTektonTaskPipelineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.Task tekton_task = 1 [json_name = "tektonTask"];
  if (this->_internal_has_tekton_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tekton_task_);
  }

  // int32 order = 2 [json_name = "order"];
  if (this->_internal_order() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_order());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTektonTaskPipelineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateTektonTaskPipelineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTektonTaskPipelineRequest::GetClassData() const { return &_class_data_; }

void CreateTektonTaskPipelineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateTektonTaskPipelineRequest *>(to)->MergeFrom(
      static_cast<const CreateTektonTaskPipelineRequest &>(from));
}


void CreateTektonTaskPipelineRequest::MergeFrom(const CreateTektonTaskPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.CreateTektonTaskPipelineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tekton_task()) {
    _internal_mutable_tekton_task()->::pipelines::tekton::v1alpha1::Task::MergeFrom(from._internal_tekton_task());
  }
  if (from._internal_order() != 0) {
    _internal_set_order(from._internal_order());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTektonTaskPipelineRequest::CopyFrom(const CreateTektonTaskPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.CreateTektonTaskPipelineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTektonTaskPipelineRequest::IsInitialized() const {
  return true;
}

void CreateTektonTaskPipelineRequest::InternalSwap(CreateTektonTaskPipelineRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CreateTektonTaskPipelineRequest, order_)
      + sizeof(CreateTektonTaskPipelineRequest::order_)
      - PROTOBUF_FIELD_OFFSET(CreateTektonTaskPipelineRequest, tekton_task_)>(
          reinterpret_cast<char*>(&tekton_task_),
          reinterpret_cast<char*>(&other->tekton_task_));
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTektonTaskPipelineRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[4]);
}

// ===================================================================

class CreateTektonTaskPipelineResponse::_Internal {
 public:
  static const ::pipelines::tekton::v1alpha1::Task& tekton_task(const CreateTektonTaskPipelineResponse* msg);
};

const ::pipelines::tekton::v1alpha1::Task&
CreateTektonTaskPipelineResponse::_Internal::tekton_task(const CreateTektonTaskPipelineResponse* msg) {
  return *msg->tekton_task_;
}
void CreateTektonTaskPipelineResponse::clear_tekton_task() {
  if (GetArenaForAllocation() == nullptr && tekton_task_ != nullptr) {
    delete tekton_task_;
  }
  tekton_task_ = nullptr;
}
CreateTektonTaskPipelineResponse::CreateTektonTaskPipelineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.CreateTektonTaskPipelineResponse)
}
CreateTektonTaskPipelineResponse::CreateTektonTaskPipelineResponse(const CreateTektonTaskPipelineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_tekton_task()) {
    tekton_task_ = new ::pipelines::tekton::v1alpha1::Task(*from.tekton_task_);
  } else {
    tekton_task_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.CreateTektonTaskPipelineResponse)
}

inline void CreateTektonTaskPipelineResponse::SharedCtor() {
tekton_task_ = nullptr;
}

CreateTektonTaskPipelineResponse::~CreateTektonTaskPipelineResponse() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.CreateTektonTaskPipelineResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateTektonTaskPipelineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete tekton_task_;
}

void CreateTektonTaskPipelineResponse::ArenaDtor(void* object) {
  CreateTektonTaskPipelineResponse* _this = reinterpret_cast< CreateTektonTaskPipelineResponse* >(object);
  (void)_this;
}
void CreateTektonTaskPipelineResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateTektonTaskPipelineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateTektonTaskPipelineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.CreateTektonTaskPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && tekton_task_ != nullptr) {
    delete tekton_task_;
  }
  tekton_task_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateTektonTaskPipelineResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pipelines.tekton.v1alpha1.Task tekton_task = 1 [json_name = "tektonTask"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_tekton_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateTektonTaskPipelineResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.CreateTektonTaskPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.Task tekton_task = 1 [json_name = "tektonTask"];
  if (this->_internal_has_tekton_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::tekton_task(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.CreateTektonTaskPipelineResponse)
  return target;
}

size_t CreateTektonTaskPipelineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.CreateTektonTaskPipelineResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.Task tekton_task = 1 [json_name = "tektonTask"];
  if (this->_internal_has_tekton_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *tekton_task_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateTektonTaskPipelineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateTektonTaskPipelineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateTektonTaskPipelineResponse::GetClassData() const { return &_class_data_; }

void CreateTektonTaskPipelineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateTektonTaskPipelineResponse *>(to)->MergeFrom(
      static_cast<const CreateTektonTaskPipelineResponse &>(from));
}


void CreateTektonTaskPipelineResponse::MergeFrom(const CreateTektonTaskPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.CreateTektonTaskPipelineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_tekton_task()) {
    _internal_mutable_tekton_task()->::pipelines::tekton::v1alpha1::Task::MergeFrom(from._internal_tekton_task());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateTektonTaskPipelineResponse::CopyFrom(const CreateTektonTaskPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.CreateTektonTaskPipelineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateTektonTaskPipelineResponse::IsInitialized() const {
  return true;
}

void CreateTektonTaskPipelineResponse::InternalSwap(CreateTektonTaskPipelineResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(tekton_task_, other->tekton_task_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateTektonTaskPipelineResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[5]);
}

// ===================================================================

class DeleteTektonTaskPipelineRequest::_Internal {
 public:
};

DeleteTektonTaskPipelineRequest::DeleteTektonTaskPipelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineRequest)
}
DeleteTektonTaskPipelineRequest::DeleteTektonTaskPipelineRequest(const DeleteTektonTaskPipelineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineRequest)
}

inline void DeleteTektonTaskPipelineRequest::SharedCtor() {
task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteTektonTaskPipelineRequest::~DeleteTektonTaskPipelineRequest() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteTektonTaskPipelineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteTektonTaskPipelineRequest::ArenaDtor(void* object) {
  DeleteTektonTaskPipelineRequest* _this = reinterpret_cast< DeleteTektonTaskPipelineRequest* >(object);
  (void)_this;
}
void DeleteTektonTaskPipelineRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteTektonTaskPipelineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteTektonTaskPipelineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTektonTaskPipelineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string task_id = 2 [json_name = "taskId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineRequest.task_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTektonTaskPipelineRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 2 [json_name = "taskId"];
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_task_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineRequest)
  return target;
}

size_t DeleteTektonTaskPipelineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 2 [json_name = "taskId"];
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteTektonTaskPipelineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteTektonTaskPipelineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteTektonTaskPipelineRequest::GetClassData() const { return &_class_data_; }

void DeleteTektonTaskPipelineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteTektonTaskPipelineRequest *>(to)->MergeFrom(
      static_cast<const DeleteTektonTaskPipelineRequest &>(from));
}


void DeleteTektonTaskPipelineRequest::MergeFrom(const DeleteTektonTaskPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_id().empty()) {
    _internal_set_task_id(from._internal_task_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteTektonTaskPipelineRequest::CopyFrom(const DeleteTektonTaskPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTektonTaskPipelineRequest::IsInitialized() const {
  return true;
}

void DeleteTektonTaskPipelineRequest::InternalSwap(DeleteTektonTaskPipelineRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_id_, GetArenaForAllocation(),
      &other->task_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTektonTaskPipelineRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[6]);
}

// ===================================================================

class DeleteTektonTaskPipelineResponse::_Internal {
 public:
};

DeleteTektonTaskPipelineResponse::DeleteTektonTaskPipelineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineResponse)
}
DeleteTektonTaskPipelineResponse::DeleteTektonTaskPipelineResponse(const DeleteTektonTaskPipelineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineResponse)
}

inline void DeleteTektonTaskPipelineResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteTektonTaskPipelineResponse::~DeleteTektonTaskPipelineResponse() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteTektonTaskPipelineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteTektonTaskPipelineResponse::ArenaDtor(void* object) {
  DeleteTektonTaskPipelineResponse* _this = reinterpret_cast< DeleteTektonTaskPipelineResponse* >(object);
  (void)_this;
}
void DeleteTektonTaskPipelineResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteTektonTaskPipelineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteTektonTaskPipelineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteTektonTaskPipelineResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteTektonTaskPipelineResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineResponse.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineResponse)
  return target;
}

size_t DeleteTektonTaskPipelineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteTektonTaskPipelineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteTektonTaskPipelineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteTektonTaskPipelineResponse::GetClassData() const { return &_class_data_; }

void DeleteTektonTaskPipelineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteTektonTaskPipelineResponse *>(to)->MergeFrom(
      static_cast<const DeleteTektonTaskPipelineResponse &>(from));
}


void DeleteTektonTaskPipelineResponse::MergeFrom(const DeleteTektonTaskPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteTektonTaskPipelineResponse::CopyFrom(const DeleteTektonTaskPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.DeleteTektonTaskPipelineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteTektonTaskPipelineResponse::IsInitialized() const {
  return true;
}

void DeleteTektonTaskPipelineResponse::InternalSwap(DeleteTektonTaskPipelineResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteTektonTaskPipelineResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[7]);
}

// ===================================================================

class ListTektonTaskPipelineRequest::_Internal {
 public:
};

ListTektonTaskPipelineRequest::ListTektonTaskPipelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.ListTektonTaskPipelineRequest)
}
ListTektonTaskPipelineRequest::ListTektonTaskPipelineRequest(const ListTektonTaskPipelineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.ListTektonTaskPipelineRequest)
}

inline void ListTektonTaskPipelineRequest::SharedCtor() {
}

ListTektonTaskPipelineRequest::~ListTektonTaskPipelineRequest() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.ListTektonTaskPipelineRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListTektonTaskPipelineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListTektonTaskPipelineRequest::ArenaDtor(void* object) {
  ListTektonTaskPipelineRequest* _this = reinterpret_cast< ListTektonTaskPipelineRequest* >(object);
  (void)_this;
}
void ListTektonTaskPipelineRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTektonTaskPipelineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListTektonTaskPipelineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.ListTektonTaskPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTektonTaskPipelineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTektonTaskPipelineRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.ListTektonTaskPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.ListTektonTaskPipelineRequest)
  return target;
}

size_t ListTektonTaskPipelineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.ListTektonTaskPipelineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListTektonTaskPipelineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListTektonTaskPipelineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListTektonTaskPipelineRequest::GetClassData() const { return &_class_data_; }

void ListTektonTaskPipelineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListTektonTaskPipelineRequest *>(to)->MergeFrom(
      static_cast<const ListTektonTaskPipelineRequest &>(from));
}


void ListTektonTaskPipelineRequest::MergeFrom(const ListTektonTaskPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.ListTektonTaskPipelineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListTektonTaskPipelineRequest::CopyFrom(const ListTektonTaskPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.ListTektonTaskPipelineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTektonTaskPipelineRequest::IsInitialized() const {
  return true;
}

void ListTektonTaskPipelineRequest::InternalSwap(ListTektonTaskPipelineRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTektonTaskPipelineRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[8]);
}

// ===================================================================

class ListTektonTaskPipelineResponse::_Internal {
 public:
  static const ::pipelines::tekton::v1alpha1::CustomPipelineList& task_list(const ListTektonTaskPipelineResponse* msg);
};

const ::pipelines::tekton::v1alpha1::CustomPipelineList&
ListTektonTaskPipelineResponse::_Internal::task_list(const ListTektonTaskPipelineResponse* msg) {
  return *msg->task_list_;
}
void ListTektonTaskPipelineResponse::clear_task_list() {
  if (GetArenaForAllocation() == nullptr && task_list_ != nullptr) {
    delete task_list_;
  }
  task_list_ = nullptr;
}
ListTektonTaskPipelineResponse::ListTektonTaskPipelineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse)
}
ListTektonTaskPipelineResponse::ListTektonTaskPipelineResponse(const ListTektonTaskPipelineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_task_list()) {
    task_list_ = new ::pipelines::tekton::v1alpha1::CustomPipelineList(*from.task_list_);
  } else {
    task_list_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse)
}

inline void ListTektonTaskPipelineResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
task_list_ = nullptr;
}

ListTektonTaskPipelineResponse::~ListTektonTaskPipelineResponse() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListTektonTaskPipelineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete task_list_;
}

void ListTektonTaskPipelineResponse::ArenaDtor(void* object) {
  ListTektonTaskPipelineResponse* _this = reinterpret_cast< ListTektonTaskPipelineResponse* >(object);
  (void)_this;
}
void ListTektonTaskPipelineResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListTektonTaskPipelineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListTektonTaskPipelineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && task_list_ != nullptr) {
    delete task_list_;
  }
  task_list_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListTektonTaskPipelineResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pipelines.tekton.v1alpha1.CustomPipelineList task_list = 1 [json_name = "taskList"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListTektonTaskPipelineResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.CustomPipelineList task_list = 1 [json_name = "taskList"];
  if (this->_internal_has_task_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task_list(this), target, stream);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse)
  return target;
}

size_t ListTektonTaskPipelineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .pipelines.tekton.v1alpha1.CustomPipelineList task_list = 1 [json_name = "taskList"];
  if (this->_internal_has_task_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_list_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListTektonTaskPipelineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListTektonTaskPipelineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListTektonTaskPipelineResponse::GetClassData() const { return &_class_data_; }

void ListTektonTaskPipelineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListTektonTaskPipelineResponse *>(to)->MergeFrom(
      static_cast<const ListTektonTaskPipelineResponse &>(from));
}


void ListTektonTaskPipelineResponse::MergeFrom(const ListTektonTaskPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_task_list()) {
    _internal_mutable_task_list()->::pipelines::tekton::v1alpha1::CustomPipelineList::MergeFrom(from._internal_task_list());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListTektonTaskPipelineResponse::CopyFrom(const ListTektonTaskPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.ListTektonTaskPipelineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListTektonTaskPipelineResponse::IsInitialized() const {
  return true;
}

void ListTektonTaskPipelineResponse::InternalSwap(ListTektonTaskPipelineResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
  swap(task_list_, other->task_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListTektonTaskPipelineResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[9]);
}

// ===================================================================

class GetTektonTaskPipelineRequest::_Internal {
 public:
};

GetTektonTaskPipelineRequest::GetTektonTaskPipelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.GetTektonTaskPipelineRequest)
}
GetTektonTaskPipelineRequest::GetTektonTaskPipelineRequest(const GetTektonTaskPipelineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.GetTektonTaskPipelineRequest)
}

inline void GetTektonTaskPipelineRequest::SharedCtor() {
task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetTektonTaskPipelineRequest::~GetTektonTaskPipelineRequest() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.GetTektonTaskPipelineRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTektonTaskPipelineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetTektonTaskPipelineRequest::ArenaDtor(void* object) {
  GetTektonTaskPipelineRequest* _this = reinterpret_cast< GetTektonTaskPipelineRequest* >(object);
  (void)_this;
}
void GetTektonTaskPipelineRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTektonTaskPipelineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTektonTaskPipelineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.GetTektonTaskPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTektonTaskPipelineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string task_id = 1 [json_name = "taskId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.GetTektonTaskPipelineRequest.task_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTektonTaskPipelineRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.GetTektonTaskPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1 [json_name = "taskId"];
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.GetTektonTaskPipelineRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.GetTektonTaskPipelineRequest)
  return target;
}

size_t GetTektonTaskPipelineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.GetTektonTaskPipelineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 1 [json_name = "taskId"];
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTektonTaskPipelineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTektonTaskPipelineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTektonTaskPipelineRequest::GetClassData() const { return &_class_data_; }

void GetTektonTaskPipelineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetTektonTaskPipelineRequest *>(to)->MergeFrom(
      static_cast<const GetTektonTaskPipelineRequest &>(from));
}


void GetTektonTaskPipelineRequest::MergeFrom(const GetTektonTaskPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.GetTektonTaskPipelineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_id().empty()) {
    _internal_set_task_id(from._internal_task_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTektonTaskPipelineRequest::CopyFrom(const GetTektonTaskPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.GetTektonTaskPipelineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTektonTaskPipelineRequest::IsInitialized() const {
  return true;
}

void GetTektonTaskPipelineRequest::InternalSwap(GetTektonTaskPipelineRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_id_, GetArenaForAllocation(),
      &other->task_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTektonTaskPipelineRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[10]);
}

// ===================================================================

class GetTektonTaskPipelineResponse::_Internal {
 public:
  static const ::pipelines::tekton::v1alpha1::CustomPipeline& task(const GetTektonTaskPipelineResponse* msg);
};

const ::pipelines::tekton::v1alpha1::CustomPipeline&
GetTektonTaskPipelineResponse::_Internal::task(const GetTektonTaskPipelineResponse* msg) {
  return *msg->task_;
}
void GetTektonTaskPipelineResponse::clear_task() {
  if (GetArenaForAllocation() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
GetTektonTaskPipelineResponse::GetTektonTaskPipelineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.GetTektonTaskPipelineResponse)
}
GetTektonTaskPipelineResponse::GetTektonTaskPipelineResponse(const GetTektonTaskPipelineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_task()) {
    task_ = new ::pipelines::tekton::v1alpha1::CustomPipeline(*from.task_);
  } else {
    task_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.GetTektonTaskPipelineResponse)
}

inline void GetTektonTaskPipelineResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
task_ = nullptr;
}

GetTektonTaskPipelineResponse::~GetTektonTaskPipelineResponse() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.GetTektonTaskPipelineResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetTektonTaskPipelineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete task_;
}

void GetTektonTaskPipelineResponse::ArenaDtor(void* object) {
  GetTektonTaskPipelineResponse* _this = reinterpret_cast< GetTektonTaskPipelineResponse* >(object);
  (void)_this;
}
void GetTektonTaskPipelineResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetTektonTaskPipelineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetTektonTaskPipelineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.GetTektonTaskPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetTektonTaskPipelineResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pipelines.tekton.v1alpha1.CustomPipeline task = 1 [json_name = "task"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.GetTektonTaskPipelineResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetTektonTaskPipelineResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.GetTektonTaskPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.CustomPipeline task = 1 [json_name = "task"];
  if (this->_internal_has_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task(this), target, stream);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.GetTektonTaskPipelineResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.GetTektonTaskPipelineResponse)
  return target;
}

size_t GetTektonTaskPipelineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.GetTektonTaskPipelineResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .pipelines.tekton.v1alpha1.CustomPipeline task = 1 [json_name = "task"];
  if (this->_internal_has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetTektonTaskPipelineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetTektonTaskPipelineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetTektonTaskPipelineResponse::GetClassData() const { return &_class_data_; }

void GetTektonTaskPipelineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetTektonTaskPipelineResponse *>(to)->MergeFrom(
      static_cast<const GetTektonTaskPipelineResponse &>(from));
}


void GetTektonTaskPipelineResponse::MergeFrom(const GetTektonTaskPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.GetTektonTaskPipelineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_task()) {
    _internal_mutable_task()->::pipelines::tekton::v1alpha1::CustomPipeline::MergeFrom(from._internal_task());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetTektonTaskPipelineResponse::CopyFrom(const GetTektonTaskPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.GetTektonTaskPipelineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTektonTaskPipelineResponse::IsInitialized() const {
  return true;
}

void GetTektonTaskPipelineResponse::InternalSwap(GetTektonTaskPipelineResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
  swap(task_, other->task_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetTektonTaskPipelineResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[11]);
}

// ===================================================================

class CreateCustomPipelineRequest::_Internal {
 public:
  static const ::pipelines::tekton::v1alpha1::CustomPipeline& custom_pipeline(const CreateCustomPipelineRequest* msg);
};

const ::pipelines::tekton::v1alpha1::CustomPipeline&
CreateCustomPipelineRequest::_Internal::custom_pipeline(const CreateCustomPipelineRequest* msg) {
  return *msg->custom_pipeline_;
}
void CreateCustomPipelineRequest::clear_custom_pipeline() {
  if (GetArenaForAllocation() == nullptr && custom_pipeline_ != nullptr) {
    delete custom_pipeline_;
  }
  custom_pipeline_ = nullptr;
}
CreateCustomPipelineRequest::CreateCustomPipelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.CreateCustomPipelineRequest)
}
CreateCustomPipelineRequest::CreateCustomPipelineRequest(const CreateCustomPipelineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_custom_pipeline()) {
    custom_pipeline_ = new ::pipelines::tekton::v1alpha1::CustomPipeline(*from.custom_pipeline_);
  } else {
    custom_pipeline_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.CreateCustomPipelineRequest)
}

inline void CreateCustomPipelineRequest::SharedCtor() {
custom_pipeline_ = nullptr;
}

CreateCustomPipelineRequest::~CreateCustomPipelineRequest() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.CreateCustomPipelineRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateCustomPipelineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete custom_pipeline_;
}

void CreateCustomPipelineRequest::ArenaDtor(void* object) {
  CreateCustomPipelineRequest* _this = reinterpret_cast< CreateCustomPipelineRequest* >(object);
  (void)_this;
}
void CreateCustomPipelineRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateCustomPipelineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateCustomPipelineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.CreateCustomPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && custom_pipeline_ != nullptr) {
    delete custom_pipeline_;
  }
  custom_pipeline_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateCustomPipelineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pipelines.tekton.v1alpha1.CustomPipeline custom_pipeline = 1 [json_name = "customPipeline"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_pipeline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateCustomPipelineRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.CreateCustomPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.CustomPipeline custom_pipeline = 1 [json_name = "customPipeline"];
  if (this->_internal_has_custom_pipeline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::custom_pipeline(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.CreateCustomPipelineRequest)
  return target;
}

size_t CreateCustomPipelineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.CreateCustomPipelineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.CustomPipeline custom_pipeline = 1 [json_name = "customPipeline"];
  if (this->_internal_has_custom_pipeline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *custom_pipeline_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateCustomPipelineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateCustomPipelineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateCustomPipelineRequest::GetClassData() const { return &_class_data_; }

void CreateCustomPipelineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateCustomPipelineRequest *>(to)->MergeFrom(
      static_cast<const CreateCustomPipelineRequest &>(from));
}


void CreateCustomPipelineRequest::MergeFrom(const CreateCustomPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.CreateCustomPipelineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_custom_pipeline()) {
    _internal_mutable_custom_pipeline()->::pipelines::tekton::v1alpha1::CustomPipeline::MergeFrom(from._internal_custom_pipeline());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateCustomPipelineRequest::CopyFrom(const CreateCustomPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.CreateCustomPipelineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCustomPipelineRequest::IsInitialized() const {
  return true;
}

void CreateCustomPipelineRequest::InternalSwap(CreateCustomPipelineRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(custom_pipeline_, other->custom_pipeline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCustomPipelineRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[12]);
}

// ===================================================================

class CreateCustomPipelineResponse::_Internal {
 public:
  static const ::pipelines::tekton::v1alpha1::CustomPipelineResponse& custom_pipeline_response(const CreateCustomPipelineResponse* msg);
};

const ::pipelines::tekton::v1alpha1::CustomPipelineResponse&
CreateCustomPipelineResponse::_Internal::custom_pipeline_response(const CreateCustomPipelineResponse* msg) {
  return *msg->custom_pipeline_response_;
}
void CreateCustomPipelineResponse::clear_custom_pipeline_response() {
  if (GetArenaForAllocation() == nullptr && custom_pipeline_response_ != nullptr) {
    delete custom_pipeline_response_;
  }
  custom_pipeline_response_ = nullptr;
}
CreateCustomPipelineResponse::CreateCustomPipelineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.CreateCustomPipelineResponse)
}
CreateCustomPipelineResponse::CreateCustomPipelineResponse(const CreateCustomPipelineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_custom_pipeline_response()) {
    custom_pipeline_response_ = new ::pipelines::tekton::v1alpha1::CustomPipelineResponse(*from.custom_pipeline_response_);
  } else {
    custom_pipeline_response_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.CreateCustomPipelineResponse)
}

inline void CreateCustomPipelineResponse::SharedCtor() {
custom_pipeline_response_ = nullptr;
}

CreateCustomPipelineResponse::~CreateCustomPipelineResponse() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.CreateCustomPipelineResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void CreateCustomPipelineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete custom_pipeline_response_;
}

void CreateCustomPipelineResponse::ArenaDtor(void* object) {
  CreateCustomPipelineResponse* _this = reinterpret_cast< CreateCustomPipelineResponse* >(object);
  (void)_this;
}
void CreateCustomPipelineResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CreateCustomPipelineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void CreateCustomPipelineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.CreateCustomPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && custom_pipeline_response_ != nullptr) {
    delete custom_pipeline_response_;
  }
  custom_pipeline_response_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CreateCustomPipelineResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pipelines.tekton.v1alpha1.CustomPipelineResponse custom_pipeline_response = 1 [json_name = "customPipelineResponse"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_pipeline_response(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CreateCustomPipelineResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.CreateCustomPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.CustomPipelineResponse custom_pipeline_response = 1 [json_name = "customPipelineResponse"];
  if (this->_internal_has_custom_pipeline_response()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::custom_pipeline_response(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.CreateCustomPipelineResponse)
  return target;
}

size_t CreateCustomPipelineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.CreateCustomPipelineResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.CustomPipelineResponse custom_pipeline_response = 1 [json_name = "customPipelineResponse"];
  if (this->_internal_has_custom_pipeline_response()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *custom_pipeline_response_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CreateCustomPipelineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    CreateCustomPipelineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CreateCustomPipelineResponse::GetClassData() const { return &_class_data_; }

void CreateCustomPipelineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<CreateCustomPipelineResponse *>(to)->MergeFrom(
      static_cast<const CreateCustomPipelineResponse &>(from));
}


void CreateCustomPipelineResponse::MergeFrom(const CreateCustomPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.CreateCustomPipelineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_custom_pipeline_response()) {
    _internal_mutable_custom_pipeline_response()->::pipelines::tekton::v1alpha1::CustomPipelineResponse::MergeFrom(from._internal_custom_pipeline_response());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CreateCustomPipelineResponse::CopyFrom(const CreateCustomPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.CreateCustomPipelineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateCustomPipelineResponse::IsInitialized() const {
  return true;
}

void CreateCustomPipelineResponse::InternalSwap(CreateCustomPipelineResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(custom_pipeline_response_, other->custom_pipeline_response_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CreateCustomPipelineResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[13]);
}

// ===================================================================

class DeleteCustomPipelineRequest::_Internal {
 public:
};

DeleteCustomPipelineRequest::DeleteCustomPipelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.DeleteCustomPipelineRequest)
}
DeleteCustomPipelineRequest::DeleteCustomPipelineRequest(const DeleteCustomPipelineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  custom_pipeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_custom_pipeline_id().empty()) {
    custom_pipeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_custom_pipeline_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.DeleteCustomPipelineRequest)
}

inline void DeleteCustomPipelineRequest::SharedCtor() {
custom_pipeline_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteCustomPipelineRequest::~DeleteCustomPipelineRequest() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.DeleteCustomPipelineRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteCustomPipelineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  custom_pipeline_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteCustomPipelineRequest::ArenaDtor(void* object) {
  DeleteCustomPipelineRequest* _this = reinterpret_cast< DeleteCustomPipelineRequest* >(object);
  (void)_this;
}
void DeleteCustomPipelineRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteCustomPipelineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteCustomPipelineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.DeleteCustomPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  custom_pipeline_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteCustomPipelineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string custom_pipeline_id = 1 [json_name = "customPipelineId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_custom_pipeline_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.DeleteCustomPipelineRequest.custom_pipeline_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteCustomPipelineRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.DeleteCustomPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string custom_pipeline_id = 1 [json_name = "customPipelineId"];
  if (!this->_internal_custom_pipeline_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_custom_pipeline_id().data(), static_cast<int>(this->_internal_custom_pipeline_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.DeleteCustomPipelineRequest.custom_pipeline_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_custom_pipeline_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.DeleteCustomPipelineRequest)
  return target;
}

size_t DeleteCustomPipelineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.DeleteCustomPipelineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string custom_pipeline_id = 1 [json_name = "customPipelineId"];
  if (!this->_internal_custom_pipeline_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_custom_pipeline_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteCustomPipelineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteCustomPipelineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteCustomPipelineRequest::GetClassData() const { return &_class_data_; }

void DeleteCustomPipelineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteCustomPipelineRequest *>(to)->MergeFrom(
      static_cast<const DeleteCustomPipelineRequest &>(from));
}


void DeleteCustomPipelineRequest::MergeFrom(const DeleteCustomPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.DeleteCustomPipelineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_custom_pipeline_id().empty()) {
    _internal_set_custom_pipeline_id(from._internal_custom_pipeline_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteCustomPipelineRequest::CopyFrom(const DeleteCustomPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.DeleteCustomPipelineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCustomPipelineRequest::IsInitialized() const {
  return true;
}

void DeleteCustomPipelineRequest::InternalSwap(DeleteCustomPipelineRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &custom_pipeline_id_, GetArenaForAllocation(),
      &other->custom_pipeline_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCustomPipelineRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[14]);
}

// ===================================================================

class DeleteCustomPipelineResponse::_Internal {
 public:
};

DeleteCustomPipelineResponse::DeleteCustomPipelineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.DeleteCustomPipelineResponse)
}
DeleteCustomPipelineResponse::DeleteCustomPipelineResponse(const DeleteCustomPipelineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.DeleteCustomPipelineResponse)
}

inline void DeleteCustomPipelineResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

DeleteCustomPipelineResponse::~DeleteCustomPipelineResponse() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.DeleteCustomPipelineResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DeleteCustomPipelineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeleteCustomPipelineResponse::ArenaDtor(void* object) {
  DeleteCustomPipelineResponse* _this = reinterpret_cast< DeleteCustomPipelineResponse* >(object);
  (void)_this;
}
void DeleteCustomPipelineResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeleteCustomPipelineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeleteCustomPipelineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.DeleteCustomPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeleteCustomPipelineResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string status = 1 [json_name = "status"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.DeleteCustomPipelineResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeleteCustomPipelineResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.DeleteCustomPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string status = 1 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.DeleteCustomPipelineResponse.status");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.DeleteCustomPipelineResponse)
  return target;
}

size_t DeleteCustomPipelineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.DeleteCustomPipelineResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 1 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DeleteCustomPipelineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DeleteCustomPipelineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DeleteCustomPipelineResponse::GetClassData() const { return &_class_data_; }

void DeleteCustomPipelineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<DeleteCustomPipelineResponse *>(to)->MergeFrom(
      static_cast<const DeleteCustomPipelineResponse &>(from));
}


void DeleteCustomPipelineResponse::MergeFrom(const DeleteCustomPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.DeleteCustomPipelineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DeleteCustomPipelineResponse::CopyFrom(const DeleteCustomPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.DeleteCustomPipelineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteCustomPipelineResponse::IsInitialized() const {
  return true;
}

void DeleteCustomPipelineResponse::InternalSwap(DeleteCustomPipelineResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata DeleteCustomPipelineResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[15]);
}

// ===================================================================

class ListCustomPipelineRequest::_Internal {
 public:
};

ListCustomPipelineRequest::ListCustomPipelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.ListCustomPipelineRequest)
}
ListCustomPipelineRequest::ListCustomPipelineRequest(const ListCustomPipelineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.ListCustomPipelineRequest)
}

inline void ListCustomPipelineRequest::SharedCtor() {
}

ListCustomPipelineRequest::~ListCustomPipelineRequest() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.ListCustomPipelineRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListCustomPipelineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ListCustomPipelineRequest::ArenaDtor(void* object) {
  ListCustomPipelineRequest* _this = reinterpret_cast< ListCustomPipelineRequest* >(object);
  (void)_this;
}
void ListCustomPipelineRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCustomPipelineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListCustomPipelineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.ListCustomPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCustomPipelineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCustomPipelineRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.ListCustomPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.ListCustomPipelineRequest)
  return target;
}

size_t ListCustomPipelineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.ListCustomPipelineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListCustomPipelineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListCustomPipelineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListCustomPipelineRequest::GetClassData() const { return &_class_data_; }

void ListCustomPipelineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListCustomPipelineRequest *>(to)->MergeFrom(
      static_cast<const ListCustomPipelineRequest &>(from));
}


void ListCustomPipelineRequest::MergeFrom(const ListCustomPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.ListCustomPipelineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListCustomPipelineRequest::CopyFrom(const ListCustomPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.ListCustomPipelineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCustomPipelineRequest::IsInitialized() const {
  return true;
}

void ListCustomPipelineRequest::InternalSwap(ListCustomPipelineRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCustomPipelineRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[16]);
}

// ===================================================================

class ListCustomPipelineResponse::_Internal {
 public:
  static const ::pipelines::tekton::v1alpha1::CustomPipeline& custom_pipeline(const ListCustomPipelineResponse* msg);
};

const ::pipelines::tekton::v1alpha1::CustomPipeline&
ListCustomPipelineResponse::_Internal::custom_pipeline(const ListCustomPipelineResponse* msg) {
  return *msg->custom_pipeline_;
}
void ListCustomPipelineResponse::clear_custom_pipeline() {
  if (GetArenaForAllocation() == nullptr && custom_pipeline_ != nullptr) {
    delete custom_pipeline_;
  }
  custom_pipeline_ = nullptr;
}
ListCustomPipelineResponse::ListCustomPipelineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.ListCustomPipelineResponse)
}
ListCustomPipelineResponse::ListCustomPipelineResponse(const ListCustomPipelineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_custom_pipeline()) {
    custom_pipeline_ = new ::pipelines::tekton::v1alpha1::CustomPipeline(*from.custom_pipeline_);
  } else {
    custom_pipeline_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.ListCustomPipelineResponse)
}

inline void ListCustomPipelineResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
custom_pipeline_ = nullptr;
}

ListCustomPipelineResponse::~ListCustomPipelineResponse() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.ListCustomPipelineResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ListCustomPipelineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete custom_pipeline_;
}

void ListCustomPipelineResponse::ArenaDtor(void* object) {
  ListCustomPipelineResponse* _this = reinterpret_cast< ListCustomPipelineResponse* >(object);
  (void)_this;
}
void ListCustomPipelineResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ListCustomPipelineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ListCustomPipelineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.ListCustomPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && custom_pipeline_ != nullptr) {
    delete custom_pipeline_;
  }
  custom_pipeline_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ListCustomPipelineResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pipelines.tekton.v1alpha1.CustomPipeline custom_pipeline = 1 [json_name = "customPipeline"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_custom_pipeline(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.ListCustomPipelineResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ListCustomPipelineResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.ListCustomPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.CustomPipeline custom_pipeline = 1 [json_name = "customPipeline"];
  if (this->_internal_has_custom_pipeline()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::custom_pipeline(this), target, stream);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.ListCustomPipelineResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.ListCustomPipelineResponse)
  return target;
}

size_t ListCustomPipelineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.ListCustomPipelineResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .pipelines.tekton.v1alpha1.CustomPipeline custom_pipeline = 1 [json_name = "customPipeline"];
  if (this->_internal_has_custom_pipeline()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *custom_pipeline_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ListCustomPipelineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ListCustomPipelineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ListCustomPipelineResponse::GetClassData() const { return &_class_data_; }

void ListCustomPipelineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ListCustomPipelineResponse *>(to)->MergeFrom(
      static_cast<const ListCustomPipelineResponse &>(from));
}


void ListCustomPipelineResponse::MergeFrom(const ListCustomPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.ListCustomPipelineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_custom_pipeline()) {
    _internal_mutable_custom_pipeline()->::pipelines::tekton::v1alpha1::CustomPipeline::MergeFrom(from._internal_custom_pipeline());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ListCustomPipelineResponse::CopyFrom(const ListCustomPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.ListCustomPipelineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ListCustomPipelineResponse::IsInitialized() const {
  return true;
}

void ListCustomPipelineResponse::InternalSwap(ListCustomPipelineResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
  swap(custom_pipeline_, other->custom_pipeline_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ListCustomPipelineResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[17]);
}

// ===================================================================

class GetCustomPipelineRequest::_Internal {
 public:
};

GetCustomPipelineRequest::GetCustomPipelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.GetCustomPipelineRequest)
}
GetCustomPipelineRequest::GetCustomPipelineRequest(const GetCustomPipelineRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_task_id().empty()) {
    task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_task_id(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.GetCustomPipelineRequest)
}

inline void GetCustomPipelineRequest::SharedCtor() {
task_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

GetCustomPipelineRequest::~GetCustomPipelineRequest() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.GetCustomPipelineRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetCustomPipelineRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  task_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetCustomPipelineRequest::ArenaDtor(void* object) {
  GetCustomPipelineRequest* _this = reinterpret_cast< GetCustomPipelineRequest* >(object);
  (void)_this;
}
void GetCustomPipelineRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCustomPipelineRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCustomPipelineRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.GetCustomPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  task_id_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCustomPipelineRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string task_id = 1 [json_name = "taskId"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_task_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.GetCustomPipelineRequest.task_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCustomPipelineRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.GetCustomPipelineRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string task_id = 1 [json_name = "taskId"];
  if (!this->_internal_task_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_task_id().data(), static_cast<int>(this->_internal_task_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.GetCustomPipelineRequest.task_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_task_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.GetCustomPipelineRequest)
  return target;
}

size_t GetCustomPipelineRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.GetCustomPipelineRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string task_id = 1 [json_name = "taskId"];
  if (!this->_internal_task_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_task_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCustomPipelineRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetCustomPipelineRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCustomPipelineRequest::GetClassData() const { return &_class_data_; }

void GetCustomPipelineRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetCustomPipelineRequest *>(to)->MergeFrom(
      static_cast<const GetCustomPipelineRequest &>(from));
}


void GetCustomPipelineRequest::MergeFrom(const GetCustomPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.GetCustomPipelineRequest)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_task_id().empty()) {
    _internal_set_task_id(from._internal_task_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCustomPipelineRequest::CopyFrom(const GetCustomPipelineRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.GetCustomPipelineRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCustomPipelineRequest::IsInitialized() const {
  return true;
}

void GetCustomPipelineRequest::InternalSwap(GetCustomPipelineRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &task_id_, GetArenaForAllocation(),
      &other->task_id_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCustomPipelineRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[18]);
}

// ===================================================================

class GetCustomPipelineResponse::_Internal {
 public:
  static const ::pipelines::tekton::v1alpha1::Task& task(const GetCustomPipelineResponse* msg);
};

const ::pipelines::tekton::v1alpha1::Task&
GetCustomPipelineResponse::_Internal::task(const GetCustomPipelineResponse* msg) {
  return *msg->task_;
}
void GetCustomPipelineResponse::clear_task() {
  if (GetArenaForAllocation() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
}
GetCustomPipelineResponse::GetCustomPipelineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.tekton.v1alpha1.GetCustomPipelineResponse)
}
GetCustomPipelineResponse::GetCustomPipelineResponse(const GetCustomPipelineResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_status().empty()) {
    status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_status(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_task()) {
    task_ = new ::pipelines::tekton::v1alpha1::Task(*from.task_);
  } else {
    task_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.tekton.v1alpha1.GetCustomPipelineResponse)
}

inline void GetCustomPipelineResponse::SharedCtor() {
status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
task_ = nullptr;
}

GetCustomPipelineResponse::~GetCustomPipelineResponse() {
  // @@protoc_insertion_point(destructor:pipelines.tekton.v1alpha1.GetCustomPipelineResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void GetCustomPipelineResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete task_;
}

void GetCustomPipelineResponse::ArenaDtor(void* object) {
  GetCustomPipelineResponse* _this = reinterpret_cast< GetCustomPipelineResponse* >(object);
  (void)_this;
}
void GetCustomPipelineResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GetCustomPipelineResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void GetCustomPipelineResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.tekton.v1alpha1.GetCustomPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  status_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && task_ != nullptr) {
    delete task_;
  }
  task_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GetCustomPipelineResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .pipelines.tekton.v1alpha1.Task task = 1 [json_name = "task"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_task(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string status = 2 [json_name = "status"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.tekton.v1alpha1.GetCustomPipelineResponse.status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetCustomPipelineResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.tekton.v1alpha1.GetCustomPipelineResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .pipelines.tekton.v1alpha1.Task task = 1 [json_name = "task"];
  if (this->_internal_has_task()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::task(this), target, stream);
  }

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_status().data(), static_cast<int>(this->_internal_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.tekton.v1alpha1.GetCustomPipelineResponse.status");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.tekton.v1alpha1.GetCustomPipelineResponse)
  return target;
}

size_t GetCustomPipelineResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.tekton.v1alpha1.GetCustomPipelineResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string status = 2 [json_name = "status"];
  if (!this->_internal_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_status());
  }

  // .pipelines.tekton.v1alpha1.Task task = 1 [json_name = "task"];
  if (this->_internal_has_task()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *task_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData GetCustomPipelineResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    GetCustomPipelineResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetCustomPipelineResponse::GetClassData() const { return &_class_data_; }

void GetCustomPipelineResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<GetCustomPipelineResponse *>(to)->MergeFrom(
      static_cast<const GetCustomPipelineResponse &>(from));
}


void GetCustomPipelineResponse::MergeFrom(const GetCustomPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.tekton.v1alpha1.GetCustomPipelineResponse)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_status().empty()) {
    _internal_set_status(from._internal_status());
  }
  if (from._internal_has_task()) {
    _internal_mutable_task()->::pipelines::tekton::v1alpha1::Task::MergeFrom(from._internal_task());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void GetCustomPipelineResponse::CopyFrom(const GetCustomPipelineResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.tekton.v1alpha1.GetCustomPipelineResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCustomPipelineResponse::IsInitialized() const {
  return true;
}

void GetCustomPipelineResponse::InternalSwap(GetCustomPipelineResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &status_, GetArenaForAllocation(),
      &other->status_, other->GetArenaForAllocation()
  );
  swap(task_, other->task_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetCustomPipelineResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_getter, &descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto_once,
      file_level_metadata_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto[19]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace tekton
}  // namespace pipelines
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::CreateTektonTaskPipelineRequest* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::CreateTektonTaskPipelineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::CreateTektonTaskPipelineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::CreateTektonTaskPipelineResponse* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::CreateTektonTaskPipelineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::CreateTektonTaskPipelineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::DeleteTektonTaskPipelineRequest* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::DeleteTektonTaskPipelineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::DeleteTektonTaskPipelineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::DeleteTektonTaskPipelineResponse* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::DeleteTektonTaskPipelineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::DeleteTektonTaskPipelineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineRequest* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::GetTektonTaskPipelineRequest* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::GetTektonTaskPipelineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::GetTektonTaskPipelineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::GetTektonTaskPipelineResponse* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::GetTektonTaskPipelineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::GetTektonTaskPipelineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::CreateCustomPipelineRequest* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::CreateCustomPipelineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::CreateCustomPipelineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::CreateCustomPipelineResponse* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::CreateCustomPipelineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::CreateCustomPipelineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::DeleteCustomPipelineRequest* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::DeleteCustomPipelineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::DeleteCustomPipelineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::DeleteCustomPipelineResponse* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::DeleteCustomPipelineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::DeleteCustomPipelineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::ListCustomPipelineRequest* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::ListCustomPipelineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::ListCustomPipelineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::ListCustomPipelineResponse* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::ListCustomPipelineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::ListCustomPipelineResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::GetCustomPipelineRequest* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::GetCustomPipelineRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::GetCustomPipelineRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::tekton::v1alpha1::GetCustomPipelineResponse* Arena::CreateMaybeMessage< ::pipelines::tekton::v1alpha1::GetCustomPipelineResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::tekton::v1alpha1::GetCustomPipelineResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
