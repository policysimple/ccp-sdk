// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pipelines/tekton/v1alpha1/tekton_api.proto

#include "pipelines/tekton/v1alpha1/tekton_api.pb.h"
#include "pipelines/tekton/v1alpha1/tekton_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pipelines {
namespace tekton {
namespace v1alpha1 {

static const char* TektonPipelineAPIService_method_names[] = {
  "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/CreateTektonPipeline",
  "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/DeleteTektonPipeline",
};

std::unique_ptr< TektonPipelineAPIService::Stub> TektonPipelineAPIService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TektonPipelineAPIService::Stub> stub(new TektonPipelineAPIService::Stub(channel));
  return stub;
}

TektonPipelineAPIService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateTektonPipeline_(TektonPipelineAPIService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteTektonPipeline_(TektonPipelineAPIService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TektonPipelineAPIService::Stub::CreateTektonPipeline(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest& request, ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateTektonPipeline_, context, request, response);
}

void TektonPipelineAPIService::Stub::experimental_async::CreateTektonPipeline(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest* request, ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateTektonPipeline_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse>* TektonPipelineAPIService::Stub::AsyncCreateTektonPipelineRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse>::Create(channel_.get(), cq, rpcmethod_CreateTektonPipeline_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse>* TektonPipelineAPIService::Stub::PrepareAsyncCreateTektonPipelineRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse>::Create(channel_.get(), cq, rpcmethod_CreateTektonPipeline_, context, request, false);
}

::grpc::Status TektonPipelineAPIService::Stub::DeleteTektonPipeline(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest& request, ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteTektonPipeline_, context, request, response);
}

void TektonPipelineAPIService::Stub::experimental_async::DeleteTektonPipeline(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest* request, ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteTektonPipeline_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse>* TektonPipelineAPIService::Stub::AsyncDeleteTektonPipelineRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse>::Create(channel_.get(), cq, rpcmethod_DeleteTektonPipeline_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse>* TektonPipelineAPIService::Stub::PrepareAsyncDeleteTektonPipelineRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse>::Create(channel_.get(), cq, rpcmethod_DeleteTektonPipeline_, context, request, false);
}

TektonPipelineAPIService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TektonPipelineAPIService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TektonPipelineAPIService::Service, ::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest, ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse>(
          std::mem_fn(&TektonPipelineAPIService::Service::CreateTektonPipeline), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TektonPipelineAPIService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TektonPipelineAPIService::Service, ::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest, ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse>(
          std::mem_fn(&TektonPipelineAPIService::Service::DeleteTektonPipeline), this)));
}

TektonPipelineAPIService::Service::~Service() {
}

::grpc::Status TektonPipelineAPIService::Service::CreateTektonPipeline(::grpc::ServerContext* context, const ::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest* request, ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TektonPipelineAPIService::Service::DeleteTektonPipeline(::grpc::ServerContext* context, const ::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest* request, ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pipelines
}  // namespace tekton
}  // namespace v1alpha1

