// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pipelines/tekton/v1alpha1/tekton_api.proto

#include "pipelines/tekton/v1alpha1/tekton_api.pb.h"
#include "pipelines/tekton/v1alpha1/tekton_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pipelines {
namespace tekton {
namespace v1alpha1 {

static const char* TektonPipelineAPIService_method_names[] = {
  "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/CreateTektonPipeline",
  "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/DeleteTektonPipeline",
  "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/ListTektonTaskPipeline",
  "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/GetPipelineRun",
  "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/ListPipelineRun",
  "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/GetStatusRuntime",
  "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/ChangeStatusRuntimeAndApplication",
  "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/RebuildTektonPipeline",
  "/pipelines.tekton.v1alpha1.TektonPipelineAPIService/MakeRollbackRuntime",
};

std::unique_ptr< TektonPipelineAPIService::Stub> TektonPipelineAPIService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TektonPipelineAPIService::Stub> stub(new TektonPipelineAPIService::Stub(channel));
  return stub;
}

TektonPipelineAPIService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateTektonPipeline_(TektonPipelineAPIService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteTektonPipeline_(TektonPipelineAPIService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListTektonTaskPipeline_(TektonPipelineAPIService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetPipelineRun_(TektonPipelineAPIService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListPipelineRun_(TektonPipelineAPIService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetStatusRuntime_(TektonPipelineAPIService_method_names[5], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ChangeStatusRuntimeAndApplication_(TektonPipelineAPIService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RebuildTektonPipeline_(TektonPipelineAPIService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_MakeRollbackRuntime_(TektonPipelineAPIService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status TektonPipelineAPIService::Stub::CreateTektonPipeline(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest& request, ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateTektonPipeline_, context, request, response);
}

void TektonPipelineAPIService::Stub::experimental_async::CreateTektonPipeline(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest* request, ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateTektonPipeline_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse>* TektonPipelineAPIService::Stub::AsyncCreateTektonPipelineRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse>::Create(channel_.get(), cq, rpcmethod_CreateTektonPipeline_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse>* TektonPipelineAPIService::Stub::PrepareAsyncCreateTektonPipelineRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse>::Create(channel_.get(), cq, rpcmethod_CreateTektonPipeline_, context, request, false);
}

::grpc::Status TektonPipelineAPIService::Stub::DeleteTektonPipeline(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest& request, ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteTektonPipeline_, context, request, response);
}

void TektonPipelineAPIService::Stub::experimental_async::DeleteTektonPipeline(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest* request, ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteTektonPipeline_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse>* TektonPipelineAPIService::Stub::AsyncDeleteTektonPipelineRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse>::Create(channel_.get(), cq, rpcmethod_DeleteTektonPipeline_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse>* TektonPipelineAPIService::Stub::PrepareAsyncDeleteTektonPipelineRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse>::Create(channel_.get(), cq, rpcmethod_DeleteTektonPipeline_, context, request, false);
}

::grpc::Status TektonPipelineAPIService::Stub::ListTektonTaskPipeline(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineRequest& request, ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListTektonTaskPipeline_, context, request, response);
}

void TektonPipelineAPIService::Stub::experimental_async::ListTektonTaskPipeline(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineRequest* request, ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListTektonTaskPipeline_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse>* TektonPipelineAPIService::Stub::AsyncListTektonTaskPipelineRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse>::Create(channel_.get(), cq, rpcmethod_ListTektonTaskPipeline_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse>* TektonPipelineAPIService::Stub::PrepareAsyncListTektonTaskPipelineRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse>::Create(channel_.get(), cq, rpcmethod_ListTektonTaskPipeline_, context, request, false);
}

::grpc::Status TektonPipelineAPIService::Stub::GetPipelineRun(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::GetPipelineRunRequest& request, ::pipelines::tekton::v1alpha1::GetPipelineRunResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetPipelineRun_, context, request, response);
}

void TektonPipelineAPIService::Stub::experimental_async::GetPipelineRun(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::GetPipelineRunRequest* request, ::pipelines::tekton::v1alpha1::GetPipelineRunResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetPipelineRun_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::tekton::v1alpha1::GetPipelineRunResponse>* TektonPipelineAPIService::Stub::AsyncGetPipelineRunRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::GetPipelineRunRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::tekton::v1alpha1::GetPipelineRunResponse>::Create(channel_.get(), cq, rpcmethod_GetPipelineRun_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::tekton::v1alpha1::GetPipelineRunResponse>* TektonPipelineAPIService::Stub::PrepareAsyncGetPipelineRunRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::GetPipelineRunRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::tekton::v1alpha1::GetPipelineRunResponse>::Create(channel_.get(), cq, rpcmethod_GetPipelineRun_, context, request, false);
}

::grpc::Status TektonPipelineAPIService::Stub::ListPipelineRun(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::ListPipelineRunRequest& request, ::pipelines::tekton::v1alpha1::ListPipelineRunResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListPipelineRun_, context, request, response);
}

void TektonPipelineAPIService::Stub::experimental_async::ListPipelineRun(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::ListPipelineRunRequest* request, ::pipelines::tekton::v1alpha1::ListPipelineRunResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListPipelineRun_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::tekton::v1alpha1::ListPipelineRunResponse>* TektonPipelineAPIService::Stub::AsyncListPipelineRunRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::ListPipelineRunRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::tekton::v1alpha1::ListPipelineRunResponse>::Create(channel_.get(), cq, rpcmethod_ListPipelineRun_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::tekton::v1alpha1::ListPipelineRunResponse>* TektonPipelineAPIService::Stub::PrepareAsyncListPipelineRunRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::ListPipelineRunRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::tekton::v1alpha1::ListPipelineRunResponse>::Create(channel_.get(), cq, rpcmethod_ListPipelineRun_, context, request, false);
}

::grpc::ClientReader< ::pipelines::tekton::v1alpha1::GetStatusRuntimeResponse>* TektonPipelineAPIService::Stub::GetStatusRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::GetStatusRuntimeRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::pipelines::tekton::v1alpha1::GetStatusRuntimeResponse>::Create(channel_.get(), rpcmethod_GetStatusRuntime_, context, request);
}

::grpc::ClientAsyncReader< ::pipelines::tekton::v1alpha1::GetStatusRuntimeResponse>* TektonPipelineAPIService::Stub::AsyncGetStatusRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::GetStatusRuntimeRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::pipelines::tekton::v1alpha1::GetStatusRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_GetStatusRuntime_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::pipelines::tekton::v1alpha1::GetStatusRuntimeResponse>* TektonPipelineAPIService::Stub::PrepareAsyncGetStatusRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::GetStatusRuntimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::pipelines::tekton::v1alpha1::GetStatusRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_GetStatusRuntime_, context, request, false, nullptr);
}

::grpc::Status TektonPipelineAPIService::Stub::ChangeStatusRuntimeAndApplication(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationRequest& request, ::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ChangeStatusRuntimeAndApplication_, context, request, response);
}

void TektonPipelineAPIService::Stub::experimental_async::ChangeStatusRuntimeAndApplication(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationRequest* request, ::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ChangeStatusRuntimeAndApplication_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationResponse>* TektonPipelineAPIService::Stub::AsyncChangeStatusRuntimeAndApplicationRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationResponse>::Create(channel_.get(), cq, rpcmethod_ChangeStatusRuntimeAndApplication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationResponse>* TektonPipelineAPIService::Stub::PrepareAsyncChangeStatusRuntimeAndApplicationRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationResponse>::Create(channel_.get(), cq, rpcmethod_ChangeStatusRuntimeAndApplication_, context, request, false);
}

::grpc::Status TektonPipelineAPIService::Stub::RebuildTektonPipeline(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::RebuildTektonPipelineRequest& request, ::pipelines::tekton::v1alpha1::RebuildTektonPipelineResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RebuildTektonPipeline_, context, request, response);
}

void TektonPipelineAPIService::Stub::experimental_async::RebuildTektonPipeline(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::RebuildTektonPipelineRequest* request, ::pipelines::tekton::v1alpha1::RebuildTektonPipelineResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RebuildTektonPipeline_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::tekton::v1alpha1::RebuildTektonPipelineResponse>* TektonPipelineAPIService::Stub::AsyncRebuildTektonPipelineRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::RebuildTektonPipelineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::tekton::v1alpha1::RebuildTektonPipelineResponse>::Create(channel_.get(), cq, rpcmethod_RebuildTektonPipeline_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::tekton::v1alpha1::RebuildTektonPipelineResponse>* TektonPipelineAPIService::Stub::PrepareAsyncRebuildTektonPipelineRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::RebuildTektonPipelineRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::tekton::v1alpha1::RebuildTektonPipelineResponse>::Create(channel_.get(), cq, rpcmethod_RebuildTektonPipeline_, context, request, false);
}

::grpc::Status TektonPipelineAPIService::Stub::MakeRollbackRuntime(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::MakeRollbackRuntimeRequest& request, ::pipelines::tekton::v1alpha1::MakeRollbackRuntimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_MakeRollbackRuntime_, context, request, response);
}

void TektonPipelineAPIService::Stub::experimental_async::MakeRollbackRuntime(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::MakeRollbackRuntimeRequest* request, ::pipelines::tekton::v1alpha1::MakeRollbackRuntimeResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_MakeRollbackRuntime_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::tekton::v1alpha1::MakeRollbackRuntimeResponse>* TektonPipelineAPIService::Stub::AsyncMakeRollbackRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::MakeRollbackRuntimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::tekton::v1alpha1::MakeRollbackRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_MakeRollbackRuntime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::tekton::v1alpha1::MakeRollbackRuntimeResponse>* TektonPipelineAPIService::Stub::PrepareAsyncMakeRollbackRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::tekton::v1alpha1::MakeRollbackRuntimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::tekton::v1alpha1::MakeRollbackRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_MakeRollbackRuntime_, context, request, false);
}

TektonPipelineAPIService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TektonPipelineAPIService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TektonPipelineAPIService::Service, ::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest, ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse>(
          std::mem_fn(&TektonPipelineAPIService::Service::CreateTektonPipeline), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TektonPipelineAPIService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TektonPipelineAPIService::Service, ::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest, ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse>(
          std::mem_fn(&TektonPipelineAPIService::Service::DeleteTektonPipeline), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TektonPipelineAPIService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TektonPipelineAPIService::Service, ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineRequest, ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse>(
          std::mem_fn(&TektonPipelineAPIService::Service::ListTektonTaskPipeline), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TektonPipelineAPIService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TektonPipelineAPIService::Service, ::pipelines::tekton::v1alpha1::GetPipelineRunRequest, ::pipelines::tekton::v1alpha1::GetPipelineRunResponse>(
          std::mem_fn(&TektonPipelineAPIService::Service::GetPipelineRun), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TektonPipelineAPIService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TektonPipelineAPIService::Service, ::pipelines::tekton::v1alpha1::ListPipelineRunRequest, ::pipelines::tekton::v1alpha1::ListPipelineRunResponse>(
          std::mem_fn(&TektonPipelineAPIService::Service::ListPipelineRun), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TektonPipelineAPIService_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TektonPipelineAPIService::Service, ::pipelines::tekton::v1alpha1::GetStatusRuntimeRequest, ::pipelines::tekton::v1alpha1::GetStatusRuntimeResponse>(
          std::mem_fn(&TektonPipelineAPIService::Service::GetStatusRuntime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TektonPipelineAPIService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TektonPipelineAPIService::Service, ::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationRequest, ::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationResponse>(
          std::mem_fn(&TektonPipelineAPIService::Service::ChangeStatusRuntimeAndApplication), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TektonPipelineAPIService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TektonPipelineAPIService::Service, ::pipelines::tekton::v1alpha1::RebuildTektonPipelineRequest, ::pipelines::tekton::v1alpha1::RebuildTektonPipelineResponse>(
          std::mem_fn(&TektonPipelineAPIService::Service::RebuildTektonPipeline), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TektonPipelineAPIService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TektonPipelineAPIService::Service, ::pipelines::tekton::v1alpha1::MakeRollbackRuntimeRequest, ::pipelines::tekton::v1alpha1::MakeRollbackRuntimeResponse>(
          std::mem_fn(&TektonPipelineAPIService::Service::MakeRollbackRuntime), this)));
}

TektonPipelineAPIService::Service::~Service() {
}

::grpc::Status TektonPipelineAPIService::Service::CreateTektonPipeline(::grpc::ServerContext* context, const ::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest* request, ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TektonPipelineAPIService::Service::DeleteTektonPipeline(::grpc::ServerContext* context, const ::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest* request, ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TektonPipelineAPIService::Service::ListTektonTaskPipeline(::grpc::ServerContext* context, const ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineRequest* request, ::pipelines::tekton::v1alpha1::ListTektonTaskPipelineResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TektonPipelineAPIService::Service::GetPipelineRun(::grpc::ServerContext* context, const ::pipelines::tekton::v1alpha1::GetPipelineRunRequest* request, ::pipelines::tekton::v1alpha1::GetPipelineRunResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TektonPipelineAPIService::Service::ListPipelineRun(::grpc::ServerContext* context, const ::pipelines::tekton::v1alpha1::ListPipelineRunRequest* request, ::pipelines::tekton::v1alpha1::ListPipelineRunResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TektonPipelineAPIService::Service::GetStatusRuntime(::grpc::ServerContext* context, const ::pipelines::tekton::v1alpha1::GetStatusRuntimeRequest* request, ::grpc::ServerWriter< ::pipelines::tekton::v1alpha1::GetStatusRuntimeResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TektonPipelineAPIService::Service::ChangeStatusRuntimeAndApplication(::grpc::ServerContext* context, const ::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationRequest* request, ::pipelines::tekton::v1alpha1::ChangeStatusRuntimeAndApplicationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TektonPipelineAPIService::Service::RebuildTektonPipeline(::grpc::ServerContext* context, const ::pipelines::tekton::v1alpha1::RebuildTektonPipelineRequest* request, ::pipelines::tekton::v1alpha1::RebuildTektonPipelineResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TektonPipelineAPIService::Service::MakeRollbackRuntime(::grpc::ServerContext* context, const ::pipelines::tekton::v1alpha1::MakeRollbackRuntimeRequest* request, ::pipelines::tekton::v1alpha1::MakeRollbackRuntimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pipelines
}  // namespace tekton
}  // namespace v1alpha1

