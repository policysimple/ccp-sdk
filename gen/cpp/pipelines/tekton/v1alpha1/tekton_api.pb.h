// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipelines/tekton/v1alpha1/tekton_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pipelines/tekton/v1alpha1/tekton.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto;
namespace pipelines {
namespace tekton {
namespace v1alpha1 {
class CreateTektonPipelineRequest;
struct CreateTektonPipelineRequestDefaultTypeInternal;
extern CreateTektonPipelineRequestDefaultTypeInternal _CreateTektonPipelineRequest_default_instance_;
class CreateTektonPipelineResponse;
struct CreateTektonPipelineResponseDefaultTypeInternal;
extern CreateTektonPipelineResponseDefaultTypeInternal _CreateTektonPipelineResponse_default_instance_;
class DeleteTektonPipelineRequest;
struct DeleteTektonPipelineRequestDefaultTypeInternal;
extern DeleteTektonPipelineRequestDefaultTypeInternal _DeleteTektonPipelineRequest_default_instance_;
class DeleteTektonPipelineResponse;
struct DeleteTektonPipelineResponseDefaultTypeInternal;
extern DeleteTektonPipelineResponseDefaultTypeInternal _DeleteTektonPipelineResponse_default_instance_;
class GetOneTektonPipelineRequest;
struct GetOneTektonPipelineRequestDefaultTypeInternal;
extern GetOneTektonPipelineRequestDefaultTypeInternal _GetOneTektonPipelineRequest_default_instance_;
class GetOneTektonPipelineResponse;
struct GetOneTektonPipelineResponseDefaultTypeInternal;
extern GetOneTektonPipelineResponseDefaultTypeInternal _GetOneTektonPipelineResponse_default_instance_;
class ListTektonPipelineRequest;
struct ListTektonPipelineRequestDefaultTypeInternal;
extern ListTektonPipelineRequestDefaultTypeInternal _ListTektonPipelineRequest_default_instance_;
class ListTektonPipelineResponse;
struct ListTektonPipelineResponseDefaultTypeInternal;
extern ListTektonPipelineResponseDefaultTypeInternal _ListTektonPipelineResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace tekton
}  // namespace pipelines
PROTOBUF_NAMESPACE_OPEN
template<> ::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::CreateTektonPipelineRequest>(Arena*);
template<> ::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::CreateTektonPipelineResponse>(Arena*);
template<> ::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::DeleteTektonPipelineRequest>(Arena*);
template<> ::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::DeleteTektonPipelineResponse>(Arena*);
template<> ::pipelines::tekton::v1alpha1::GetOneTektonPipelineRequest* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::GetOneTektonPipelineRequest>(Arena*);
template<> ::pipelines::tekton::v1alpha1::GetOneTektonPipelineResponse* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::GetOneTektonPipelineResponse>(Arena*);
template<> ::pipelines::tekton::v1alpha1::ListTektonPipelineRequest* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::ListTektonPipelineRequest>(Arena*);
template<> ::pipelines::tekton::v1alpha1::ListTektonPipelineResponse* Arena::CreateMaybeMessage<::pipelines::tekton::v1alpha1::ListTektonPipelineResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pipelines {
namespace tekton {
namespace v1alpha1 {

// ===================================================================

class CreateTektonPipelineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest) */ {
 public:
  inline CreateTektonPipelineRequest() : CreateTektonPipelineRequest(nullptr) {}
  ~CreateTektonPipelineRequest() override;
  explicit constexpr CreateTektonPipelineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateTektonPipelineRequest(const CreateTektonPipelineRequest& from);
  CreateTektonPipelineRequest(CreateTektonPipelineRequest&& from) noexcept
    : CreateTektonPipelineRequest() {
    *this = ::std::move(from);
  }

  inline CreateTektonPipelineRequest& operator=(const CreateTektonPipelineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTektonPipelineRequest& operator=(CreateTektonPipelineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateTektonPipelineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateTektonPipelineRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTektonPipelineRequest*>(
               &_CreateTektonPipelineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateTektonPipelineRequest& a, CreateTektonPipelineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTektonPipelineRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTektonPipelineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTektonPipelineRequest* New() const final {
    return new CreateTektonPipelineRequest();
  }

  CreateTektonPipelineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTektonPipelineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateTektonPipelineRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateTektonPipelineRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTektonPipelineRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.CreateTektonPipelineRequest";
  }
  protected:
  explicit CreateTektonPipelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kTektonPipelineFieldNumber = 1,
  };
  // string user_id = 2 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
  bool has_tekton_pipeline() const;
  private:
  bool _internal_has_tekton_pipeline() const;
  public:
  void clear_tekton_pipeline();
  const ::pipelines::tekton::v1alpha1::Pipeline& tekton_pipeline() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::tekton::v1alpha1::Pipeline* release_tekton_pipeline();
  ::pipelines::tekton::v1alpha1::Pipeline* mutable_tekton_pipeline();
  void set_allocated_tekton_pipeline(::pipelines::tekton::v1alpha1::Pipeline* tekton_pipeline);
  private:
  const ::pipelines::tekton::v1alpha1::Pipeline& _internal_tekton_pipeline() const;
  ::pipelines::tekton::v1alpha1::Pipeline* _internal_mutable_tekton_pipeline();
  public:
  void unsafe_arena_set_allocated_tekton_pipeline(
      ::pipelines::tekton::v1alpha1::Pipeline* tekton_pipeline);
  ::pipelines::tekton::v1alpha1::Pipeline* unsafe_arena_release_tekton_pipeline();

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::pipelines::tekton::v1alpha1::Pipeline* tekton_pipeline_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateTektonPipelineResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse) */ {
 public:
  inline CreateTektonPipelineResponse() : CreateTektonPipelineResponse(nullptr) {}
  ~CreateTektonPipelineResponse() override;
  explicit constexpr CreateTektonPipelineResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateTektonPipelineResponse(const CreateTektonPipelineResponse& from);
  CreateTektonPipelineResponse(CreateTektonPipelineResponse&& from) noexcept
    : CreateTektonPipelineResponse() {
    *this = ::std::move(from);
  }

  inline CreateTektonPipelineResponse& operator=(const CreateTektonPipelineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateTektonPipelineResponse& operator=(CreateTektonPipelineResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateTektonPipelineResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateTektonPipelineResponse* internal_default_instance() {
    return reinterpret_cast<const CreateTektonPipelineResponse*>(
               &_CreateTektonPipelineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateTektonPipelineResponse& a, CreateTektonPipelineResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateTektonPipelineResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateTektonPipelineResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateTektonPipelineResponse* New() const final {
    return new CreateTektonPipelineResponse();
  }

  CreateTektonPipelineResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateTektonPipelineResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateTektonPipelineResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateTektonPipelineResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTektonPipelineResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.CreateTektonPipelineResponse";
  }
  protected:
  explicit CreateTektonPipelineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kTektonPipelineFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
  bool has_tekton_pipeline() const;
  private:
  bool _internal_has_tekton_pipeline() const;
  public:
  void clear_tekton_pipeline();
  const ::pipelines::tekton::v1alpha1::Pipeline& tekton_pipeline() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::tekton::v1alpha1::Pipeline* release_tekton_pipeline();
  ::pipelines::tekton::v1alpha1::Pipeline* mutable_tekton_pipeline();
  void set_allocated_tekton_pipeline(::pipelines::tekton::v1alpha1::Pipeline* tekton_pipeline);
  private:
  const ::pipelines::tekton::v1alpha1::Pipeline& _internal_tekton_pipeline() const;
  ::pipelines::tekton::v1alpha1::Pipeline* _internal_mutable_tekton_pipeline();
  public:
  void unsafe_arena_set_allocated_tekton_pipeline(
      ::pipelines::tekton::v1alpha1::Pipeline* tekton_pipeline);
  ::pipelines::tekton::v1alpha1::Pipeline* unsafe_arena_release_tekton_pipeline();

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::pipelines::tekton::v1alpha1::Pipeline* tekton_pipeline_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetOneTektonPipelineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.GetOneTektonPipelineRequest) */ {
 public:
  inline GetOneTektonPipelineRequest() : GetOneTektonPipelineRequest(nullptr) {}
  ~GetOneTektonPipelineRequest() override;
  explicit constexpr GetOneTektonPipelineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOneTektonPipelineRequest(const GetOneTektonPipelineRequest& from);
  GetOneTektonPipelineRequest(GetOneTektonPipelineRequest&& from) noexcept
    : GetOneTektonPipelineRequest() {
    *this = ::std::move(from);
  }

  inline GetOneTektonPipelineRequest& operator=(const GetOneTektonPipelineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneTektonPipelineRequest& operator=(GetOneTektonPipelineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOneTektonPipelineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOneTektonPipelineRequest* internal_default_instance() {
    return reinterpret_cast<const GetOneTektonPipelineRequest*>(
               &_GetOneTektonPipelineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetOneTektonPipelineRequest& a, GetOneTektonPipelineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneTektonPipelineRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOneTektonPipelineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneTektonPipelineRequest* New() const final {
    return new GetOneTektonPipelineRequest();
  }

  GetOneTektonPipelineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneTektonPipelineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOneTektonPipelineRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOneTektonPipelineRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneTektonPipelineRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.GetOneTektonPipelineRequest";
  }
  protected:
  explicit GetOneTektonPipelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTektonPipelineIdFieldNumber = 1,
  };
  // string tekton_pipeline_id = 1 [json_name = "tektonPipelineId"];
  void clear_tekton_pipeline_id();
  const std::string& tekton_pipeline_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tekton_pipeline_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tekton_pipeline_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_tekton_pipeline_id();
  void set_allocated_tekton_pipeline_id(std::string* tekton_pipeline_id);
  private:
  const std::string& _internal_tekton_pipeline_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tekton_pipeline_id(const std::string& value);
  std::string* _internal_mutable_tekton_pipeline_id();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.GetOneTektonPipelineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tekton_pipeline_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetOneTektonPipelineResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.GetOneTektonPipelineResponse) */ {
 public:
  inline GetOneTektonPipelineResponse() : GetOneTektonPipelineResponse(nullptr) {}
  ~GetOneTektonPipelineResponse() override;
  explicit constexpr GetOneTektonPipelineResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetOneTektonPipelineResponse(const GetOneTektonPipelineResponse& from);
  GetOneTektonPipelineResponse(GetOneTektonPipelineResponse&& from) noexcept
    : GetOneTektonPipelineResponse() {
    *this = ::std::move(from);
  }

  inline GetOneTektonPipelineResponse& operator=(const GetOneTektonPipelineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOneTektonPipelineResponse& operator=(GetOneTektonPipelineResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOneTektonPipelineResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOneTektonPipelineResponse* internal_default_instance() {
    return reinterpret_cast<const GetOneTektonPipelineResponse*>(
               &_GetOneTektonPipelineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetOneTektonPipelineResponse& a, GetOneTektonPipelineResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetOneTektonPipelineResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOneTektonPipelineResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetOneTektonPipelineResponse* New() const final {
    return new GetOneTektonPipelineResponse();
  }

  GetOneTektonPipelineResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetOneTektonPipelineResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetOneTektonPipelineResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetOneTektonPipelineResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOneTektonPipelineResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.GetOneTektonPipelineResponse";
  }
  protected:
  explicit GetOneTektonPipelineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kTektonPipelineFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
  bool has_tekton_pipeline() const;
  private:
  bool _internal_has_tekton_pipeline() const;
  public:
  void clear_tekton_pipeline();
  const ::pipelines::tekton::v1alpha1::Pipeline& tekton_pipeline() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::tekton::v1alpha1::Pipeline* release_tekton_pipeline();
  ::pipelines::tekton::v1alpha1::Pipeline* mutable_tekton_pipeline();
  void set_allocated_tekton_pipeline(::pipelines::tekton::v1alpha1::Pipeline* tekton_pipeline);
  private:
  const ::pipelines::tekton::v1alpha1::Pipeline& _internal_tekton_pipeline() const;
  ::pipelines::tekton::v1alpha1::Pipeline* _internal_mutable_tekton_pipeline();
  public:
  void unsafe_arena_set_allocated_tekton_pipeline(
      ::pipelines::tekton::v1alpha1::Pipeline* tekton_pipeline);
  ::pipelines::tekton::v1alpha1::Pipeline* unsafe_arena_release_tekton_pipeline();

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.GetOneTektonPipelineResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::pipelines::tekton::v1alpha1::Pipeline* tekton_pipeline_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ListTektonPipelineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.ListTektonPipelineRequest) */ {
 public:
  inline ListTektonPipelineRequest() : ListTektonPipelineRequest(nullptr) {}
  ~ListTektonPipelineRequest() override;
  explicit constexpr ListTektonPipelineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTektonPipelineRequest(const ListTektonPipelineRequest& from);
  ListTektonPipelineRequest(ListTektonPipelineRequest&& from) noexcept
    : ListTektonPipelineRequest() {
    *this = ::std::move(from);
  }

  inline ListTektonPipelineRequest& operator=(const ListTektonPipelineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTektonPipelineRequest& operator=(ListTektonPipelineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTektonPipelineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTektonPipelineRequest* internal_default_instance() {
    return reinterpret_cast<const ListTektonPipelineRequest*>(
               &_ListTektonPipelineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ListTektonPipelineRequest& a, ListTektonPipelineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTektonPipelineRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTektonPipelineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTektonPipelineRequest* New() const final {
    return new ListTektonPipelineRequest();
  }

  ListTektonPipelineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTektonPipelineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTektonPipelineRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListTektonPipelineRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTektonPipelineRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.ListTektonPipelineRequest";
  }
  protected:
  explicit ListTektonPipelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectIdFieldNumber = 1,
  };
  // uint32 project_id = 1 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.ListTektonPipelineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ListTektonPipelineResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.ListTektonPipelineResponse) */ {
 public:
  inline ListTektonPipelineResponse() : ListTektonPipelineResponse(nullptr) {}
  ~ListTektonPipelineResponse() override;
  explicit constexpr ListTektonPipelineResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListTektonPipelineResponse(const ListTektonPipelineResponse& from);
  ListTektonPipelineResponse(ListTektonPipelineResponse&& from) noexcept
    : ListTektonPipelineResponse() {
    *this = ::std::move(from);
  }

  inline ListTektonPipelineResponse& operator=(const ListTektonPipelineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListTektonPipelineResponse& operator=(ListTektonPipelineResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListTektonPipelineResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListTektonPipelineResponse* internal_default_instance() {
    return reinterpret_cast<const ListTektonPipelineResponse*>(
               &_ListTektonPipelineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListTektonPipelineResponse& a, ListTektonPipelineResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListTektonPipelineResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListTektonPipelineResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListTektonPipelineResponse* New() const final {
    return new ListTektonPipelineResponse();
  }

  ListTektonPipelineResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListTektonPipelineResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListTektonPipelineResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListTektonPipelineResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListTektonPipelineResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.ListTektonPipelineResponse";
  }
  protected:
  explicit ListTektonPipelineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTektonPipelineFieldNumber = 1,
  };
  // repeated .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
  int tekton_pipeline_size() const;
  private:
  int _internal_tekton_pipeline_size() const;
  public:
  void clear_tekton_pipeline();
  ::pipelines::tekton::v1alpha1::Pipeline* mutable_tekton_pipeline(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Pipeline >*
      mutable_tekton_pipeline();
  private:
  const ::pipelines::tekton::v1alpha1::Pipeline& _internal_tekton_pipeline(int index) const;
  ::pipelines::tekton::v1alpha1::Pipeline* _internal_add_tekton_pipeline();
  public:
  const ::pipelines::tekton::v1alpha1::Pipeline& tekton_pipeline(int index) const;
  ::pipelines::tekton::v1alpha1::Pipeline* add_tekton_pipeline();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Pipeline >&
      tekton_pipeline() const;

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.ListTektonPipelineResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Pipeline > tekton_pipeline_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteTektonPipelineRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest) */ {
 public:
  inline DeleteTektonPipelineRequest() : DeleteTektonPipelineRequest(nullptr) {}
  ~DeleteTektonPipelineRequest() override;
  explicit constexpr DeleteTektonPipelineRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteTektonPipelineRequest(const DeleteTektonPipelineRequest& from);
  DeleteTektonPipelineRequest(DeleteTektonPipelineRequest&& from) noexcept
    : DeleteTektonPipelineRequest() {
    *this = ::std::move(from);
  }

  inline DeleteTektonPipelineRequest& operator=(const DeleteTektonPipelineRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTektonPipelineRequest& operator=(DeleteTektonPipelineRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteTektonPipelineRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteTektonPipelineRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteTektonPipelineRequest*>(
               &_DeleteTektonPipelineRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteTektonPipelineRequest& a, DeleteTektonPipelineRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTektonPipelineRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTektonPipelineRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteTektonPipelineRequest* New() const final {
    return new DeleteTektonPipelineRequest();
  }

  DeleteTektonPipelineRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTektonPipelineRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteTektonPipelineRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteTektonPipelineRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTektonPipelineRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest";
  }
  protected:
  explicit DeleteTektonPipelineRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTektonPipelineIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string tekton_pipeline_id = 1 [json_name = "tektonPipelineId"];
  void clear_tekton_pipeline_id();
  const std::string& tekton_pipeline_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_tekton_pipeline_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_tekton_pipeline_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_tekton_pipeline_id();
  void set_allocated_tekton_pipeline_id(std::string* tekton_pipeline_id);
  private:
  const std::string& _internal_tekton_pipeline_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tekton_pipeline_id(const std::string& value);
  std::string* _internal_mutable_tekton_pipeline_id();
  public:

  // string user_id = 2 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tekton_pipeline_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteTektonPipelineResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse) */ {
 public:
  inline DeleteTektonPipelineResponse() : DeleteTektonPipelineResponse(nullptr) {}
  ~DeleteTektonPipelineResponse() override;
  explicit constexpr DeleteTektonPipelineResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteTektonPipelineResponse(const DeleteTektonPipelineResponse& from);
  DeleteTektonPipelineResponse(DeleteTektonPipelineResponse&& from) noexcept
    : DeleteTektonPipelineResponse() {
    *this = ::std::move(from);
  }

  inline DeleteTektonPipelineResponse& operator=(const DeleteTektonPipelineResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteTektonPipelineResponse& operator=(DeleteTektonPipelineResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteTektonPipelineResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteTektonPipelineResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteTektonPipelineResponse*>(
               &_DeleteTektonPipelineResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteTektonPipelineResponse& a, DeleteTektonPipelineResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteTektonPipelineResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteTektonPipelineResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteTektonPipelineResponse* New() const final {
    return new DeleteTektonPipelineResponse();
  }

  DeleteTektonPipelineResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteTektonPipelineResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteTektonPipelineResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteTektonPipelineResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteTektonPipelineResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse";
  }
  protected:
  explicit DeleteTektonPipelineResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateTektonPipelineRequest

// .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
inline bool CreateTektonPipelineRequest::_internal_has_tekton_pipeline() const {
  return this != internal_default_instance() && tekton_pipeline_ != nullptr;
}
inline bool CreateTektonPipelineRequest::has_tekton_pipeline() const {
  return _internal_has_tekton_pipeline();
}
inline const ::pipelines::tekton::v1alpha1::Pipeline& CreateTektonPipelineRequest::_internal_tekton_pipeline() const {
  const ::pipelines::tekton::v1alpha1::Pipeline* p = tekton_pipeline_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::tekton::v1alpha1::Pipeline&>(
      ::pipelines::tekton::v1alpha1::_Pipeline_default_instance_);
}
inline const ::pipelines::tekton::v1alpha1::Pipeline& CreateTektonPipelineRequest::tekton_pipeline() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest.tekton_pipeline)
  return _internal_tekton_pipeline();
}
inline void CreateTektonPipelineRequest::unsafe_arena_set_allocated_tekton_pipeline(
    ::pipelines::tekton::v1alpha1::Pipeline* tekton_pipeline) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tekton_pipeline_);
  }
  tekton_pipeline_ = tekton_pipeline;
  if (tekton_pipeline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest.tekton_pipeline)
}
inline ::pipelines::tekton::v1alpha1::Pipeline* CreateTektonPipelineRequest::release_tekton_pipeline() {
  
  ::pipelines::tekton::v1alpha1::Pipeline* temp = tekton_pipeline_;
  tekton_pipeline_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::tekton::v1alpha1::Pipeline* CreateTektonPipelineRequest::unsafe_arena_release_tekton_pipeline() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest.tekton_pipeline)
  
  ::pipelines::tekton::v1alpha1::Pipeline* temp = tekton_pipeline_;
  tekton_pipeline_ = nullptr;
  return temp;
}
inline ::pipelines::tekton::v1alpha1::Pipeline* CreateTektonPipelineRequest::_internal_mutable_tekton_pipeline() {
  
  if (tekton_pipeline_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::tekton::v1alpha1::Pipeline>(GetArenaForAllocation());
    tekton_pipeline_ = p;
  }
  return tekton_pipeline_;
}
inline ::pipelines::tekton::v1alpha1::Pipeline* CreateTektonPipelineRequest::mutable_tekton_pipeline() {
  ::pipelines::tekton::v1alpha1::Pipeline* _msg = _internal_mutable_tekton_pipeline();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest.tekton_pipeline)
  return _msg;
}
inline void CreateTektonPipelineRequest::set_allocated_tekton_pipeline(::pipelines::tekton::v1alpha1::Pipeline* tekton_pipeline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tekton_pipeline_);
  }
  if (tekton_pipeline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tekton_pipeline));
    if (message_arena != submessage_arena) {
      tekton_pipeline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tekton_pipeline, submessage_arena);
    }
    
  } else {
    
  }
  tekton_pipeline_ = tekton_pipeline;
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest.tekton_pipeline)
}

// string user_id = 2 [json_name = "userId"];
inline void CreateTektonPipelineRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& CreateTektonPipelineRequest::user_id() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateTektonPipelineRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest.user_id)
}
inline std::string* CreateTektonPipelineRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest.user_id)
  return _s;
}
inline const std::string& CreateTektonPipelineRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void CreateTektonPipelineRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateTektonPipelineRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateTektonPipelineRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateTektonPipelineRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.CreateTektonPipelineRequest.user_id)
}

// -------------------------------------------------------------------

// CreateTektonPipelineResponse

// .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
inline bool CreateTektonPipelineResponse::_internal_has_tekton_pipeline() const {
  return this != internal_default_instance() && tekton_pipeline_ != nullptr;
}
inline bool CreateTektonPipelineResponse::has_tekton_pipeline() const {
  return _internal_has_tekton_pipeline();
}
inline const ::pipelines::tekton::v1alpha1::Pipeline& CreateTektonPipelineResponse::_internal_tekton_pipeline() const {
  const ::pipelines::tekton::v1alpha1::Pipeline* p = tekton_pipeline_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::tekton::v1alpha1::Pipeline&>(
      ::pipelines::tekton::v1alpha1::_Pipeline_default_instance_);
}
inline const ::pipelines::tekton::v1alpha1::Pipeline& CreateTektonPipelineResponse::tekton_pipeline() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse.tekton_pipeline)
  return _internal_tekton_pipeline();
}
inline void CreateTektonPipelineResponse::unsafe_arena_set_allocated_tekton_pipeline(
    ::pipelines::tekton::v1alpha1::Pipeline* tekton_pipeline) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tekton_pipeline_);
  }
  tekton_pipeline_ = tekton_pipeline;
  if (tekton_pipeline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse.tekton_pipeline)
}
inline ::pipelines::tekton::v1alpha1::Pipeline* CreateTektonPipelineResponse::release_tekton_pipeline() {
  
  ::pipelines::tekton::v1alpha1::Pipeline* temp = tekton_pipeline_;
  tekton_pipeline_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::tekton::v1alpha1::Pipeline* CreateTektonPipelineResponse::unsafe_arena_release_tekton_pipeline() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse.tekton_pipeline)
  
  ::pipelines::tekton::v1alpha1::Pipeline* temp = tekton_pipeline_;
  tekton_pipeline_ = nullptr;
  return temp;
}
inline ::pipelines::tekton::v1alpha1::Pipeline* CreateTektonPipelineResponse::_internal_mutable_tekton_pipeline() {
  
  if (tekton_pipeline_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::tekton::v1alpha1::Pipeline>(GetArenaForAllocation());
    tekton_pipeline_ = p;
  }
  return tekton_pipeline_;
}
inline ::pipelines::tekton::v1alpha1::Pipeline* CreateTektonPipelineResponse::mutable_tekton_pipeline() {
  ::pipelines::tekton::v1alpha1::Pipeline* _msg = _internal_mutable_tekton_pipeline();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse.tekton_pipeline)
  return _msg;
}
inline void CreateTektonPipelineResponse::set_allocated_tekton_pipeline(::pipelines::tekton::v1alpha1::Pipeline* tekton_pipeline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tekton_pipeline_);
  }
  if (tekton_pipeline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tekton_pipeline));
    if (message_arena != submessage_arena) {
      tekton_pipeline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tekton_pipeline, submessage_arena);
    }
    
  } else {
    
  }
  tekton_pipeline_ = tekton_pipeline;
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse.tekton_pipeline)
}

// string status = 2 [json_name = "status"];
inline void CreateTektonPipelineResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& CreateTektonPipelineResponse::status() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateTektonPipelineResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse.status)
}
inline std::string* CreateTektonPipelineResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse.status)
  return _s;
}
inline const std::string& CreateTektonPipelineResponse::_internal_status() const {
  return status_.Get();
}
inline void CreateTektonPipelineResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateTektonPipelineResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateTektonPipelineResponse::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateTektonPipelineResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.CreateTektonPipelineResponse.status)
}

// -------------------------------------------------------------------

// GetOneTektonPipelineRequest

// string tekton_pipeline_id = 1 [json_name = "tektonPipelineId"];
inline void GetOneTektonPipelineRequest::clear_tekton_pipeline_id() {
  tekton_pipeline_id_.ClearToEmpty();
}
inline const std::string& GetOneTektonPipelineRequest::tekton_pipeline_id() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.GetOneTektonPipelineRequest.tekton_pipeline_id)
  return _internal_tekton_pipeline_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneTektonPipelineRequest::set_tekton_pipeline_id(ArgT0&& arg0, ArgT... args) {
 
 tekton_pipeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.GetOneTektonPipelineRequest.tekton_pipeline_id)
}
inline std::string* GetOneTektonPipelineRequest::mutable_tekton_pipeline_id() {
  std::string* _s = _internal_mutable_tekton_pipeline_id();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.GetOneTektonPipelineRequest.tekton_pipeline_id)
  return _s;
}
inline const std::string& GetOneTektonPipelineRequest::_internal_tekton_pipeline_id() const {
  return tekton_pipeline_id_.Get();
}
inline void GetOneTektonPipelineRequest::_internal_set_tekton_pipeline_id(const std::string& value) {
  
  tekton_pipeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneTektonPipelineRequest::_internal_mutable_tekton_pipeline_id() {
  
  return tekton_pipeline_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneTektonPipelineRequest::release_tekton_pipeline_id() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.GetOneTektonPipelineRequest.tekton_pipeline_id)
  return tekton_pipeline_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneTektonPipelineRequest::set_allocated_tekton_pipeline_id(std::string* tekton_pipeline_id) {
  if (tekton_pipeline_id != nullptr) {
    
  } else {
    
  }
  tekton_pipeline_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tekton_pipeline_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.GetOneTektonPipelineRequest.tekton_pipeline_id)
}

// -------------------------------------------------------------------

// GetOneTektonPipelineResponse

// .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
inline bool GetOneTektonPipelineResponse::_internal_has_tekton_pipeline() const {
  return this != internal_default_instance() && tekton_pipeline_ != nullptr;
}
inline bool GetOneTektonPipelineResponse::has_tekton_pipeline() const {
  return _internal_has_tekton_pipeline();
}
inline const ::pipelines::tekton::v1alpha1::Pipeline& GetOneTektonPipelineResponse::_internal_tekton_pipeline() const {
  const ::pipelines::tekton::v1alpha1::Pipeline* p = tekton_pipeline_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::tekton::v1alpha1::Pipeline&>(
      ::pipelines::tekton::v1alpha1::_Pipeline_default_instance_);
}
inline const ::pipelines::tekton::v1alpha1::Pipeline& GetOneTektonPipelineResponse::tekton_pipeline() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.GetOneTektonPipelineResponse.tekton_pipeline)
  return _internal_tekton_pipeline();
}
inline void GetOneTektonPipelineResponse::unsafe_arena_set_allocated_tekton_pipeline(
    ::pipelines::tekton::v1alpha1::Pipeline* tekton_pipeline) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tekton_pipeline_);
  }
  tekton_pipeline_ = tekton_pipeline;
  if (tekton_pipeline) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.tekton.v1alpha1.GetOneTektonPipelineResponse.tekton_pipeline)
}
inline ::pipelines::tekton::v1alpha1::Pipeline* GetOneTektonPipelineResponse::release_tekton_pipeline() {
  
  ::pipelines::tekton::v1alpha1::Pipeline* temp = tekton_pipeline_;
  tekton_pipeline_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::tekton::v1alpha1::Pipeline* GetOneTektonPipelineResponse::unsafe_arena_release_tekton_pipeline() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.GetOneTektonPipelineResponse.tekton_pipeline)
  
  ::pipelines::tekton::v1alpha1::Pipeline* temp = tekton_pipeline_;
  tekton_pipeline_ = nullptr;
  return temp;
}
inline ::pipelines::tekton::v1alpha1::Pipeline* GetOneTektonPipelineResponse::_internal_mutable_tekton_pipeline() {
  
  if (tekton_pipeline_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::tekton::v1alpha1::Pipeline>(GetArenaForAllocation());
    tekton_pipeline_ = p;
  }
  return tekton_pipeline_;
}
inline ::pipelines::tekton::v1alpha1::Pipeline* GetOneTektonPipelineResponse::mutable_tekton_pipeline() {
  ::pipelines::tekton::v1alpha1::Pipeline* _msg = _internal_mutable_tekton_pipeline();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.GetOneTektonPipelineResponse.tekton_pipeline)
  return _msg;
}
inline void GetOneTektonPipelineResponse::set_allocated_tekton_pipeline(::pipelines::tekton::v1alpha1::Pipeline* tekton_pipeline) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(tekton_pipeline_);
  }
  if (tekton_pipeline) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tekton_pipeline));
    if (message_arena != submessage_arena) {
      tekton_pipeline = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tekton_pipeline, submessage_arena);
    }
    
  } else {
    
  }
  tekton_pipeline_ = tekton_pipeline;
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.GetOneTektonPipelineResponse.tekton_pipeline)
}

// string status = 2 [json_name = "status"];
inline void GetOneTektonPipelineResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& GetOneTektonPipelineResponse::status() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.GetOneTektonPipelineResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetOneTektonPipelineResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.GetOneTektonPipelineResponse.status)
}
inline std::string* GetOneTektonPipelineResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.GetOneTektonPipelineResponse.status)
  return _s;
}
inline const std::string& GetOneTektonPipelineResponse::_internal_status() const {
  return status_.Get();
}
inline void GetOneTektonPipelineResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetOneTektonPipelineResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetOneTektonPipelineResponse::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.GetOneTektonPipelineResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetOneTektonPipelineResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.GetOneTektonPipelineResponse.status)
}

// -------------------------------------------------------------------

// ListTektonPipelineRequest

// uint32 project_id = 1 [json_name = "projectId"];
inline void ListTektonPipelineRequest::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListTektonPipelineRequest::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ListTektonPipelineRequest::project_id() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.ListTektonPipelineRequest.project_id)
  return _internal_project_id();
}
inline void ListTektonPipelineRequest::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void ListTektonPipelineRequest::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.ListTektonPipelineRequest.project_id)
}

// -------------------------------------------------------------------

// ListTektonPipelineResponse

// repeated .pipelines.tekton.v1alpha1.Pipeline tekton_pipeline = 1 [json_name = "tektonPipeline"];
inline int ListTektonPipelineResponse::_internal_tekton_pipeline_size() const {
  return tekton_pipeline_.size();
}
inline int ListTektonPipelineResponse::tekton_pipeline_size() const {
  return _internal_tekton_pipeline_size();
}
inline ::pipelines::tekton::v1alpha1::Pipeline* ListTektonPipelineResponse::mutable_tekton_pipeline(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.ListTektonPipelineResponse.tekton_pipeline)
  return tekton_pipeline_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Pipeline >*
ListTektonPipelineResponse::mutable_tekton_pipeline() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.tekton.v1alpha1.ListTektonPipelineResponse.tekton_pipeline)
  return &tekton_pipeline_;
}
inline const ::pipelines::tekton::v1alpha1::Pipeline& ListTektonPipelineResponse::_internal_tekton_pipeline(int index) const {
  return tekton_pipeline_.Get(index);
}
inline const ::pipelines::tekton::v1alpha1::Pipeline& ListTektonPipelineResponse::tekton_pipeline(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.ListTektonPipelineResponse.tekton_pipeline)
  return _internal_tekton_pipeline(index);
}
inline ::pipelines::tekton::v1alpha1::Pipeline* ListTektonPipelineResponse::_internal_add_tekton_pipeline() {
  return tekton_pipeline_.Add();
}
inline ::pipelines::tekton::v1alpha1::Pipeline* ListTektonPipelineResponse::add_tekton_pipeline() {
  ::pipelines::tekton::v1alpha1::Pipeline* _add = _internal_add_tekton_pipeline();
  // @@protoc_insertion_point(field_add:pipelines.tekton.v1alpha1.ListTektonPipelineResponse.tekton_pipeline)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::tekton::v1alpha1::Pipeline >&
ListTektonPipelineResponse::tekton_pipeline() const {
  // @@protoc_insertion_point(field_list:pipelines.tekton.v1alpha1.ListTektonPipelineResponse.tekton_pipeline)
  return tekton_pipeline_;
}

// -------------------------------------------------------------------

// DeleteTektonPipelineRequest

// string tekton_pipeline_id = 1 [json_name = "tektonPipelineId"];
inline void DeleteTektonPipelineRequest::clear_tekton_pipeline_id() {
  tekton_pipeline_id_.ClearToEmpty();
}
inline const std::string& DeleteTektonPipelineRequest::tekton_pipeline_id() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.tekton_pipeline_id)
  return _internal_tekton_pipeline_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteTektonPipelineRequest::set_tekton_pipeline_id(ArgT0&& arg0, ArgT... args) {
 
 tekton_pipeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.tekton_pipeline_id)
}
inline std::string* DeleteTektonPipelineRequest::mutable_tekton_pipeline_id() {
  std::string* _s = _internal_mutable_tekton_pipeline_id();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.tekton_pipeline_id)
  return _s;
}
inline const std::string& DeleteTektonPipelineRequest::_internal_tekton_pipeline_id() const {
  return tekton_pipeline_id_.Get();
}
inline void DeleteTektonPipelineRequest::_internal_set_tekton_pipeline_id(const std::string& value) {
  
  tekton_pipeline_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteTektonPipelineRequest::_internal_mutable_tekton_pipeline_id() {
  
  return tekton_pipeline_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteTektonPipelineRequest::release_tekton_pipeline_id() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.tekton_pipeline_id)
  return tekton_pipeline_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteTektonPipelineRequest::set_allocated_tekton_pipeline_id(std::string* tekton_pipeline_id) {
  if (tekton_pipeline_id != nullptr) {
    
  } else {
    
  }
  tekton_pipeline_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tekton_pipeline_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.tekton_pipeline_id)
}

// string user_id = 2 [json_name = "userId"];
inline void DeleteTektonPipelineRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& DeleteTektonPipelineRequest::user_id() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteTektonPipelineRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.user_id)
}
inline std::string* DeleteTektonPipelineRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.user_id)
  return _s;
}
inline const std::string& DeleteTektonPipelineRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void DeleteTektonPipelineRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteTektonPipelineRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteTektonPipelineRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteTektonPipelineRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.DeleteTektonPipelineRequest.user_id)
}

// -------------------------------------------------------------------

// DeleteTektonPipelineResponse

// string status = 1 [json_name = "status"];
inline void DeleteTektonPipelineResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& DeleteTektonPipelineResponse::status() const {
  // @@protoc_insertion_point(field_get:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteTektonPipelineResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse.status)
}
inline std::string* DeleteTektonPipelineResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse.status)
  return _s;
}
inline const std::string& DeleteTektonPipelineResponse::_internal_status() const {
  return status_.Get();
}
inline void DeleteTektonPipelineResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteTektonPipelineResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteTektonPipelineResponse::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteTektonPipelineResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.tekton.v1alpha1.DeleteTektonPipelineResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace tekton
}  // namespace pipelines

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pipelines_2ftekton_2fv1alpha1_2ftekton_5fapi_2eproto
