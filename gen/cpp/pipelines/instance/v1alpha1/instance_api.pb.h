// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipelines/instance/v1alpha1/instance_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pipelines_2finstance_2fv1alpha1_2finstance_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pipelines_2finstance_2fv1alpha1_2finstance_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pipelines/instance/v1alpha1/instance.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pipelines_2finstance_2fv1alpha1_2finstance_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pipelines_2finstance_2fv1alpha1_2finstance_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pipelines_2finstance_2fv1alpha1_2finstance_5fapi_2eproto;
namespace pipelines {
namespace instance {
namespace v1alpha1 {
class CreateInstanceRequest;
struct CreateInstanceRequestDefaultTypeInternal;
extern CreateInstanceRequestDefaultTypeInternal _CreateInstanceRequest_default_instance_;
class CreateInstanceResponse;
struct CreateInstanceResponseDefaultTypeInternal;
extern CreateInstanceResponseDefaultTypeInternal _CreateInstanceResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace instance
}  // namespace pipelines
PROTOBUF_NAMESPACE_OPEN
template<> ::pipelines::instance::v1alpha1::CreateInstanceRequest* Arena::CreateMaybeMessage<::pipelines::instance::v1alpha1::CreateInstanceRequest>(Arena*);
template<> ::pipelines::instance::v1alpha1::CreateInstanceResponse* Arena::CreateMaybeMessage<::pipelines::instance::v1alpha1::CreateInstanceResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pipelines {
namespace instance {
namespace v1alpha1 {

// ===================================================================

class CreateInstanceRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.instance.v1alpha1.CreateInstanceRequest) */ {
 public:
  inline CreateInstanceRequest() : CreateInstanceRequest(nullptr) {}
  ~CreateInstanceRequest() override;
  explicit constexpr CreateInstanceRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateInstanceRequest(const CreateInstanceRequest& from);
  CreateInstanceRequest(CreateInstanceRequest&& from) noexcept
    : CreateInstanceRequest() {
    *this = ::std::move(from);
  }

  inline CreateInstanceRequest& operator=(const CreateInstanceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateInstanceRequest& operator=(CreateInstanceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateInstanceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateInstanceRequest* internal_default_instance() {
    return reinterpret_cast<const CreateInstanceRequest*>(
               &_CreateInstanceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateInstanceRequest& a, CreateInstanceRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateInstanceRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateInstanceRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateInstanceRequest* New() const final {
    return new CreateInstanceRequest();
  }

  CreateInstanceRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateInstanceRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateInstanceRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateInstanceRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateInstanceRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.instance.v1alpha1.CreateInstanceRequest";
  }
  protected:
  explicit CreateInstanceRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInstanceFieldNumber = 1,
  };
  // .pipelines.instance.v1alpha1.Instance instance = 1 [json_name = "instance"];
  bool has_instance() const;
  private:
  bool _internal_has_instance() const;
  public:
  void clear_instance();
  const ::pipelines::instance::v1alpha1::Instance& instance() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::instance::v1alpha1::Instance* release_instance();
  ::pipelines::instance::v1alpha1::Instance* mutable_instance();
  void set_allocated_instance(::pipelines::instance::v1alpha1::Instance* instance);
  private:
  const ::pipelines::instance::v1alpha1::Instance& _internal_instance() const;
  ::pipelines::instance::v1alpha1::Instance* _internal_mutable_instance();
  public:
  void unsafe_arena_set_allocated_instance(
      ::pipelines::instance::v1alpha1::Instance* instance);
  ::pipelines::instance::v1alpha1::Instance* unsafe_arena_release_instance();

  // @@protoc_insertion_point(class_scope:pipelines.instance.v1alpha1.CreateInstanceRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pipelines::instance::v1alpha1::Instance* instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2finstance_2fv1alpha1_2finstance_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateInstanceResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.instance.v1alpha1.CreateInstanceResponse) */ {
 public:
  inline CreateInstanceResponse() : CreateInstanceResponse(nullptr) {}
  ~CreateInstanceResponse() override;
  explicit constexpr CreateInstanceResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateInstanceResponse(const CreateInstanceResponse& from);
  CreateInstanceResponse(CreateInstanceResponse&& from) noexcept
    : CreateInstanceResponse() {
    *this = ::std::move(from);
  }

  inline CreateInstanceResponse& operator=(const CreateInstanceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateInstanceResponse& operator=(CreateInstanceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateInstanceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateInstanceResponse* internal_default_instance() {
    return reinterpret_cast<const CreateInstanceResponse*>(
               &_CreateInstanceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateInstanceResponse& a, CreateInstanceResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateInstanceResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateInstanceResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateInstanceResponse* New() const final {
    return new CreateInstanceResponse();
  }

  CreateInstanceResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateInstanceResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateInstanceResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateInstanceResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateInstanceResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.instance.v1alpha1.CreateInstanceResponse";
  }
  protected:
  explicit CreateInstanceResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kInstanceFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .pipelines.instance.v1alpha1.Instance instance = 1 [json_name = "instance"];
  bool has_instance() const;
  private:
  bool _internal_has_instance() const;
  public:
  void clear_instance();
  const ::pipelines::instance::v1alpha1::Instance& instance() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::instance::v1alpha1::Instance* release_instance();
  ::pipelines::instance::v1alpha1::Instance* mutable_instance();
  void set_allocated_instance(::pipelines::instance::v1alpha1::Instance* instance);
  private:
  const ::pipelines::instance::v1alpha1::Instance& _internal_instance() const;
  ::pipelines::instance::v1alpha1::Instance* _internal_mutable_instance();
  public:
  void unsafe_arena_set_allocated_instance(
      ::pipelines::instance::v1alpha1::Instance* instance);
  ::pipelines::instance::v1alpha1::Instance* unsafe_arena_release_instance();

  // @@protoc_insertion_point(class_scope:pipelines.instance.v1alpha1.CreateInstanceResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::pipelines::instance::v1alpha1::Instance* instance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2finstance_2fv1alpha1_2finstance_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateInstanceRequest

// .pipelines.instance.v1alpha1.Instance instance = 1 [json_name = "instance"];
inline bool CreateInstanceRequest::_internal_has_instance() const {
  return this != internal_default_instance() && instance_ != nullptr;
}
inline bool CreateInstanceRequest::has_instance() const {
  return _internal_has_instance();
}
inline const ::pipelines::instance::v1alpha1::Instance& CreateInstanceRequest::_internal_instance() const {
  const ::pipelines::instance::v1alpha1::Instance* p = instance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::instance::v1alpha1::Instance&>(
      ::pipelines::instance::v1alpha1::_Instance_default_instance_);
}
inline const ::pipelines::instance::v1alpha1::Instance& CreateInstanceRequest::instance() const {
  // @@protoc_insertion_point(field_get:pipelines.instance.v1alpha1.CreateInstanceRequest.instance)
  return _internal_instance();
}
inline void CreateInstanceRequest::unsafe_arena_set_allocated_instance(
    ::pipelines::instance::v1alpha1::Instance* instance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instance_);
  }
  instance_ = instance;
  if (instance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.instance.v1alpha1.CreateInstanceRequest.instance)
}
inline ::pipelines::instance::v1alpha1::Instance* CreateInstanceRequest::release_instance() {
  
  ::pipelines::instance::v1alpha1::Instance* temp = instance_;
  instance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::instance::v1alpha1::Instance* CreateInstanceRequest::unsafe_arena_release_instance() {
  // @@protoc_insertion_point(field_release:pipelines.instance.v1alpha1.CreateInstanceRequest.instance)
  
  ::pipelines::instance::v1alpha1::Instance* temp = instance_;
  instance_ = nullptr;
  return temp;
}
inline ::pipelines::instance::v1alpha1::Instance* CreateInstanceRequest::_internal_mutable_instance() {
  
  if (instance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::instance::v1alpha1::Instance>(GetArenaForAllocation());
    instance_ = p;
  }
  return instance_;
}
inline ::pipelines::instance::v1alpha1::Instance* CreateInstanceRequest::mutable_instance() {
  ::pipelines::instance::v1alpha1::Instance* _msg = _internal_mutable_instance();
  // @@protoc_insertion_point(field_mutable:pipelines.instance.v1alpha1.CreateInstanceRequest.instance)
  return _msg;
}
inline void CreateInstanceRequest::set_allocated_instance(::pipelines::instance::v1alpha1::Instance* instance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(instance_);
  }
  if (instance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instance));
    if (message_arena != submessage_arena) {
      instance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:pipelines.instance.v1alpha1.CreateInstanceRequest.instance)
}

// -------------------------------------------------------------------

// CreateInstanceResponse

// .pipelines.instance.v1alpha1.Instance instance = 1 [json_name = "instance"];
inline bool CreateInstanceResponse::_internal_has_instance() const {
  return this != internal_default_instance() && instance_ != nullptr;
}
inline bool CreateInstanceResponse::has_instance() const {
  return _internal_has_instance();
}
inline const ::pipelines::instance::v1alpha1::Instance& CreateInstanceResponse::_internal_instance() const {
  const ::pipelines::instance::v1alpha1::Instance* p = instance_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::instance::v1alpha1::Instance&>(
      ::pipelines::instance::v1alpha1::_Instance_default_instance_);
}
inline const ::pipelines::instance::v1alpha1::Instance& CreateInstanceResponse::instance() const {
  // @@protoc_insertion_point(field_get:pipelines.instance.v1alpha1.CreateInstanceResponse.instance)
  return _internal_instance();
}
inline void CreateInstanceResponse::unsafe_arena_set_allocated_instance(
    ::pipelines::instance::v1alpha1::Instance* instance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instance_);
  }
  instance_ = instance;
  if (instance) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.instance.v1alpha1.CreateInstanceResponse.instance)
}
inline ::pipelines::instance::v1alpha1::Instance* CreateInstanceResponse::release_instance() {
  
  ::pipelines::instance::v1alpha1::Instance* temp = instance_;
  instance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::instance::v1alpha1::Instance* CreateInstanceResponse::unsafe_arena_release_instance() {
  // @@protoc_insertion_point(field_release:pipelines.instance.v1alpha1.CreateInstanceResponse.instance)
  
  ::pipelines::instance::v1alpha1::Instance* temp = instance_;
  instance_ = nullptr;
  return temp;
}
inline ::pipelines::instance::v1alpha1::Instance* CreateInstanceResponse::_internal_mutable_instance() {
  
  if (instance_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::instance::v1alpha1::Instance>(GetArenaForAllocation());
    instance_ = p;
  }
  return instance_;
}
inline ::pipelines::instance::v1alpha1::Instance* CreateInstanceResponse::mutable_instance() {
  ::pipelines::instance::v1alpha1::Instance* _msg = _internal_mutable_instance();
  // @@protoc_insertion_point(field_mutable:pipelines.instance.v1alpha1.CreateInstanceResponse.instance)
  return _msg;
}
inline void CreateInstanceResponse::set_allocated_instance(::pipelines::instance::v1alpha1::Instance* instance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(instance_);
  }
  if (instance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(instance));
    if (message_arena != submessage_arena) {
      instance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, instance, submessage_arena);
    }
    
  } else {
    
  }
  instance_ = instance;
  // @@protoc_insertion_point(field_set_allocated:pipelines.instance.v1alpha1.CreateInstanceResponse.instance)
}

// string status = 2 [json_name = "status"];
inline void CreateInstanceResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& CreateInstanceResponse::status() const {
  // @@protoc_insertion_point(field_get:pipelines.instance.v1alpha1.CreateInstanceResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateInstanceResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.instance.v1alpha1.CreateInstanceResponse.status)
}
inline std::string* CreateInstanceResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.instance.v1alpha1.CreateInstanceResponse.status)
  return _s;
}
inline const std::string& CreateInstanceResponse::_internal_status() const {
  return status_.Get();
}
inline void CreateInstanceResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateInstanceResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateInstanceResponse::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.instance.v1alpha1.CreateInstanceResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateInstanceResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.instance.v1alpha1.CreateInstanceResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace instance
}  // namespace pipelines

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pipelines_2finstance_2fv1alpha1_2finstance_5fapi_2eproto
