// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipelines/instance/v1alpha1/instance.proto

#include "pipelines/instance/v1alpha1/instance.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pipelines {
namespace instance {
namespace v1alpha1 {
constexpr TypeGitProvider::TypeGitProvider(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ssh_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , branch_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ssh_private_key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct TypeGitProviderDefaultTypeInternal {
  constexpr TypeGitProviderDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~TypeGitProviderDefaultTypeInternal() {}
  union {
    TypeGitProvider _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT TypeGitProviderDefaultTypeInternal _TypeGitProvider_default_instance_;
constexpr Instance_EnvVariablesEntry_DoNotUse::Instance_EnvVariablesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Instance_EnvVariablesEntry_DoNotUseDefaultTypeInternal {
  constexpr Instance_EnvVariablesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Instance_EnvVariablesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Instance_EnvVariablesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Instance_EnvVariablesEntry_DoNotUseDefaultTypeInternal _Instance_EnvVariablesEntry_DoNotUse_default_instance_;
constexpr Instance::Instance(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : env_variables_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , namespace__(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , git_provider_(nullptr)
  , type_source_(0)
{}
struct InstanceDefaultTypeInternal {
  constexpr InstanceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~InstanceDefaultTypeInternal() {}
  union {
    Instance _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT InstanceDefaultTypeInternal _Instance_default_instance_;
}  // namespace v1alpha1
}  // namespace instance
}  // namespace pipelines
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pipelines_2finstance_2fv1alpha1_2finstance_2eproto[3];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pipelines_2finstance_2fv1alpha1_2finstance_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pipelines_2finstance_2fv1alpha1_2finstance_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pipelines_2finstance_2fv1alpha1_2finstance_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::instance::v1alpha1::TypeGitProvider, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::instance::v1alpha1::TypeGitProvider, ssh_url_),
  PROTOBUF_FIELD_OFFSET(::pipelines::instance::v1alpha1::TypeGitProvider, branch_),
  PROTOBUF_FIELD_OFFSET(::pipelines::instance::v1alpha1::TypeGitProvider, ssh_private_key_),
  PROTOBUF_FIELD_OFFSET(::pipelines::instance::v1alpha1::Instance_EnvVariablesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pipelines::instance::v1alpha1::Instance_EnvVariablesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::instance::v1alpha1::Instance_EnvVariablesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pipelines::instance::v1alpha1::Instance_EnvVariablesEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::instance::v1alpha1::Instance, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::instance::v1alpha1::Instance, name_),
  PROTOBUF_FIELD_OFFSET(::pipelines::instance::v1alpha1::Instance, namespace__),
  PROTOBUF_FIELD_OFFSET(::pipelines::instance::v1alpha1::Instance, type_source_),
  PROTOBUF_FIELD_OFFSET(::pipelines::instance::v1alpha1::Instance, git_provider_),
  PROTOBUF_FIELD_OFFSET(::pipelines::instance::v1alpha1::Instance, env_variables_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pipelines::instance::v1alpha1::TypeGitProvider)},
  { 8, 15, sizeof(::pipelines::instance::v1alpha1::Instance_EnvVariablesEntry_DoNotUse)},
  { 17, -1, sizeof(::pipelines::instance::v1alpha1::Instance)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::instance::v1alpha1::_TypeGitProvider_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::instance::v1alpha1::_Instance_EnvVariablesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::instance::v1alpha1::_Instance_default_instance_),
};

const char descriptor_table_protodef_pipelines_2finstance_2fv1alpha1_2finstance_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n*pipelines/instance/v1alpha1/instance.p"
  "roto\022\033pipelines.instance.v1alpha1\"j\n\017Typ"
  "eGitProvider\022\027\n\007ssh_url\030\001 \001(\tR\006sshUrl\022\026\n"
  "\006branch\030\002 \001(\tR\006branch\022&\n\017ssh_private_key"
  "\030\003 \001(\tR\rsshPrivateKey\"\370\002\n\010Instance\022\022\n\004na"
  "me\030\001 \001(\tR\004name\022\034\n\tnamespace\030\002 \001(\tR\tnames"
  "pace\022J\n\013type_source\030\003 \001(\0162).pipelines.in"
  "stance.v1alpha1.InstanceTypeR\ntypeSource"
  "\022O\n\014git_provider\030\004 \001(\0132,.pipelines.insta"
  "nce.v1alpha1.TypeGitProviderR\013gitProvide"
  "r\022\\\n\renv_variables\030\005 \003(\01327.pipelines.ins"
  "tance.v1alpha1.Instance.EnvVariablesEntr"
  "yR\014envVariables\032\?\n\021EnvVariablesEntry\022\020\n\003"
  "key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001"
  "*D\n\014InstanceType\022\035\n\031INSTANCE_TYPE_UNSPEC"
  "IFIED\020\000\022\025\n\021INSTANCE_TYPE_GIT\020\001B\264\001\n%io.cu"
  "emby.pipelines.instance.v1alpha1B\rInstan"
  "ceProtoP\001Z8github.com/cuemby/ccp-pipelin"
  "es-service/instancev1alpha1\242\002\003PPX\252\002\033Pipe"
  "lines.Instance.V1Alpha1\312\002\033Pipelines\\Inst"
  "ance\\V1Alpha1b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pipelines_2finstance_2fv1alpha1_2finstance_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pipelines_2finstance_2fv1alpha1_2finstance_2eproto = {
  false, false, 821, descriptor_table_protodef_pipelines_2finstance_2fv1alpha1_2finstance_2eproto, "pipelines/instance/v1alpha1/instance.proto", 
  &descriptor_table_pipelines_2finstance_2fv1alpha1_2finstance_2eproto_once, nullptr, 0, 3,
  schemas, file_default_instances, TableStruct_pipelines_2finstance_2fv1alpha1_2finstance_2eproto::offsets,
  file_level_metadata_pipelines_2finstance_2fv1alpha1_2finstance_2eproto, file_level_enum_descriptors_pipelines_2finstance_2fv1alpha1_2finstance_2eproto, file_level_service_descriptors_pipelines_2finstance_2fv1alpha1_2finstance_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_pipelines_2finstance_2fv1alpha1_2finstance_2eproto_getter() {
  return &descriptor_table_pipelines_2finstance_2fv1alpha1_2finstance_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_pipelines_2finstance_2fv1alpha1_2finstance_2eproto(&descriptor_table_pipelines_2finstance_2fv1alpha1_2finstance_2eproto);
namespace pipelines {
namespace instance {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InstanceType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pipelines_2finstance_2fv1alpha1_2finstance_2eproto);
  return file_level_enum_descriptors_pipelines_2finstance_2fv1alpha1_2finstance_2eproto[0];
}
bool InstanceType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TypeGitProvider::_Internal {
 public:
};

TypeGitProvider::TypeGitProvider(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.instance.v1alpha1.TypeGitProvider)
}
TypeGitProvider::TypeGitProvider(const TypeGitProvider& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ssh_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssh_url().empty()) {
    ssh_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ssh_url(), 
      GetArenaForAllocation());
  }
  branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_branch().empty()) {
    branch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_branch(), 
      GetArenaForAllocation());
  }
  ssh_private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ssh_private_key().empty()) {
    ssh_private_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ssh_private_key(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.instance.v1alpha1.TypeGitProvider)
}

inline void TypeGitProvider::SharedCtor() {
ssh_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ssh_private_key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TypeGitProvider::~TypeGitProvider() {
  // @@protoc_insertion_point(destructor:pipelines.instance.v1alpha1.TypeGitProvider)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void TypeGitProvider::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ssh_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ssh_private_key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TypeGitProvider::ArenaDtor(void* object) {
  TypeGitProvider* _this = reinterpret_cast< TypeGitProvider* >(object);
  (void)_this;
}
void TypeGitProvider::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TypeGitProvider::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void TypeGitProvider::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.instance.v1alpha1.TypeGitProvider)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ssh_url_.ClearToEmpty();
  branch_.ClearToEmpty();
  ssh_private_key_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TypeGitProvider::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string ssh_url = 1 [json_name = "sshUrl"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ssh_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.instance.v1alpha1.TypeGitProvider.ssh_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string branch = 2 [json_name = "branch"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_branch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.instance.v1alpha1.TypeGitProvider.branch"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ssh_private_key = 3 [json_name = "sshPrivateKey"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_ssh_private_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.instance.v1alpha1.TypeGitProvider.ssh_private_key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TypeGitProvider::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.instance.v1alpha1.TypeGitProvider)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string ssh_url = 1 [json_name = "sshUrl"];
  if (!this->_internal_ssh_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssh_url().data(), static_cast<int>(this->_internal_ssh_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.instance.v1alpha1.TypeGitProvider.ssh_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_ssh_url(), target);
  }

  // string branch = 2 [json_name = "branch"];
  if (!this->_internal_branch().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_branch().data(), static_cast<int>(this->_internal_branch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.instance.v1alpha1.TypeGitProvider.branch");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_branch(), target);
  }

  // string ssh_private_key = 3 [json_name = "sshPrivateKey"];
  if (!this->_internal_ssh_private_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ssh_private_key().data(), static_cast<int>(this->_internal_ssh_private_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.instance.v1alpha1.TypeGitProvider.ssh_private_key");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_ssh_private_key(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.instance.v1alpha1.TypeGitProvider)
  return target;
}

size_t TypeGitProvider::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.instance.v1alpha1.TypeGitProvider)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string ssh_url = 1 [json_name = "sshUrl"];
  if (!this->_internal_ssh_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssh_url());
  }

  // string branch = 2 [json_name = "branch"];
  if (!this->_internal_branch().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_branch());
  }

  // string ssh_private_key = 3 [json_name = "sshPrivateKey"];
  if (!this->_internal_ssh_private_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ssh_private_key());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TypeGitProvider::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    TypeGitProvider::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TypeGitProvider::GetClassData() const { return &_class_data_; }

void TypeGitProvider::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<TypeGitProvider *>(to)->MergeFrom(
      static_cast<const TypeGitProvider &>(from));
}


void TypeGitProvider::MergeFrom(const TypeGitProvider& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.instance.v1alpha1.TypeGitProvider)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_ssh_url().empty()) {
    _internal_set_ssh_url(from._internal_ssh_url());
  }
  if (!from._internal_branch().empty()) {
    _internal_set_branch(from._internal_branch());
  }
  if (!from._internal_ssh_private_key().empty()) {
    _internal_set_ssh_private_key(from._internal_ssh_private_key());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TypeGitProvider::CopyFrom(const TypeGitProvider& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.instance.v1alpha1.TypeGitProvider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TypeGitProvider::IsInitialized() const {
  return true;
}

void TypeGitProvider::InternalSwap(TypeGitProvider* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ssh_url_, GetArenaForAllocation(),
      &other->ssh_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &branch_, GetArenaForAllocation(),
      &other->branch_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ssh_private_key_, GetArenaForAllocation(),
      &other->ssh_private_key_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata TypeGitProvider::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2finstance_2fv1alpha1_2finstance_2eproto_getter, &descriptor_table_pipelines_2finstance_2fv1alpha1_2finstance_2eproto_once,
      file_level_metadata_pipelines_2finstance_2fv1alpha1_2finstance_2eproto[0]);
}

// ===================================================================

Instance_EnvVariablesEntry_DoNotUse::Instance_EnvVariablesEntry_DoNotUse() {}
Instance_EnvVariablesEntry_DoNotUse::Instance_EnvVariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Instance_EnvVariablesEntry_DoNotUse::MergeFrom(const Instance_EnvVariablesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Instance_EnvVariablesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2finstance_2fv1alpha1_2finstance_2eproto_getter, &descriptor_table_pipelines_2finstance_2fv1alpha1_2finstance_2eproto_once,
      file_level_metadata_pipelines_2finstance_2fv1alpha1_2finstance_2eproto[1]);
}

// ===================================================================

class Instance::_Internal {
 public:
  static const ::pipelines::instance::v1alpha1::TypeGitProvider& git_provider(const Instance* msg);
};

const ::pipelines::instance::v1alpha1::TypeGitProvider&
Instance::_Internal::git_provider(const Instance* msg) {
  return *msg->git_provider_;
}
Instance::Instance(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  env_variables_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.instance.v1alpha1.Instance)
}
Instance::Instance(const Instance& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  env_variables_.MergeFrom(from.env_variables_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_git_provider()) {
    git_provider_ = new ::pipelines::instance::v1alpha1::TypeGitProvider(*from.git_provider_);
  } else {
    git_provider_ = nullptr;
  }
  type_source_ = from.type_source_;
  // @@protoc_insertion_point(copy_constructor:pipelines.instance.v1alpha1.Instance)
}

inline void Instance::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&git_provider_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_source_) -
    reinterpret_cast<char*>(&git_provider_)) + sizeof(type_source_));
}

Instance::~Instance() {
  // @@protoc_insertion_point(destructor:pipelines.instance.v1alpha1.Instance)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Instance::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete git_provider_;
}

void Instance::ArenaDtor(void* object) {
  Instance* _this = reinterpret_cast< Instance* >(object);
  (void)_this;
  _this->env_variables_. ~MapField();
}
inline void Instance::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Instance::ArenaDtor);
  }
}
void Instance::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Instance::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.instance.v1alpha1.Instance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  env_variables_.Clear();
  name_.ClearToEmpty();
  namespace__.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && git_provider_ != nullptr) {
    delete git_provider_;
  }
  git_provider_ = nullptr;
  type_source_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Instance::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.instance.v1alpha1.Instance.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string namespace = 2 [json_name = "namespace"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.instance.v1alpha1.Instance.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pipelines.instance.v1alpha1.InstanceType type_source = 3 [json_name = "typeSource"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type_source(static_cast<::pipelines::instance::v1alpha1::InstanceType>(val));
        } else goto handle_unusual;
        continue;
      // .pipelines.instance.v1alpha1.TypeGitProvider git_provider = 4 [json_name = "gitProvider"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_git_provider(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> env_variables = 5 [json_name = "envVariables"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&env_variables_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Instance::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.instance.v1alpha1.Instance)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.instance.v1alpha1.Instance.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string namespace = 2 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.instance.v1alpha1.Instance.namespace");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_namespace_(), target);
  }

  // .pipelines.instance.v1alpha1.InstanceType type_source = 3 [json_name = "typeSource"];
  if (this->_internal_type_source() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_type_source(), target);
  }

  // .pipelines.instance.v1alpha1.TypeGitProvider git_provider = 4 [json_name = "gitProvider"];
  if (this->_internal_has_git_provider()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::git_provider(this), target, stream);
  }

  // map<string, string> env_variables = 5 [json_name = "envVariables"];
  if (!this->_internal_env_variables().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pipelines.instance.v1alpha1.Instance.EnvVariablesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pipelines.instance.v1alpha1.Instance.EnvVariablesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_env_variables().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_env_variables().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_env_variables().begin();
          it != this->_internal_env_variables().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Instance_EnvVariablesEntry_DoNotUse::Funcs::InternalSerialize(5, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_env_variables().begin();
          it != this->_internal_env_variables().end(); ++it) {
        target = Instance_EnvVariablesEntry_DoNotUse::Funcs::InternalSerialize(5, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.instance.v1alpha1.Instance)
  return target;
}

size_t Instance::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.instance.v1alpha1.Instance)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, string> env_variables = 5 [json_name = "envVariables"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_env_variables_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_env_variables().begin();
      it != this->_internal_env_variables().end(); ++it) {
    total_size += Instance_EnvVariablesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string namespace = 2 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // .pipelines.instance.v1alpha1.TypeGitProvider git_provider = 4 [json_name = "gitProvider"];
  if (this->_internal_has_git_provider()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *git_provider_);
  }

  // .pipelines.instance.v1alpha1.InstanceType type_source = 3 [json_name = "typeSource"];
  if (this->_internal_type_source() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type_source());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Instance::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Instance::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Instance::GetClassData() const { return &_class_data_; }

void Instance::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Instance *>(to)->MergeFrom(
      static_cast<const Instance &>(from));
}


void Instance::MergeFrom(const Instance& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.instance.v1alpha1.Instance)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  env_variables_.MergeFrom(from.env_variables_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_namespace_().empty()) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (from._internal_has_git_provider()) {
    _internal_mutable_git_provider()->::pipelines::instance::v1alpha1::TypeGitProvider::MergeFrom(from._internal_git_provider());
  }
  if (from._internal_type_source() != 0) {
    _internal_set_type_source(from._internal_type_source());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Instance::CopyFrom(const Instance& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.instance.v1alpha1.Instance)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instance::IsInitialized() const {
  return true;
}

void Instance::InternalSwap(Instance* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  env_variables_.InternalSwap(&other->env_variables_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &namespace__, GetArenaForAllocation(),
      &other->namespace__, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Instance, type_source_)
      + sizeof(Instance::type_source_)
      - PROTOBUF_FIELD_OFFSET(Instance, git_provider_)>(
          reinterpret_cast<char*>(&git_provider_),
          reinterpret_cast<char*>(&other->git_provider_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Instance::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2finstance_2fv1alpha1_2finstance_2eproto_getter, &descriptor_table_pipelines_2finstance_2fv1alpha1_2finstance_2eproto_once,
      file_level_metadata_pipelines_2finstance_2fv1alpha1_2finstance_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace instance
}  // namespace pipelines
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pipelines::instance::v1alpha1::TypeGitProvider* Arena::CreateMaybeMessage< ::pipelines::instance::v1alpha1::TypeGitProvider >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::instance::v1alpha1::TypeGitProvider >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::instance::v1alpha1::Instance_EnvVariablesEntry_DoNotUse* Arena::CreateMaybeMessage< ::pipelines::instance::v1alpha1::Instance_EnvVariablesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::instance::v1alpha1::Instance_EnvVariablesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::instance::v1alpha1::Instance* Arena::CreateMaybeMessage< ::pipelines::instance::v1alpha1::Instance >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::instance::v1alpha1::Instance >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
