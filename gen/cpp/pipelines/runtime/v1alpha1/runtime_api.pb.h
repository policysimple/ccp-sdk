// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipelines/runtime/v1alpha1/runtime_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pipelines/runtime/v1alpha1/runtime.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
namespace pipelines {
namespace runtime {
namespace v1alpha1 {
class CreateRuntimeRequest;
struct CreateRuntimeRequestDefaultTypeInternal;
extern CreateRuntimeRequestDefaultTypeInternal _CreateRuntimeRequest_default_instance_;
class CreateRuntimeResponse;
struct CreateRuntimeResponseDefaultTypeInternal;
extern CreateRuntimeResponseDefaultTypeInternal _CreateRuntimeResponse_default_instance_;
class DeleteRuntimeRequest;
struct DeleteRuntimeRequestDefaultTypeInternal;
extern DeleteRuntimeRequestDefaultTypeInternal _DeleteRuntimeRequest_default_instance_;
class DeleteRuntimeResponse;
struct DeleteRuntimeResponseDefaultTypeInternal;
extern DeleteRuntimeResponseDefaultTypeInternal _DeleteRuntimeResponse_default_instance_;
class GetRuntimeRequest;
struct GetRuntimeRequestDefaultTypeInternal;
extern GetRuntimeRequestDefaultTypeInternal _GetRuntimeRequest_default_instance_;
class GetRuntimeResponse;
struct GetRuntimeResponseDefaultTypeInternal;
extern GetRuntimeResponseDefaultTypeInternal _GetRuntimeResponse_default_instance_;
class UpdateRuntimeRequest;
struct UpdateRuntimeRequestDefaultTypeInternal;
extern UpdateRuntimeRequestDefaultTypeInternal _UpdateRuntimeRequest_default_instance_;
class UpdateRuntimeResponse;
struct UpdateRuntimeResponseDefaultTypeInternal;
extern UpdateRuntimeResponseDefaultTypeInternal _UpdateRuntimeResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace runtime
}  // namespace pipelines
PROTOBUF_NAMESPACE_OPEN
template<> ::pipelines::runtime::v1alpha1::CreateRuntimeRequest* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::CreateRuntimeRequest>(Arena*);
template<> ::pipelines::runtime::v1alpha1::CreateRuntimeResponse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::CreateRuntimeResponse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::DeleteRuntimeRequest* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::DeleteRuntimeRequest>(Arena*);
template<> ::pipelines::runtime::v1alpha1::DeleteRuntimeResponse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::DeleteRuntimeResponse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::GetRuntimeRequest* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::GetRuntimeRequest>(Arena*);
template<> ::pipelines::runtime::v1alpha1::GetRuntimeResponse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::GetRuntimeResponse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::UpdateRuntimeRequest* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::UpdateRuntimeRequest>(Arena*);
template<> ::pipelines::runtime::v1alpha1::UpdateRuntimeResponse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::UpdateRuntimeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pipelines {
namespace runtime {
namespace v1alpha1 {

// ===================================================================

class CreateRuntimeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.CreateRuntimeRequest) */ {
 public:
  inline CreateRuntimeRequest() : CreateRuntimeRequest(nullptr) {}
  ~CreateRuntimeRequest() override;
  explicit constexpr CreateRuntimeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRuntimeRequest(const CreateRuntimeRequest& from);
  CreateRuntimeRequest(CreateRuntimeRequest&& from) noexcept
    : CreateRuntimeRequest() {
    *this = ::std::move(from);
  }

  inline CreateRuntimeRequest& operator=(const CreateRuntimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRuntimeRequest& operator=(CreateRuntimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRuntimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRuntimeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRuntimeRequest*>(
               &_CreateRuntimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateRuntimeRequest& a, CreateRuntimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRuntimeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRuntimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRuntimeRequest* New() const final {
    return new CreateRuntimeRequest();
  }

  CreateRuntimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRuntimeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRuntimeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRuntimeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRuntimeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.CreateRuntimeRequest";
  }
  protected:
  explicit CreateRuntimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuntimeFieldNumber = 1,
  };
  // .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
  bool has_runtime() const;
  private:
  bool _internal_has_runtime() const;
  public:
  void clear_runtime();
  const ::pipelines::runtime::v1alpha1::Runtime& runtime() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::runtime::v1alpha1::Runtime* release_runtime();
  ::pipelines::runtime::v1alpha1::Runtime* mutable_runtime();
  void set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime);
  private:
  const ::pipelines::runtime::v1alpha1::Runtime& _internal_runtime() const;
  ::pipelines::runtime::v1alpha1::Runtime* _internal_mutable_runtime();
  public:
  void unsafe_arena_set_allocated_runtime(
      ::pipelines::runtime::v1alpha1::Runtime* runtime);
  ::pipelines::runtime::v1alpha1::Runtime* unsafe_arena_release_runtime();

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.CreateRuntimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pipelines::runtime::v1alpha1::Runtime* runtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateRuntimeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.CreateRuntimeResponse) */ {
 public:
  inline CreateRuntimeResponse() : CreateRuntimeResponse(nullptr) {}
  ~CreateRuntimeResponse() override;
  explicit constexpr CreateRuntimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRuntimeResponse(const CreateRuntimeResponse& from);
  CreateRuntimeResponse(CreateRuntimeResponse&& from) noexcept
    : CreateRuntimeResponse() {
    *this = ::std::move(from);
  }

  inline CreateRuntimeResponse& operator=(const CreateRuntimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRuntimeResponse& operator=(CreateRuntimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRuntimeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRuntimeResponse* internal_default_instance() {
    return reinterpret_cast<const CreateRuntimeResponse*>(
               &_CreateRuntimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateRuntimeResponse& a, CreateRuntimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRuntimeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRuntimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRuntimeResponse* New() const final {
    return new CreateRuntimeResponse();
  }

  CreateRuntimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRuntimeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRuntimeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRuntimeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRuntimeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.CreateRuntimeResponse";
  }
  protected:
  explicit CreateRuntimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kRuntimeFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
  bool has_runtime() const;
  private:
  bool _internal_has_runtime() const;
  public:
  void clear_runtime();
  const ::pipelines::runtime::v1alpha1::Runtime& runtime() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::runtime::v1alpha1::Runtime* release_runtime();
  ::pipelines::runtime::v1alpha1::Runtime* mutable_runtime();
  void set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime);
  private:
  const ::pipelines::runtime::v1alpha1::Runtime& _internal_runtime() const;
  ::pipelines::runtime::v1alpha1::Runtime* _internal_mutable_runtime();
  public:
  void unsafe_arena_set_allocated_runtime(
      ::pipelines::runtime::v1alpha1::Runtime* runtime);
  ::pipelines::runtime::v1alpha1::Runtime* unsafe_arena_release_runtime();

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.CreateRuntimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::pipelines::runtime::v1alpha1::Runtime* runtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UpdateRuntimeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.UpdateRuntimeRequest) */ {
 public:
  inline UpdateRuntimeRequest() : UpdateRuntimeRequest(nullptr) {}
  ~UpdateRuntimeRequest() override;
  explicit constexpr UpdateRuntimeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRuntimeRequest(const UpdateRuntimeRequest& from);
  UpdateRuntimeRequest(UpdateRuntimeRequest&& from) noexcept
    : UpdateRuntimeRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRuntimeRequest& operator=(const UpdateRuntimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRuntimeRequest& operator=(UpdateRuntimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRuntimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRuntimeRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRuntimeRequest*>(
               &_UpdateRuntimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateRuntimeRequest& a, UpdateRuntimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRuntimeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRuntimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateRuntimeRequest* New() const final {
    return new UpdateRuntimeRequest();
  }

  UpdateRuntimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRuntimeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRuntimeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateRuntimeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRuntimeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.UpdateRuntimeRequest";
  }
  protected:
  explicit UpdateRuntimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuntimeFieldNumber = 1,
  };
  // .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
  bool has_runtime() const;
  private:
  bool _internal_has_runtime() const;
  public:
  void clear_runtime();
  const ::pipelines::runtime::v1alpha1::Runtime& runtime() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::runtime::v1alpha1::Runtime* release_runtime();
  ::pipelines::runtime::v1alpha1::Runtime* mutable_runtime();
  void set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime);
  private:
  const ::pipelines::runtime::v1alpha1::Runtime& _internal_runtime() const;
  ::pipelines::runtime::v1alpha1::Runtime* _internal_mutable_runtime();
  public:
  void unsafe_arena_set_allocated_runtime(
      ::pipelines::runtime::v1alpha1::Runtime* runtime);
  ::pipelines::runtime::v1alpha1::Runtime* unsafe_arena_release_runtime();

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.UpdateRuntimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pipelines::runtime::v1alpha1::Runtime* runtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UpdateRuntimeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.UpdateRuntimeResponse) */ {
 public:
  inline UpdateRuntimeResponse() : UpdateRuntimeResponse(nullptr) {}
  ~UpdateRuntimeResponse() override;
  explicit constexpr UpdateRuntimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRuntimeResponse(const UpdateRuntimeResponse& from);
  UpdateRuntimeResponse(UpdateRuntimeResponse&& from) noexcept
    : UpdateRuntimeResponse() {
    *this = ::std::move(from);
  }

  inline UpdateRuntimeResponse& operator=(const UpdateRuntimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRuntimeResponse& operator=(UpdateRuntimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRuntimeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRuntimeResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateRuntimeResponse*>(
               &_UpdateRuntimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateRuntimeResponse& a, UpdateRuntimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRuntimeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRuntimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateRuntimeResponse* New() const final {
    return new UpdateRuntimeResponse();
  }

  UpdateRuntimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRuntimeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRuntimeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateRuntimeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRuntimeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.UpdateRuntimeResponse";
  }
  protected:
  explicit UpdateRuntimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kRuntimeFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
  bool has_runtime() const;
  private:
  bool _internal_has_runtime() const;
  public:
  void clear_runtime();
  const ::pipelines::runtime::v1alpha1::Runtime& runtime() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::runtime::v1alpha1::Runtime* release_runtime();
  ::pipelines::runtime::v1alpha1::Runtime* mutable_runtime();
  void set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime);
  private:
  const ::pipelines::runtime::v1alpha1::Runtime& _internal_runtime() const;
  ::pipelines::runtime::v1alpha1::Runtime* _internal_mutable_runtime();
  public:
  void unsafe_arena_set_allocated_runtime(
      ::pipelines::runtime::v1alpha1::Runtime* runtime);
  ::pipelines::runtime::v1alpha1::Runtime* unsafe_arena_release_runtime();

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.UpdateRuntimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::pipelines::runtime::v1alpha1::Runtime* runtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteRuntimeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.DeleteRuntimeRequest) */ {
 public:
  inline DeleteRuntimeRequest() : DeleteRuntimeRequest(nullptr) {}
  ~DeleteRuntimeRequest() override;
  explicit constexpr DeleteRuntimeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRuntimeRequest(const DeleteRuntimeRequest& from);
  DeleteRuntimeRequest(DeleteRuntimeRequest&& from) noexcept
    : DeleteRuntimeRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRuntimeRequest& operator=(const DeleteRuntimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRuntimeRequest& operator=(DeleteRuntimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRuntimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRuntimeRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRuntimeRequest*>(
               &_DeleteRuntimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DeleteRuntimeRequest& a, DeleteRuntimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRuntimeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRuntimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRuntimeRequest* New() const final {
    return new DeleteRuntimeRequest();
  }

  DeleteRuntimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRuntimeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRuntimeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRuntimeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRuntimeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.DeleteRuntimeRequest";
  }
  protected:
  explicit DeleteRuntimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuntimeIdFieldNumber = 1,
  };
  // string runtime_id = 1 [json_name = "runtimeId"];
  void clear_runtime_id();
  const std::string& runtime_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_runtime_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_runtime_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_runtime_id();
  void set_allocated_runtime_id(std::string* runtime_id);
  private:
  const std::string& _internal_runtime_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_runtime_id(const std::string& value);
  std::string* _internal_mutable_runtime_id();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.DeleteRuntimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteRuntimeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.DeleteRuntimeResponse) */ {
 public:
  inline DeleteRuntimeResponse() : DeleteRuntimeResponse(nullptr) {}
  ~DeleteRuntimeResponse() override;
  explicit constexpr DeleteRuntimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRuntimeResponse(const DeleteRuntimeResponse& from);
  DeleteRuntimeResponse(DeleteRuntimeResponse&& from) noexcept
    : DeleteRuntimeResponse() {
    *this = ::std::move(from);
  }

  inline DeleteRuntimeResponse& operator=(const DeleteRuntimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRuntimeResponse& operator=(DeleteRuntimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRuntimeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRuntimeResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteRuntimeResponse*>(
               &_DeleteRuntimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(DeleteRuntimeResponse& a, DeleteRuntimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRuntimeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRuntimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRuntimeResponse* New() const final {
    return new DeleteRuntimeResponse();
  }

  DeleteRuntimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRuntimeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRuntimeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRuntimeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRuntimeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.DeleteRuntimeResponse";
  }
  protected:
  explicit DeleteRuntimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 1,
  };
  // string status = 1 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.DeleteRuntimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetRuntimeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.GetRuntimeRequest) */ {
 public:
  inline GetRuntimeRequest() : GetRuntimeRequest(nullptr) {}
  ~GetRuntimeRequest() override;
  explicit constexpr GetRuntimeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRuntimeRequest(const GetRuntimeRequest& from);
  GetRuntimeRequest(GetRuntimeRequest&& from) noexcept
    : GetRuntimeRequest() {
    *this = ::std::move(from);
  }

  inline GetRuntimeRequest& operator=(const GetRuntimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRuntimeRequest& operator=(GetRuntimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRuntimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRuntimeRequest* internal_default_instance() {
    return reinterpret_cast<const GetRuntimeRequest*>(
               &_GetRuntimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(GetRuntimeRequest& a, GetRuntimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRuntimeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRuntimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRuntimeRequest* New() const final {
    return new GetRuntimeRequest();
  }

  GetRuntimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRuntimeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRuntimeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRuntimeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRuntimeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.GetRuntimeRequest";
  }
  protected:
  explicit GetRuntimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuntimeIdFieldNumber = 1,
  };
  // string runtime_id = 1 [json_name = "runtimeId"];
  void clear_runtime_id();
  const std::string& runtime_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_runtime_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_runtime_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_runtime_id();
  void set_allocated_runtime_id(std::string* runtime_id);
  private:
  const std::string& _internal_runtime_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_runtime_id(const std::string& value);
  std::string* _internal_mutable_runtime_id();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.GetRuntimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetRuntimeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.GetRuntimeResponse) */ {
 public:
  inline GetRuntimeResponse() : GetRuntimeResponse(nullptr) {}
  ~GetRuntimeResponse() override;
  explicit constexpr GetRuntimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRuntimeResponse(const GetRuntimeResponse& from);
  GetRuntimeResponse(GetRuntimeResponse&& from) noexcept
    : GetRuntimeResponse() {
    *this = ::std::move(from);
  }

  inline GetRuntimeResponse& operator=(const GetRuntimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRuntimeResponse& operator=(GetRuntimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRuntimeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRuntimeResponse* internal_default_instance() {
    return reinterpret_cast<const GetRuntimeResponse*>(
               &_GetRuntimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(GetRuntimeResponse& a, GetRuntimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRuntimeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRuntimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRuntimeResponse* New() const final {
    return new GetRuntimeResponse();
  }

  GetRuntimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRuntimeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRuntimeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRuntimeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRuntimeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.GetRuntimeResponse";
  }
  protected:
  explicit GetRuntimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kRuntimeFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
  bool has_runtime() const;
  private:
  bool _internal_has_runtime() const;
  public:
  void clear_runtime();
  const ::pipelines::runtime::v1alpha1::Runtime& runtime() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::runtime::v1alpha1::Runtime* release_runtime();
  ::pipelines::runtime::v1alpha1::Runtime* mutable_runtime();
  void set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime);
  private:
  const ::pipelines::runtime::v1alpha1::Runtime& _internal_runtime() const;
  ::pipelines::runtime::v1alpha1::Runtime* _internal_mutable_runtime();
  public:
  void unsafe_arena_set_allocated_runtime(
      ::pipelines::runtime::v1alpha1::Runtime* runtime);
  ::pipelines::runtime::v1alpha1::Runtime* unsafe_arena_release_runtime();

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.GetRuntimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::pipelines::runtime::v1alpha1::Runtime* runtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateRuntimeRequest

// .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
inline bool CreateRuntimeRequest::_internal_has_runtime() const {
  return this != internal_default_instance() && runtime_ != nullptr;
}
inline bool CreateRuntimeRequest::has_runtime() const {
  return _internal_has_runtime();
}
inline const ::pipelines::runtime::v1alpha1::Runtime& CreateRuntimeRequest::_internal_runtime() const {
  const ::pipelines::runtime::v1alpha1::Runtime* p = runtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::runtime::v1alpha1::Runtime&>(
      ::pipelines::runtime::v1alpha1::_Runtime_default_instance_);
}
inline const ::pipelines::runtime::v1alpha1::Runtime& CreateRuntimeRequest::runtime() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.CreateRuntimeRequest.runtime)
  return _internal_runtime();
}
inline void CreateRuntimeRequest::unsafe_arena_set_allocated_runtime(
    ::pipelines::runtime::v1alpha1::Runtime* runtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  runtime_ = runtime;
  if (runtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.runtime.v1alpha1.CreateRuntimeRequest.runtime)
}
inline ::pipelines::runtime::v1alpha1::Runtime* CreateRuntimeRequest::release_runtime() {
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* CreateRuntimeRequest::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.CreateRuntimeRequest.runtime)
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* CreateRuntimeRequest::_internal_mutable_runtime() {
  
  if (runtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime>(GetArenaForAllocation());
    runtime_ = p;
  }
  return runtime_;
}
inline ::pipelines::runtime::v1alpha1::Runtime* CreateRuntimeRequest::mutable_runtime() {
  ::pipelines::runtime::v1alpha1::Runtime* _msg = _internal_mutable_runtime();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.CreateRuntimeRequest.runtime)
  return _msg;
}
inline void CreateRuntimeRequest::set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  if (runtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime));
    if (message_arena != submessage_arena) {
      runtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime, submessage_arena);
    }
    
  } else {
    
  }
  runtime_ = runtime;
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.CreateRuntimeRequest.runtime)
}

// -------------------------------------------------------------------

// CreateRuntimeResponse

// .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
inline bool CreateRuntimeResponse::_internal_has_runtime() const {
  return this != internal_default_instance() && runtime_ != nullptr;
}
inline bool CreateRuntimeResponse::has_runtime() const {
  return _internal_has_runtime();
}
inline const ::pipelines::runtime::v1alpha1::Runtime& CreateRuntimeResponse::_internal_runtime() const {
  const ::pipelines::runtime::v1alpha1::Runtime* p = runtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::runtime::v1alpha1::Runtime&>(
      ::pipelines::runtime::v1alpha1::_Runtime_default_instance_);
}
inline const ::pipelines::runtime::v1alpha1::Runtime& CreateRuntimeResponse::runtime() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.CreateRuntimeResponse.runtime)
  return _internal_runtime();
}
inline void CreateRuntimeResponse::unsafe_arena_set_allocated_runtime(
    ::pipelines::runtime::v1alpha1::Runtime* runtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  runtime_ = runtime;
  if (runtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.runtime.v1alpha1.CreateRuntimeResponse.runtime)
}
inline ::pipelines::runtime::v1alpha1::Runtime* CreateRuntimeResponse::release_runtime() {
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* CreateRuntimeResponse::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.CreateRuntimeResponse.runtime)
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* CreateRuntimeResponse::_internal_mutable_runtime() {
  
  if (runtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime>(GetArenaForAllocation());
    runtime_ = p;
  }
  return runtime_;
}
inline ::pipelines::runtime::v1alpha1::Runtime* CreateRuntimeResponse::mutable_runtime() {
  ::pipelines::runtime::v1alpha1::Runtime* _msg = _internal_mutable_runtime();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.CreateRuntimeResponse.runtime)
  return _msg;
}
inline void CreateRuntimeResponse::set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  if (runtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime));
    if (message_arena != submessage_arena) {
      runtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime, submessage_arena);
    }
    
  } else {
    
  }
  runtime_ = runtime;
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.CreateRuntimeResponse.runtime)
}

// string status = 2 [json_name = "status"];
inline void CreateRuntimeResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& CreateRuntimeResponse::status() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.CreateRuntimeResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRuntimeResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.CreateRuntimeResponse.status)
}
inline std::string* CreateRuntimeResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.CreateRuntimeResponse.status)
  return _s;
}
inline const std::string& CreateRuntimeResponse::_internal_status() const {
  return status_.Get();
}
inline void CreateRuntimeResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRuntimeResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRuntimeResponse::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.CreateRuntimeResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRuntimeResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.CreateRuntimeResponse.status)
}

// -------------------------------------------------------------------

// UpdateRuntimeRequest

// .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
inline bool UpdateRuntimeRequest::_internal_has_runtime() const {
  return this != internal_default_instance() && runtime_ != nullptr;
}
inline bool UpdateRuntimeRequest::has_runtime() const {
  return _internal_has_runtime();
}
inline const ::pipelines::runtime::v1alpha1::Runtime& UpdateRuntimeRequest::_internal_runtime() const {
  const ::pipelines::runtime::v1alpha1::Runtime* p = runtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::runtime::v1alpha1::Runtime&>(
      ::pipelines::runtime::v1alpha1::_Runtime_default_instance_);
}
inline const ::pipelines::runtime::v1alpha1::Runtime& UpdateRuntimeRequest::runtime() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.UpdateRuntimeRequest.runtime)
  return _internal_runtime();
}
inline void UpdateRuntimeRequest::unsafe_arena_set_allocated_runtime(
    ::pipelines::runtime::v1alpha1::Runtime* runtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  runtime_ = runtime;
  if (runtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.runtime.v1alpha1.UpdateRuntimeRequest.runtime)
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateRuntimeRequest::release_runtime() {
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateRuntimeRequest::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.UpdateRuntimeRequest.runtime)
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateRuntimeRequest::_internal_mutable_runtime() {
  
  if (runtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime>(GetArenaForAllocation());
    runtime_ = p;
  }
  return runtime_;
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateRuntimeRequest::mutable_runtime() {
  ::pipelines::runtime::v1alpha1::Runtime* _msg = _internal_mutable_runtime();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.UpdateRuntimeRequest.runtime)
  return _msg;
}
inline void UpdateRuntimeRequest::set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  if (runtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime));
    if (message_arena != submessage_arena) {
      runtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime, submessage_arena);
    }
    
  } else {
    
  }
  runtime_ = runtime;
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.UpdateRuntimeRequest.runtime)
}

// -------------------------------------------------------------------

// UpdateRuntimeResponse

// .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
inline bool UpdateRuntimeResponse::_internal_has_runtime() const {
  return this != internal_default_instance() && runtime_ != nullptr;
}
inline bool UpdateRuntimeResponse::has_runtime() const {
  return _internal_has_runtime();
}
inline const ::pipelines::runtime::v1alpha1::Runtime& UpdateRuntimeResponse::_internal_runtime() const {
  const ::pipelines::runtime::v1alpha1::Runtime* p = runtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::runtime::v1alpha1::Runtime&>(
      ::pipelines::runtime::v1alpha1::_Runtime_default_instance_);
}
inline const ::pipelines::runtime::v1alpha1::Runtime& UpdateRuntimeResponse::runtime() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.UpdateRuntimeResponse.runtime)
  return _internal_runtime();
}
inline void UpdateRuntimeResponse::unsafe_arena_set_allocated_runtime(
    ::pipelines::runtime::v1alpha1::Runtime* runtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  runtime_ = runtime;
  if (runtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.runtime.v1alpha1.UpdateRuntimeResponse.runtime)
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateRuntimeResponse::release_runtime() {
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateRuntimeResponse::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.UpdateRuntimeResponse.runtime)
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateRuntimeResponse::_internal_mutable_runtime() {
  
  if (runtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime>(GetArenaForAllocation());
    runtime_ = p;
  }
  return runtime_;
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateRuntimeResponse::mutable_runtime() {
  ::pipelines::runtime::v1alpha1::Runtime* _msg = _internal_mutable_runtime();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.UpdateRuntimeResponse.runtime)
  return _msg;
}
inline void UpdateRuntimeResponse::set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  if (runtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime));
    if (message_arena != submessage_arena) {
      runtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime, submessage_arena);
    }
    
  } else {
    
  }
  runtime_ = runtime;
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.UpdateRuntimeResponse.runtime)
}

// string status = 2 [json_name = "status"];
inline void UpdateRuntimeResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& UpdateRuntimeResponse::status() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.UpdateRuntimeResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateRuntimeResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.UpdateRuntimeResponse.status)
}
inline std::string* UpdateRuntimeResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.UpdateRuntimeResponse.status)
  return _s;
}
inline const std::string& UpdateRuntimeResponse::_internal_status() const {
  return status_.Get();
}
inline void UpdateRuntimeResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateRuntimeResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateRuntimeResponse::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.UpdateRuntimeResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateRuntimeResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.UpdateRuntimeResponse.status)
}

// -------------------------------------------------------------------

// DeleteRuntimeRequest

// string runtime_id = 1 [json_name = "runtimeId"];
inline void DeleteRuntimeRequest::clear_runtime_id() {
  runtime_id_.ClearToEmpty();
}
inline const std::string& DeleteRuntimeRequest::runtime_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.runtime_id)
  return _internal_runtime_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRuntimeRequest::set_runtime_id(ArgT0&& arg0, ArgT... args) {
 
 runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.runtime_id)
}
inline std::string* DeleteRuntimeRequest::mutable_runtime_id() {
  std::string* _s = _internal_mutable_runtime_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.runtime_id)
  return _s;
}
inline const std::string& DeleteRuntimeRequest::_internal_runtime_id() const {
  return runtime_id_.Get();
}
inline void DeleteRuntimeRequest::_internal_set_runtime_id(const std::string& value) {
  
  runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRuntimeRequest::_internal_mutable_runtime_id() {
  
  return runtime_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRuntimeRequest::release_runtime_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.runtime_id)
  return runtime_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRuntimeRequest::set_allocated_runtime_id(std::string* runtime_id) {
  if (runtime_id != nullptr) {
    
  } else {
    
  }
  runtime_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.runtime_id)
}

// -------------------------------------------------------------------

// DeleteRuntimeResponse

// string status = 1 [json_name = "status"];
inline void DeleteRuntimeResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& DeleteRuntimeResponse::status() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.DeleteRuntimeResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRuntimeResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.DeleteRuntimeResponse.status)
}
inline std::string* DeleteRuntimeResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.DeleteRuntimeResponse.status)
  return _s;
}
inline const std::string& DeleteRuntimeResponse::_internal_status() const {
  return status_.Get();
}
inline void DeleteRuntimeResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRuntimeResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRuntimeResponse::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.DeleteRuntimeResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRuntimeResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.DeleteRuntimeResponse.status)
}

// -------------------------------------------------------------------

// GetRuntimeRequest

// string runtime_id = 1 [json_name = "runtimeId"];
inline void GetRuntimeRequest::clear_runtime_id() {
  runtime_id_.ClearToEmpty();
}
inline const std::string& GetRuntimeRequest::runtime_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.GetRuntimeRequest.runtime_id)
  return _internal_runtime_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRuntimeRequest::set_runtime_id(ArgT0&& arg0, ArgT... args) {
 
 runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.GetRuntimeRequest.runtime_id)
}
inline std::string* GetRuntimeRequest::mutable_runtime_id() {
  std::string* _s = _internal_mutable_runtime_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.GetRuntimeRequest.runtime_id)
  return _s;
}
inline const std::string& GetRuntimeRequest::_internal_runtime_id() const {
  return runtime_id_.Get();
}
inline void GetRuntimeRequest::_internal_set_runtime_id(const std::string& value) {
  
  runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetRuntimeRequest::_internal_mutable_runtime_id() {
  
  return runtime_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetRuntimeRequest::release_runtime_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.GetRuntimeRequest.runtime_id)
  return runtime_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetRuntimeRequest::set_allocated_runtime_id(std::string* runtime_id) {
  if (runtime_id != nullptr) {
    
  } else {
    
  }
  runtime_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.GetRuntimeRequest.runtime_id)
}

// -------------------------------------------------------------------

// GetRuntimeResponse

// .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
inline bool GetRuntimeResponse::_internal_has_runtime() const {
  return this != internal_default_instance() && runtime_ != nullptr;
}
inline bool GetRuntimeResponse::has_runtime() const {
  return _internal_has_runtime();
}
inline const ::pipelines::runtime::v1alpha1::Runtime& GetRuntimeResponse::_internal_runtime() const {
  const ::pipelines::runtime::v1alpha1::Runtime* p = runtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::runtime::v1alpha1::Runtime&>(
      ::pipelines::runtime::v1alpha1::_Runtime_default_instance_);
}
inline const ::pipelines::runtime::v1alpha1::Runtime& GetRuntimeResponse::runtime() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.GetRuntimeResponse.runtime)
  return _internal_runtime();
}
inline void GetRuntimeResponse::unsafe_arena_set_allocated_runtime(
    ::pipelines::runtime::v1alpha1::Runtime* runtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  runtime_ = runtime;
  if (runtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.runtime.v1alpha1.GetRuntimeResponse.runtime)
}
inline ::pipelines::runtime::v1alpha1::Runtime* GetRuntimeResponse::release_runtime() {
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* GetRuntimeResponse::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.GetRuntimeResponse.runtime)
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* GetRuntimeResponse::_internal_mutable_runtime() {
  
  if (runtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime>(GetArenaForAllocation());
    runtime_ = p;
  }
  return runtime_;
}
inline ::pipelines::runtime::v1alpha1::Runtime* GetRuntimeResponse::mutable_runtime() {
  ::pipelines::runtime::v1alpha1::Runtime* _msg = _internal_mutable_runtime();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.GetRuntimeResponse.runtime)
  return _msg;
}
inline void GetRuntimeResponse::set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  if (runtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime));
    if (message_arena != submessage_arena) {
      runtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime, submessage_arena);
    }
    
  } else {
    
  }
  runtime_ = runtime;
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.GetRuntimeResponse.runtime)
}

// string status = 2 [json_name = "status"];
inline void GetRuntimeResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& GetRuntimeResponse::status() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.GetRuntimeResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRuntimeResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.GetRuntimeResponse.status)
}
inline std::string* GetRuntimeResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.GetRuntimeResponse.status)
  return _s;
}
inline const std::string& GetRuntimeResponse::_internal_status() const {
  return status_.Get();
}
inline void GetRuntimeResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetRuntimeResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetRuntimeResponse::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.GetRuntimeResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetRuntimeResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.GetRuntimeResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace runtime
}  // namespace pipelines

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto
