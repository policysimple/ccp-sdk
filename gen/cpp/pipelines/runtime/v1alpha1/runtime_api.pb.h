// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipelines/runtime/v1alpha1/runtime_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "pipelines/runtime/v1alpha1/runtime.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[31]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
namespace pipelines {
namespace runtime {
namespace v1alpha1 {
class AlreadyExistsRuntimeRequest;
struct AlreadyExistsRuntimeRequestDefaultTypeInternal;
extern AlreadyExistsRuntimeRequestDefaultTypeInternal _AlreadyExistsRuntimeRequest_default_instance_;
class AlreadyExistsRuntimeRequest_IntegrationEntry_DoNotUse;
struct AlreadyExistsRuntimeRequest_IntegrationEntry_DoNotUseDefaultTypeInternal;
extern AlreadyExistsRuntimeRequest_IntegrationEntry_DoNotUseDefaultTypeInternal _AlreadyExistsRuntimeRequest_IntegrationEntry_DoNotUse_default_instance_;
class AlreadyExistsRuntimeResponse;
struct AlreadyExistsRuntimeResponseDefaultTypeInternal;
extern AlreadyExistsRuntimeResponseDefaultTypeInternal _AlreadyExistsRuntimeResponse_default_instance_;
class ChangeStatusRuntimeAndApplicationRequest;
struct ChangeStatusRuntimeAndApplicationRequestDefaultTypeInternal;
extern ChangeStatusRuntimeAndApplicationRequestDefaultTypeInternal _ChangeStatusRuntimeAndApplicationRequest_default_instance_;
class ChangeStatusRuntimeAndApplicationResponse;
struct ChangeStatusRuntimeAndApplicationResponseDefaultTypeInternal;
extern ChangeStatusRuntimeAndApplicationResponseDefaultTypeInternal _ChangeStatusRuntimeAndApplicationResponse_default_instance_;
class CreateRuntimeRequest;
struct CreateRuntimeRequestDefaultTypeInternal;
extern CreateRuntimeRequestDefaultTypeInternal _CreateRuntimeRequest_default_instance_;
class CreateRuntimeResponse;
struct CreateRuntimeResponseDefaultTypeInternal;
extern CreateRuntimeResponseDefaultTypeInternal _CreateRuntimeResponse_default_instance_;
class DeleteRuntimeRequest;
struct DeleteRuntimeRequestDefaultTypeInternal;
extern DeleteRuntimeRequestDefaultTypeInternal _DeleteRuntimeRequest_default_instance_;
class DeleteRuntimeResponse;
struct DeleteRuntimeResponseDefaultTypeInternal;
extern DeleteRuntimeResponseDefaultTypeInternal _DeleteRuntimeResponse_default_instance_;
class DeleteRuntimesByApplicationRequest;
struct DeleteRuntimesByApplicationRequestDefaultTypeInternal;
extern DeleteRuntimesByApplicationRequestDefaultTypeInternal _DeleteRuntimesByApplicationRequest_default_instance_;
class DeleteRuntimesByApplicationResponse;
struct DeleteRuntimesByApplicationResponseDefaultTypeInternal;
extern DeleteRuntimesByApplicationResponseDefaultTypeInternal _DeleteRuntimesByApplicationResponse_default_instance_;
class DeleteRuntimesByEnvironmentRequest;
struct DeleteRuntimesByEnvironmentRequestDefaultTypeInternal;
extern DeleteRuntimesByEnvironmentRequestDefaultTypeInternal _DeleteRuntimesByEnvironmentRequest_default_instance_;
class DeleteRuntimesByEnvironmentResponse;
struct DeleteRuntimesByEnvironmentResponseDefaultTypeInternal;
extern DeleteRuntimesByEnvironmentResponseDefaultTypeInternal _DeleteRuntimesByEnvironmentResponse_default_instance_;
class GetRuntimeRequest;
struct GetRuntimeRequestDefaultTypeInternal;
extern GetRuntimeRequestDefaultTypeInternal _GetRuntimeRequest_default_instance_;
class GetRuntimeResponse;
struct GetRuntimeResponseDefaultTypeInternal;
extern GetRuntimeResponseDefaultTypeInternal _GetRuntimeResponse_default_instance_;
class GetRuntimesByApplicationRequest;
struct GetRuntimesByApplicationRequestDefaultTypeInternal;
extern GetRuntimesByApplicationRequestDefaultTypeInternal _GetRuntimesByApplicationRequest_default_instance_;
class GetRuntimesByApplicationResponse;
struct GetRuntimesByApplicationResponseDefaultTypeInternal;
extern GetRuntimesByApplicationResponseDefaultTypeInternal _GetRuntimesByApplicationResponse_default_instance_;
class GetRuntimesInLast24HoursRequest;
struct GetRuntimesInLast24HoursRequestDefaultTypeInternal;
extern GetRuntimesInLast24HoursRequestDefaultTypeInternal _GetRuntimesInLast24HoursRequest_default_instance_;
class GetRuntimesInLast24HoursResponse;
struct GetRuntimesInLast24HoursResponseDefaultTypeInternal;
extern GetRuntimesInLast24HoursResponseDefaultTypeInternal _GetRuntimesInLast24HoursResponse_default_instance_;
class ListRuntimesRequest;
struct ListRuntimesRequestDefaultTypeInternal;
extern ListRuntimesRequestDefaultTypeInternal _ListRuntimesRequest_default_instance_;
class ListRuntimesResponse;
struct ListRuntimesResponseDefaultTypeInternal;
extern ListRuntimesResponseDefaultTypeInternal _ListRuntimesResponse_default_instance_;
class RebuildRuntimeRequest;
struct RebuildRuntimeRequestDefaultTypeInternal;
extern RebuildRuntimeRequestDefaultTypeInternal _RebuildRuntimeRequest_default_instance_;
class RebuildRuntimeResponse;
struct RebuildRuntimeResponseDefaultTypeInternal;
extern RebuildRuntimeResponseDefaultTypeInternal _RebuildRuntimeResponse_default_instance_;
class ResponseMessageDeleteRuntimeByAppIdRequest;
struct ResponseMessageDeleteRuntimeByAppIdRequestDefaultTypeInternal;
extern ResponseMessageDeleteRuntimeByAppIdRequestDefaultTypeInternal _ResponseMessageDeleteRuntimeByAppIdRequest_default_instance_;
class ResponseMessageDeleteRuntimeByAppIdResponse;
struct ResponseMessageDeleteRuntimeByAppIdResponseDefaultTypeInternal;
extern ResponseMessageDeleteRuntimeByAppIdResponseDefaultTypeInternal _ResponseMessageDeleteRuntimeByAppIdResponse_default_instance_;
class UpdateApplicationChangesRequest;
struct UpdateApplicationChangesRequestDefaultTypeInternal;
extern UpdateApplicationChangesRequestDefaultTypeInternal _UpdateApplicationChangesRequest_default_instance_;
class UpdateApplicationChangesResponse;
struct UpdateApplicationChangesResponseDefaultTypeInternal;
extern UpdateApplicationChangesResponseDefaultTypeInternal _UpdateApplicationChangesResponse_default_instance_;
class UpdateResponseMessageRuntimeRequest;
struct UpdateResponseMessageRuntimeRequestDefaultTypeInternal;
extern UpdateResponseMessageRuntimeRequestDefaultTypeInternal _UpdateResponseMessageRuntimeRequest_default_instance_;
class UpdateResponseMessageRuntimeResponse;
struct UpdateResponseMessageRuntimeResponseDefaultTypeInternal;
extern UpdateResponseMessageRuntimeResponseDefaultTypeInternal _UpdateResponseMessageRuntimeResponse_default_instance_;
class UpdateRuntimeRequest;
struct UpdateRuntimeRequestDefaultTypeInternal;
extern UpdateRuntimeRequestDefaultTypeInternal _UpdateRuntimeRequest_default_instance_;
class UpdateRuntimeResponse;
struct UpdateRuntimeResponseDefaultTypeInternal;
extern UpdateRuntimeResponseDefaultTypeInternal _UpdateRuntimeResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace runtime
}  // namespace pipelines
PROTOBUF_NAMESPACE_OPEN
template<> ::pipelines::runtime::v1alpha1::AlreadyExistsRuntimeRequest* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::AlreadyExistsRuntimeRequest>(Arena*);
template<> ::pipelines::runtime::v1alpha1::AlreadyExistsRuntimeRequest_IntegrationEntry_DoNotUse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::AlreadyExistsRuntimeRequest_IntegrationEntry_DoNotUse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::AlreadyExistsRuntimeResponse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::AlreadyExistsRuntimeResponse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::ChangeStatusRuntimeAndApplicationRequest* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::ChangeStatusRuntimeAndApplicationRequest>(Arena*);
template<> ::pipelines::runtime::v1alpha1::ChangeStatusRuntimeAndApplicationResponse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::ChangeStatusRuntimeAndApplicationResponse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::CreateRuntimeRequest* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::CreateRuntimeRequest>(Arena*);
template<> ::pipelines::runtime::v1alpha1::CreateRuntimeResponse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::CreateRuntimeResponse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::DeleteRuntimeRequest* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::DeleteRuntimeRequest>(Arena*);
template<> ::pipelines::runtime::v1alpha1::DeleteRuntimeResponse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::DeleteRuntimeResponse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::DeleteRuntimesByApplicationRequest* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::DeleteRuntimesByApplicationRequest>(Arena*);
template<> ::pipelines::runtime::v1alpha1::DeleteRuntimesByApplicationResponse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::DeleteRuntimesByApplicationResponse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::DeleteRuntimesByEnvironmentRequest* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::DeleteRuntimesByEnvironmentRequest>(Arena*);
template<> ::pipelines::runtime::v1alpha1::DeleteRuntimesByEnvironmentResponse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::DeleteRuntimesByEnvironmentResponse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::GetRuntimeRequest* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::GetRuntimeRequest>(Arena*);
template<> ::pipelines::runtime::v1alpha1::GetRuntimeResponse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::GetRuntimeResponse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::GetRuntimesByApplicationRequest* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::GetRuntimesByApplicationRequest>(Arena*);
template<> ::pipelines::runtime::v1alpha1::GetRuntimesByApplicationResponse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::GetRuntimesByApplicationResponse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::GetRuntimesInLast24HoursRequest* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::GetRuntimesInLast24HoursRequest>(Arena*);
template<> ::pipelines::runtime::v1alpha1::GetRuntimesInLast24HoursResponse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::GetRuntimesInLast24HoursResponse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::ListRuntimesRequest* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::ListRuntimesRequest>(Arena*);
template<> ::pipelines::runtime::v1alpha1::ListRuntimesResponse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::ListRuntimesResponse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::RebuildRuntimeRequest* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::RebuildRuntimeRequest>(Arena*);
template<> ::pipelines::runtime::v1alpha1::RebuildRuntimeResponse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::RebuildRuntimeResponse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::ResponseMessageDeleteRuntimeByAppIdRequest* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::ResponseMessageDeleteRuntimeByAppIdRequest>(Arena*);
template<> ::pipelines::runtime::v1alpha1::ResponseMessageDeleteRuntimeByAppIdResponse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::ResponseMessageDeleteRuntimeByAppIdResponse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::UpdateApplicationChangesRequest* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::UpdateApplicationChangesRequest>(Arena*);
template<> ::pipelines::runtime::v1alpha1::UpdateApplicationChangesResponse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::UpdateApplicationChangesResponse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::UpdateResponseMessageRuntimeRequest* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::UpdateResponseMessageRuntimeRequest>(Arena*);
template<> ::pipelines::runtime::v1alpha1::UpdateResponseMessageRuntimeResponse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::UpdateResponseMessageRuntimeResponse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::UpdateRuntimeRequest* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::UpdateRuntimeRequest>(Arena*);
template<> ::pipelines::runtime::v1alpha1::UpdateRuntimeResponse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::UpdateRuntimeResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pipelines {
namespace runtime {
namespace v1alpha1 {

// ===================================================================

class CreateRuntimeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.CreateRuntimeRequest) */ {
 public:
  inline CreateRuntimeRequest() : CreateRuntimeRequest(nullptr) {}
  ~CreateRuntimeRequest() override;
  explicit constexpr CreateRuntimeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRuntimeRequest(const CreateRuntimeRequest& from);
  CreateRuntimeRequest(CreateRuntimeRequest&& from) noexcept
    : CreateRuntimeRequest() {
    *this = ::std::move(from);
  }

  inline CreateRuntimeRequest& operator=(const CreateRuntimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRuntimeRequest& operator=(CreateRuntimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRuntimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRuntimeRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRuntimeRequest*>(
               &_CreateRuntimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateRuntimeRequest& a, CreateRuntimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRuntimeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRuntimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRuntimeRequest* New() const final {
    return new CreateRuntimeRequest();
  }

  CreateRuntimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRuntimeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRuntimeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRuntimeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRuntimeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.CreateRuntimeRequest";
  }
  protected:
  explicit CreateRuntimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kRuntimeFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string user_id = 3 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
  bool has_runtime() const;
  private:
  bool _internal_has_runtime() const;
  public:
  void clear_runtime();
  const ::pipelines::runtime::v1alpha1::Runtime& runtime() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::runtime::v1alpha1::Runtime* release_runtime();
  ::pipelines::runtime::v1alpha1::Runtime* mutable_runtime();
  void set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime);
  private:
  const ::pipelines::runtime::v1alpha1::Runtime& _internal_runtime() const;
  ::pipelines::runtime::v1alpha1::Runtime* _internal_mutable_runtime();
  public:
  void unsafe_arena_set_allocated_runtime(
      ::pipelines::runtime::v1alpha1::Runtime* runtime);
  ::pipelines::runtime::v1alpha1::Runtime* unsafe_arena_release_runtime();

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.CreateRuntimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::pipelines::runtime::v1alpha1::Runtime* runtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateRuntimeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.CreateRuntimeResponse) */ {
 public:
  inline CreateRuntimeResponse() : CreateRuntimeResponse(nullptr) {}
  ~CreateRuntimeResponse() override;
  explicit constexpr CreateRuntimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRuntimeResponse(const CreateRuntimeResponse& from);
  CreateRuntimeResponse(CreateRuntimeResponse&& from) noexcept
    : CreateRuntimeResponse() {
    *this = ::std::move(from);
  }

  inline CreateRuntimeResponse& operator=(const CreateRuntimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRuntimeResponse& operator=(CreateRuntimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRuntimeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRuntimeResponse* internal_default_instance() {
    return reinterpret_cast<const CreateRuntimeResponse*>(
               &_CreateRuntimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateRuntimeResponse& a, CreateRuntimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRuntimeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRuntimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateRuntimeResponse* New() const final {
    return new CreateRuntimeResponse();
  }

  CreateRuntimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateRuntimeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRuntimeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateRuntimeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRuntimeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.CreateRuntimeResponse";
  }
  protected:
  explicit CreateRuntimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kRuntimeFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
  bool has_runtime() const;
  private:
  bool _internal_has_runtime() const;
  public:
  void clear_runtime();
  const ::pipelines::runtime::v1alpha1::Runtime& runtime() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::runtime::v1alpha1::Runtime* release_runtime();
  ::pipelines::runtime::v1alpha1::Runtime* mutable_runtime();
  void set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime);
  private:
  const ::pipelines::runtime::v1alpha1::Runtime& _internal_runtime() const;
  ::pipelines::runtime::v1alpha1::Runtime* _internal_mutable_runtime();
  public:
  void unsafe_arena_set_allocated_runtime(
      ::pipelines::runtime::v1alpha1::Runtime* runtime);
  ::pipelines::runtime::v1alpha1::Runtime* unsafe_arena_release_runtime();

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.CreateRuntimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::pipelines::runtime::v1alpha1::Runtime* runtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UpdateRuntimeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.UpdateRuntimeRequest) */ {
 public:
  inline UpdateRuntimeRequest() : UpdateRuntimeRequest(nullptr) {}
  ~UpdateRuntimeRequest() override;
  explicit constexpr UpdateRuntimeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRuntimeRequest(const UpdateRuntimeRequest& from);
  UpdateRuntimeRequest(UpdateRuntimeRequest&& from) noexcept
    : UpdateRuntimeRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRuntimeRequest& operator=(const UpdateRuntimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRuntimeRequest& operator=(UpdateRuntimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRuntimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRuntimeRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRuntimeRequest*>(
               &_UpdateRuntimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(UpdateRuntimeRequest& a, UpdateRuntimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRuntimeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRuntimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateRuntimeRequest* New() const final {
    return new UpdateRuntimeRequest();
  }

  UpdateRuntimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRuntimeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRuntimeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateRuntimeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRuntimeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.UpdateRuntimeRequest";
  }
  protected:
  explicit UpdateRuntimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kUserIdFieldNumber = 3,
    kRuntimeFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // string user_id = 3 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
  bool has_runtime() const;
  private:
  bool _internal_has_runtime() const;
  public:
  void clear_runtime();
  const ::pipelines::runtime::v1alpha1::Runtime& runtime() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::runtime::v1alpha1::Runtime* release_runtime();
  ::pipelines::runtime::v1alpha1::Runtime* mutable_runtime();
  void set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime);
  private:
  const ::pipelines::runtime::v1alpha1::Runtime& _internal_runtime() const;
  ::pipelines::runtime::v1alpha1::Runtime* _internal_mutable_runtime();
  public:
  void unsafe_arena_set_allocated_runtime(
      ::pipelines::runtime::v1alpha1::Runtime* runtime);
  ::pipelines::runtime::v1alpha1::Runtime* unsafe_arena_release_runtime();

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.UpdateRuntimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::pipelines::runtime::v1alpha1::Runtime* runtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UpdateRuntimeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.UpdateRuntimeResponse) */ {
 public:
  inline UpdateRuntimeResponse() : UpdateRuntimeResponse(nullptr) {}
  ~UpdateRuntimeResponse() override;
  explicit constexpr UpdateRuntimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRuntimeResponse(const UpdateRuntimeResponse& from);
  UpdateRuntimeResponse(UpdateRuntimeResponse&& from) noexcept
    : UpdateRuntimeResponse() {
    *this = ::std::move(from);
  }

  inline UpdateRuntimeResponse& operator=(const UpdateRuntimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRuntimeResponse& operator=(UpdateRuntimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRuntimeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRuntimeResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateRuntimeResponse*>(
               &_UpdateRuntimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(UpdateRuntimeResponse& a, UpdateRuntimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRuntimeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRuntimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateRuntimeResponse* New() const final {
    return new UpdateRuntimeResponse();
  }

  UpdateRuntimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateRuntimeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRuntimeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateRuntimeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRuntimeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.UpdateRuntimeResponse";
  }
  protected:
  explicit UpdateRuntimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kRuntimeFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
  bool has_runtime() const;
  private:
  bool _internal_has_runtime() const;
  public:
  void clear_runtime();
  const ::pipelines::runtime::v1alpha1::Runtime& runtime() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::runtime::v1alpha1::Runtime* release_runtime();
  ::pipelines::runtime::v1alpha1::Runtime* mutable_runtime();
  void set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime);
  private:
  const ::pipelines::runtime::v1alpha1::Runtime& _internal_runtime() const;
  ::pipelines::runtime::v1alpha1::Runtime* _internal_mutable_runtime();
  public:
  void unsafe_arena_set_allocated_runtime(
      ::pipelines::runtime::v1alpha1::Runtime* runtime);
  ::pipelines::runtime::v1alpha1::Runtime* unsafe_arena_release_runtime();

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.UpdateRuntimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::pipelines::runtime::v1alpha1::Runtime* runtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UpdateResponseMessageRuntimeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeRequest) */ {
 public:
  inline UpdateResponseMessageRuntimeRequest() : UpdateResponseMessageRuntimeRequest(nullptr) {}
  ~UpdateResponseMessageRuntimeRequest() override;
  explicit constexpr UpdateResponseMessageRuntimeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateResponseMessageRuntimeRequest(const UpdateResponseMessageRuntimeRequest& from);
  UpdateResponseMessageRuntimeRequest(UpdateResponseMessageRuntimeRequest&& from) noexcept
    : UpdateResponseMessageRuntimeRequest() {
    *this = ::std::move(from);
  }

  inline UpdateResponseMessageRuntimeRequest& operator=(const UpdateResponseMessageRuntimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateResponseMessageRuntimeRequest& operator=(UpdateResponseMessageRuntimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateResponseMessageRuntimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateResponseMessageRuntimeRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateResponseMessageRuntimeRequest*>(
               &_UpdateResponseMessageRuntimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpdateResponseMessageRuntimeRequest& a, UpdateResponseMessageRuntimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateResponseMessageRuntimeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateResponseMessageRuntimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateResponseMessageRuntimeRequest* New() const final {
    return new UpdateResponseMessageRuntimeRequest();
  }

  UpdateResponseMessageRuntimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateResponseMessageRuntimeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateResponseMessageRuntimeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateResponseMessageRuntimeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateResponseMessageRuntimeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeRequest";
  }
  protected:
  explicit UpdateResponseMessageRuntimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kRuntimeFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
  bool has_runtime() const;
  private:
  bool _internal_has_runtime() const;
  public:
  void clear_runtime();
  const ::pipelines::runtime::v1alpha1::Runtime& runtime() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::runtime::v1alpha1::Runtime* release_runtime();
  ::pipelines::runtime::v1alpha1::Runtime* mutable_runtime();
  void set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime);
  private:
  const ::pipelines::runtime::v1alpha1::Runtime& _internal_runtime() const;
  ::pipelines::runtime::v1alpha1::Runtime* _internal_mutable_runtime();
  public:
  void unsafe_arena_set_allocated_runtime(
      ::pipelines::runtime::v1alpha1::Runtime* runtime);
  ::pipelines::runtime::v1alpha1::Runtime* unsafe_arena_release_runtime();

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::pipelines::runtime::v1alpha1::Runtime* runtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UpdateResponseMessageRuntimeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeResponse) */ {
 public:
  inline UpdateResponseMessageRuntimeResponse() : UpdateResponseMessageRuntimeResponse(nullptr) {}
  ~UpdateResponseMessageRuntimeResponse() override;
  explicit constexpr UpdateResponseMessageRuntimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateResponseMessageRuntimeResponse(const UpdateResponseMessageRuntimeResponse& from);
  UpdateResponseMessageRuntimeResponse(UpdateResponseMessageRuntimeResponse&& from) noexcept
    : UpdateResponseMessageRuntimeResponse() {
    *this = ::std::move(from);
  }

  inline UpdateResponseMessageRuntimeResponse& operator=(const UpdateResponseMessageRuntimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateResponseMessageRuntimeResponse& operator=(UpdateResponseMessageRuntimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateResponseMessageRuntimeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateResponseMessageRuntimeResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateResponseMessageRuntimeResponse*>(
               &_UpdateResponseMessageRuntimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpdateResponseMessageRuntimeResponse& a, UpdateResponseMessageRuntimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateResponseMessageRuntimeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateResponseMessageRuntimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateResponseMessageRuntimeResponse* New() const final {
    return new UpdateResponseMessageRuntimeResponse();
  }

  UpdateResponseMessageRuntimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateResponseMessageRuntimeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateResponseMessageRuntimeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateResponseMessageRuntimeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateResponseMessageRuntimeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeResponse";
  }
  protected:
  explicit UpdateResponseMessageRuntimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kRuntimeFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
  bool has_runtime() const;
  private:
  bool _internal_has_runtime() const;
  public:
  void clear_runtime();
  const ::pipelines::runtime::v1alpha1::Runtime& runtime() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::runtime::v1alpha1::Runtime* release_runtime();
  ::pipelines::runtime::v1alpha1::Runtime* mutable_runtime();
  void set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime);
  private:
  const ::pipelines::runtime::v1alpha1::Runtime& _internal_runtime() const;
  ::pipelines::runtime::v1alpha1::Runtime* _internal_mutable_runtime();
  public:
  void unsafe_arena_set_allocated_runtime(
      ::pipelines::runtime::v1alpha1::Runtime* runtime);
  ::pipelines::runtime::v1alpha1::Runtime* unsafe_arena_release_runtime();

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::pipelines::runtime::v1alpha1::Runtime* runtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteRuntimeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.DeleteRuntimeRequest) */ {
 public:
  inline DeleteRuntimeRequest() : DeleteRuntimeRequest(nullptr) {}
  ~DeleteRuntimeRequest() override;
  explicit constexpr DeleteRuntimeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRuntimeRequest(const DeleteRuntimeRequest& from);
  DeleteRuntimeRequest(DeleteRuntimeRequest&& from) noexcept
    : DeleteRuntimeRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRuntimeRequest& operator=(const DeleteRuntimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRuntimeRequest& operator=(DeleteRuntimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRuntimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRuntimeRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRuntimeRequest*>(
               &_DeleteRuntimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DeleteRuntimeRequest& a, DeleteRuntimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRuntimeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRuntimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRuntimeRequest* New() const final {
    return new DeleteRuntimeRequest();
  }

  DeleteRuntimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRuntimeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRuntimeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRuntimeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRuntimeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.DeleteRuntimeRequest";
  }
  protected:
  explicit DeleteRuntimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuntimeIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kIntegrationFieldNumber = 3,
    kProjectIdFieldNumber = 4,
    kOrganizationIdFieldNumber = 5,
    kUserIdFieldNumber = 6,
  };
  // string runtime_id = 1 [json_name = "runtimeId"];
  void clear_runtime_id();
  const std::string& runtime_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_runtime_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_runtime_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_runtime_id();
  void set_allocated_runtime_id(std::string* runtime_id);
  private:
  const std::string& _internal_runtime_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_runtime_id(const std::string& value);
  std::string* _internal_mutable_runtime_id();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string integration = 3 [json_name = "integration"];
  void clear_integration();
  const std::string& integration() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_integration(ArgT0&& arg0, ArgT... args);
  std::string* mutable_integration();
  PROTOBUF_MUST_USE_RESULT std::string* release_integration();
  void set_allocated_integration(std::string* integration);
  private:
  const std::string& _internal_integration() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_integration(const std::string& value);
  std::string* _internal_mutable_integration();
  public:

  // string project_id = 4 [json_name = "projectId"];
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // string organization_id = 5 [json_name = "organizationId"];
  void clear_organization_id();
  const std::string& organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_organization_id();
  void set_allocated_organization_id(std::string* organization_id);
  private:
  const std::string& _internal_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_id(const std::string& value);
  std::string* _internal_mutable_organization_id();
  public:

  // string user_id = 6 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.DeleteRuntimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr integration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteRuntimeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.DeleteRuntimeResponse) */ {
 public:
  inline DeleteRuntimeResponse() : DeleteRuntimeResponse(nullptr) {}
  ~DeleteRuntimeResponse() override;
  explicit constexpr DeleteRuntimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRuntimeResponse(const DeleteRuntimeResponse& from);
  DeleteRuntimeResponse(DeleteRuntimeResponse&& from) noexcept
    : DeleteRuntimeResponse() {
    *this = ::std::move(from);
  }

  inline DeleteRuntimeResponse& operator=(const DeleteRuntimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRuntimeResponse& operator=(DeleteRuntimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRuntimeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRuntimeResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteRuntimeResponse*>(
               &_DeleteRuntimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DeleteRuntimeResponse& a, DeleteRuntimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRuntimeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRuntimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRuntimeResponse* New() const final {
    return new DeleteRuntimeResponse();
  }

  DeleteRuntimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRuntimeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRuntimeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRuntimeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRuntimeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.DeleteRuntimeResponse";
  }
  protected:
  explicit DeleteRuntimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.DeleteRuntimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteRuntimesByApplicationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest) */ {
 public:
  inline DeleteRuntimesByApplicationRequest() : DeleteRuntimesByApplicationRequest(nullptr) {}
  ~DeleteRuntimesByApplicationRequest() override;
  explicit constexpr DeleteRuntimesByApplicationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRuntimesByApplicationRequest(const DeleteRuntimesByApplicationRequest& from);
  DeleteRuntimesByApplicationRequest(DeleteRuntimesByApplicationRequest&& from) noexcept
    : DeleteRuntimesByApplicationRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRuntimesByApplicationRequest& operator=(const DeleteRuntimesByApplicationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRuntimesByApplicationRequest& operator=(DeleteRuntimesByApplicationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRuntimesByApplicationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRuntimesByApplicationRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRuntimesByApplicationRequest*>(
               &_DeleteRuntimesByApplicationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DeleteRuntimesByApplicationRequest& a, DeleteRuntimesByApplicationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRuntimesByApplicationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRuntimesByApplicationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRuntimesByApplicationRequest* New() const final {
    return new DeleteRuntimesByApplicationRequest();
  }

  DeleteRuntimesByApplicationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRuntimesByApplicationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRuntimesByApplicationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRuntimesByApplicationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRuntimesByApplicationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest";
  }
  protected:
  explicit DeleteRuntimesByApplicationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationIdFieldNumber = 1,
    kNameApplicationFieldNumber = 2,
    kIntegrationIdFieldNumber = 3,
    kProjectIdFieldNumber = 4,
    kOrganizationIdFieldNumber = 5,
  };
  // string application_id = 1 [json_name = "applicationId"];
  void clear_application_id();
  const std::string& application_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_application_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_application_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_application_id();
  void set_allocated_application_id(std::string* application_id);
  private:
  const std::string& _internal_application_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_id(const std::string& value);
  std::string* _internal_mutable_application_id();
  public:

  // string name_application = 2 [json_name = "nameApplication"];
  void clear_name_application();
  const std::string& name_application() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_application(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_application();
  PROTOBUF_MUST_USE_RESULT std::string* release_name_application();
  void set_allocated_name_application(std::string* name_application);
  private:
  const std::string& _internal_name_application() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_application(const std::string& value);
  std::string* _internal_mutable_name_application();
  public:

  // string integration_id = 3 [json_name = "integrationId"];
  void clear_integration_id();
  const std::string& integration_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_integration_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_integration_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_integration_id();
  void set_allocated_integration_id(std::string* integration_id);
  private:
  const std::string& _internal_integration_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_integration_id(const std::string& value);
  std::string* _internal_mutable_integration_id();
  public:

  // string project_id = 4 [json_name = "projectId"];
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // string organization_id = 5 [json_name = "organizationId"];
  void clear_organization_id();
  const std::string& organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_organization_id();
  void set_allocated_organization_id(std::string* organization_id);
  private:
  const std::string& _internal_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_id(const std::string& value);
  std::string* _internal_mutable_organization_id();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_application_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr integration_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteRuntimesByApplicationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationResponse) */ {
 public:
  inline DeleteRuntimesByApplicationResponse() : DeleteRuntimesByApplicationResponse(nullptr) {}
  ~DeleteRuntimesByApplicationResponse() override;
  explicit constexpr DeleteRuntimesByApplicationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRuntimesByApplicationResponse(const DeleteRuntimesByApplicationResponse& from);
  DeleteRuntimesByApplicationResponse(DeleteRuntimesByApplicationResponse&& from) noexcept
    : DeleteRuntimesByApplicationResponse() {
    *this = ::std::move(from);
  }

  inline DeleteRuntimesByApplicationResponse& operator=(const DeleteRuntimesByApplicationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRuntimesByApplicationResponse& operator=(DeleteRuntimesByApplicationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRuntimesByApplicationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRuntimesByApplicationResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteRuntimesByApplicationResponse*>(
               &_DeleteRuntimesByApplicationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeleteRuntimesByApplicationResponse& a, DeleteRuntimesByApplicationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRuntimesByApplicationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRuntimesByApplicationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRuntimesByApplicationResponse* New() const final {
    return new DeleteRuntimesByApplicationResponse();
  }

  DeleteRuntimesByApplicationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRuntimesByApplicationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRuntimesByApplicationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRuntimesByApplicationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRuntimesByApplicationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationResponse";
  }
  protected:
  explicit DeleteRuntimesByApplicationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteRuntimesByEnvironmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentRequest) */ {
 public:
  inline DeleteRuntimesByEnvironmentRequest() : DeleteRuntimesByEnvironmentRequest(nullptr) {}
  ~DeleteRuntimesByEnvironmentRequest() override;
  explicit constexpr DeleteRuntimesByEnvironmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRuntimesByEnvironmentRequest(const DeleteRuntimesByEnvironmentRequest& from);
  DeleteRuntimesByEnvironmentRequest(DeleteRuntimesByEnvironmentRequest&& from) noexcept
    : DeleteRuntimesByEnvironmentRequest() {
    *this = ::std::move(from);
  }

  inline DeleteRuntimesByEnvironmentRequest& operator=(const DeleteRuntimesByEnvironmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRuntimesByEnvironmentRequest& operator=(DeleteRuntimesByEnvironmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRuntimesByEnvironmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRuntimesByEnvironmentRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteRuntimesByEnvironmentRequest*>(
               &_DeleteRuntimesByEnvironmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(DeleteRuntimesByEnvironmentRequest& a, DeleteRuntimesByEnvironmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRuntimesByEnvironmentRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRuntimesByEnvironmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRuntimesByEnvironmentRequest* New() const final {
    return new DeleteRuntimesByEnvironmentRequest();
  }

  DeleteRuntimesByEnvironmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRuntimesByEnvironmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRuntimesByEnvironmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRuntimesByEnvironmentRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRuntimesByEnvironmentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentRequest";
  }
  protected:
  explicit DeleteRuntimesByEnvironmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnvironmentIdFieldNumber = 1,
    kUserIdFieldNumber = 2,
  };
  // string environment_id = 1 [json_name = "environmentId"];
  void clear_environment_id();
  const std::string& environment_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_environment_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_environment_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_environment_id();
  void set_allocated_environment_id(std::string* environment_id);
  private:
  const std::string& _internal_environment_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_environment_id(const std::string& value);
  std::string* _internal_mutable_environment_id();
  public:

  // string user_id = 2 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr environment_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class DeleteRuntimesByEnvironmentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentResponse) */ {
 public:
  inline DeleteRuntimesByEnvironmentResponse() : DeleteRuntimesByEnvironmentResponse(nullptr) {}
  ~DeleteRuntimesByEnvironmentResponse() override;
  explicit constexpr DeleteRuntimesByEnvironmentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeleteRuntimesByEnvironmentResponse(const DeleteRuntimesByEnvironmentResponse& from);
  DeleteRuntimesByEnvironmentResponse(DeleteRuntimesByEnvironmentResponse&& from) noexcept
    : DeleteRuntimesByEnvironmentResponse() {
    *this = ::std::move(from);
  }

  inline DeleteRuntimesByEnvironmentResponse& operator=(const DeleteRuntimesByEnvironmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeleteRuntimesByEnvironmentResponse& operator=(DeleteRuntimesByEnvironmentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeleteRuntimesByEnvironmentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeleteRuntimesByEnvironmentResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteRuntimesByEnvironmentResponse*>(
               &_DeleteRuntimesByEnvironmentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DeleteRuntimesByEnvironmentResponse& a, DeleteRuntimesByEnvironmentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DeleteRuntimesByEnvironmentResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeleteRuntimesByEnvironmentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeleteRuntimesByEnvironmentResponse* New() const final {
    return new DeleteRuntimesByEnvironmentResponse();
  }

  DeleteRuntimesByEnvironmentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeleteRuntimesByEnvironmentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const DeleteRuntimesByEnvironmentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const DeleteRuntimesByEnvironmentResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteRuntimesByEnvironmentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentResponse";
  }
  protected:
  explicit DeleteRuntimesByEnvironmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetRuntimeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.GetRuntimeRequest) */ {
 public:
  inline GetRuntimeRequest() : GetRuntimeRequest(nullptr) {}
  ~GetRuntimeRequest() override;
  explicit constexpr GetRuntimeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRuntimeRequest(const GetRuntimeRequest& from);
  GetRuntimeRequest(GetRuntimeRequest&& from) noexcept
    : GetRuntimeRequest() {
    *this = ::std::move(from);
  }

  inline GetRuntimeRequest& operator=(const GetRuntimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRuntimeRequest& operator=(GetRuntimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRuntimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRuntimeRequest* internal_default_instance() {
    return reinterpret_cast<const GetRuntimeRequest*>(
               &_GetRuntimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(GetRuntimeRequest& a, GetRuntimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRuntimeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRuntimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRuntimeRequest* New() const final {
    return new GetRuntimeRequest();
  }

  GetRuntimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRuntimeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRuntimeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRuntimeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRuntimeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.GetRuntimeRequest";
  }
  protected:
  explicit GetRuntimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRuntimeIdFieldNumber = 1,
  };
  // string runtime_id = 1 [json_name = "runtimeId"];
  void clear_runtime_id();
  const std::string& runtime_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_runtime_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_runtime_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_runtime_id();
  void set_allocated_runtime_id(std::string* runtime_id);
  private:
  const std::string& _internal_runtime_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_runtime_id(const std::string& value);
  std::string* _internal_mutable_runtime_id();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.GetRuntimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetRuntimeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.GetRuntimeResponse) */ {
 public:
  inline GetRuntimeResponse() : GetRuntimeResponse(nullptr) {}
  ~GetRuntimeResponse() override;
  explicit constexpr GetRuntimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRuntimeResponse(const GetRuntimeResponse& from);
  GetRuntimeResponse(GetRuntimeResponse&& from) noexcept
    : GetRuntimeResponse() {
    *this = ::std::move(from);
  }

  inline GetRuntimeResponse& operator=(const GetRuntimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRuntimeResponse& operator=(GetRuntimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRuntimeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRuntimeResponse* internal_default_instance() {
    return reinterpret_cast<const GetRuntimeResponse*>(
               &_GetRuntimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(GetRuntimeResponse& a, GetRuntimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRuntimeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRuntimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRuntimeResponse* New() const final {
    return new GetRuntimeResponse();
  }

  GetRuntimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRuntimeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRuntimeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRuntimeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRuntimeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.GetRuntimeResponse";
  }
  protected:
  explicit GetRuntimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kRuntimeFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
  bool has_runtime() const;
  private:
  bool _internal_has_runtime() const;
  public:
  void clear_runtime();
  const ::pipelines::runtime::v1alpha1::Runtime& runtime() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::runtime::v1alpha1::Runtime* release_runtime();
  ::pipelines::runtime::v1alpha1::Runtime* mutable_runtime();
  void set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime);
  private:
  const ::pipelines::runtime::v1alpha1::Runtime& _internal_runtime() const;
  ::pipelines::runtime::v1alpha1::Runtime* _internal_mutable_runtime();
  public:
  void unsafe_arena_set_allocated_runtime(
      ::pipelines::runtime::v1alpha1::Runtime* runtime);
  ::pipelines::runtime::v1alpha1::Runtime* unsafe_arena_release_runtime();

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.GetRuntimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::pipelines::runtime::v1alpha1::Runtime* runtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ListRuntimesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.ListRuntimesRequest) */ {
 public:
  inline ListRuntimesRequest() : ListRuntimesRequest(nullptr) {}
  ~ListRuntimesRequest() override;
  explicit constexpr ListRuntimesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRuntimesRequest(const ListRuntimesRequest& from);
  ListRuntimesRequest(ListRuntimesRequest&& from) noexcept
    : ListRuntimesRequest() {
    *this = ::std::move(from);
  }

  inline ListRuntimesRequest& operator=(const ListRuntimesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRuntimesRequest& operator=(ListRuntimesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRuntimesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRuntimesRequest* internal_default_instance() {
    return reinterpret_cast<const ListRuntimesRequest*>(
               &_ListRuntimesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ListRuntimesRequest& a, ListRuntimesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRuntimesRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRuntimesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRuntimesRequest* New() const final {
    return new ListRuntimesRequest();
  }

  ListRuntimesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRuntimesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRuntimesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListRuntimesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRuntimesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.ListRuntimesRequest";
  }
  protected:
  explicit ListRuntimesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectIdFieldNumber = 1,
  };
  // string project_id = 1 [json_name = "projectId"];
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.ListRuntimesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ListRuntimesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.ListRuntimesResponse) */ {
 public:
  inline ListRuntimesResponse() : ListRuntimesResponse(nullptr) {}
  ~ListRuntimesResponse() override;
  explicit constexpr ListRuntimesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRuntimesResponse(const ListRuntimesResponse& from);
  ListRuntimesResponse(ListRuntimesResponse&& from) noexcept
    : ListRuntimesResponse() {
    *this = ::std::move(from);
  }

  inline ListRuntimesResponse& operator=(const ListRuntimesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRuntimesResponse& operator=(ListRuntimesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRuntimesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRuntimesResponse* internal_default_instance() {
    return reinterpret_cast<const ListRuntimesResponse*>(
               &_ListRuntimesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ListRuntimesResponse& a, ListRuntimesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRuntimesResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRuntimesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ListRuntimesResponse* New() const final {
    return new ListRuntimesResponse();
  }

  ListRuntimesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ListRuntimesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRuntimesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ListRuntimesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRuntimesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.ListRuntimesResponse";
  }
  protected:
  explicit ListRuntimesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kRuntimeListFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .pipelines.runtime.v1alpha1.RuntimeList runtime_list = 1 [json_name = "runtimeList"];
  bool has_runtime_list() const;
  private:
  bool _internal_has_runtime_list() const;
  public:
  void clear_runtime_list();
  const ::pipelines::runtime::v1alpha1::RuntimeList& runtime_list() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::runtime::v1alpha1::RuntimeList* release_runtime_list();
  ::pipelines::runtime::v1alpha1::RuntimeList* mutable_runtime_list();
  void set_allocated_runtime_list(::pipelines::runtime::v1alpha1::RuntimeList* runtime_list);
  private:
  const ::pipelines::runtime::v1alpha1::RuntimeList& _internal_runtime_list() const;
  ::pipelines::runtime::v1alpha1::RuntimeList* _internal_mutable_runtime_list();
  public:
  void unsafe_arena_set_allocated_runtime_list(
      ::pipelines::runtime::v1alpha1::RuntimeList* runtime_list);
  ::pipelines::runtime::v1alpha1::RuntimeList* unsafe_arena_release_runtime_list();

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.ListRuntimesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::pipelines::runtime::v1alpha1::RuntimeList* runtime_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ResponseMessageDeleteRuntimeByAppIdRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest) */ {
 public:
  inline ResponseMessageDeleteRuntimeByAppIdRequest() : ResponseMessageDeleteRuntimeByAppIdRequest(nullptr) {}
  ~ResponseMessageDeleteRuntimeByAppIdRequest() override;
  explicit constexpr ResponseMessageDeleteRuntimeByAppIdRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseMessageDeleteRuntimeByAppIdRequest(const ResponseMessageDeleteRuntimeByAppIdRequest& from);
  ResponseMessageDeleteRuntimeByAppIdRequest(ResponseMessageDeleteRuntimeByAppIdRequest&& from) noexcept
    : ResponseMessageDeleteRuntimeByAppIdRequest() {
    *this = ::std::move(from);
  }

  inline ResponseMessageDeleteRuntimeByAppIdRequest& operator=(const ResponseMessageDeleteRuntimeByAppIdRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseMessageDeleteRuntimeByAppIdRequest& operator=(ResponseMessageDeleteRuntimeByAppIdRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseMessageDeleteRuntimeByAppIdRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseMessageDeleteRuntimeByAppIdRequest* internal_default_instance() {
    return reinterpret_cast<const ResponseMessageDeleteRuntimeByAppIdRequest*>(
               &_ResponseMessageDeleteRuntimeByAppIdRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ResponseMessageDeleteRuntimeByAppIdRequest& a, ResponseMessageDeleteRuntimeByAppIdRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseMessageDeleteRuntimeByAppIdRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseMessageDeleteRuntimeByAppIdRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseMessageDeleteRuntimeByAppIdRequest* New() const final {
    return new ResponseMessageDeleteRuntimeByAppIdRequest();
  }

  ResponseMessageDeleteRuntimeByAppIdRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseMessageDeleteRuntimeByAppIdRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseMessageDeleteRuntimeByAppIdRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseMessageDeleteRuntimeByAppIdRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseMessageDeleteRuntimeByAppIdRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest";
  }
  protected:
  explicit ResponseMessageDeleteRuntimeByAppIdRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationIdFieldNumber = 1,
    kNameApplicationFieldNumber = 2,
    kIntegrationIdFieldNumber = 3,
    kProjectIdFieldNumber = 4,
    kOrganizationIdFieldNumber = 5,
  };
  // string application_id = 1 [json_name = "applicationId"];
  void clear_application_id();
  const std::string& application_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_application_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_application_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_application_id();
  void set_allocated_application_id(std::string* application_id);
  private:
  const std::string& _internal_application_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_id(const std::string& value);
  std::string* _internal_mutable_application_id();
  public:

  // string name_application = 2 [json_name = "nameApplication"];
  void clear_name_application();
  const std::string& name_application() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name_application(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name_application();
  PROTOBUF_MUST_USE_RESULT std::string* release_name_application();
  void set_allocated_name_application(std::string* name_application);
  private:
  const std::string& _internal_name_application() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name_application(const std::string& value);
  std::string* _internal_mutable_name_application();
  public:

  // string integration_id = 3 [json_name = "integrationId"];
  void clear_integration_id();
  const std::string& integration_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_integration_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_integration_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_integration_id();
  void set_allocated_integration_id(std::string* integration_id);
  private:
  const std::string& _internal_integration_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_integration_id(const std::string& value);
  std::string* _internal_mutable_integration_id();
  public:

  // string project_id = 4 [json_name = "projectId"];
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // string organization_id = 5 [json_name = "organizationId"];
  void clear_organization_id();
  const std::string& organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_organization_id();
  void set_allocated_organization_id(std::string* organization_id);
  private:
  const std::string& _internal_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_id(const std::string& value);
  std::string* _internal_mutable_organization_id();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_application_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr integration_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ResponseMessageDeleteRuntimeByAppIdResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdResponse) */ {
 public:
  inline ResponseMessageDeleteRuntimeByAppIdResponse() : ResponseMessageDeleteRuntimeByAppIdResponse(nullptr) {}
  ~ResponseMessageDeleteRuntimeByAppIdResponse() override;
  explicit constexpr ResponseMessageDeleteRuntimeByAppIdResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResponseMessageDeleteRuntimeByAppIdResponse(const ResponseMessageDeleteRuntimeByAppIdResponse& from);
  ResponseMessageDeleteRuntimeByAppIdResponse(ResponseMessageDeleteRuntimeByAppIdResponse&& from) noexcept
    : ResponseMessageDeleteRuntimeByAppIdResponse() {
    *this = ::std::move(from);
  }

  inline ResponseMessageDeleteRuntimeByAppIdResponse& operator=(const ResponseMessageDeleteRuntimeByAppIdResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResponseMessageDeleteRuntimeByAppIdResponse& operator=(ResponseMessageDeleteRuntimeByAppIdResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResponseMessageDeleteRuntimeByAppIdResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResponseMessageDeleteRuntimeByAppIdResponse* internal_default_instance() {
    return reinterpret_cast<const ResponseMessageDeleteRuntimeByAppIdResponse*>(
               &_ResponseMessageDeleteRuntimeByAppIdResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ResponseMessageDeleteRuntimeByAppIdResponse& a, ResponseMessageDeleteRuntimeByAppIdResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ResponseMessageDeleteRuntimeByAppIdResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResponseMessageDeleteRuntimeByAppIdResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResponseMessageDeleteRuntimeByAppIdResponse* New() const final {
    return new ResponseMessageDeleteRuntimeByAppIdResponse();
  }

  ResponseMessageDeleteRuntimeByAppIdResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResponseMessageDeleteRuntimeByAppIdResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResponseMessageDeleteRuntimeByAppIdResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResponseMessageDeleteRuntimeByAppIdResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResponseMessageDeleteRuntimeByAppIdResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdResponse";
  }
  protected:
  explicit ResponseMessageDeleteRuntimeByAppIdResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class RebuildRuntimeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.RebuildRuntimeRequest) */ {
 public:
  inline RebuildRuntimeRequest() : RebuildRuntimeRequest(nullptr) {}
  ~RebuildRuntimeRequest() override;
  explicit constexpr RebuildRuntimeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RebuildRuntimeRequest(const RebuildRuntimeRequest& from);
  RebuildRuntimeRequest(RebuildRuntimeRequest&& from) noexcept
    : RebuildRuntimeRequest() {
    *this = ::std::move(from);
  }

  inline RebuildRuntimeRequest& operator=(const RebuildRuntimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline RebuildRuntimeRequest& operator=(RebuildRuntimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RebuildRuntimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const RebuildRuntimeRequest* internal_default_instance() {
    return reinterpret_cast<const RebuildRuntimeRequest*>(
               &_RebuildRuntimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(RebuildRuntimeRequest& a, RebuildRuntimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(RebuildRuntimeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RebuildRuntimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RebuildRuntimeRequest* New() const final {
    return new RebuildRuntimeRequest();
  }

  RebuildRuntimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RebuildRuntimeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RebuildRuntimeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RebuildRuntimeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RebuildRuntimeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.RebuildRuntimeRequest";
  }
  protected:
  explicit RebuildRuntimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 2,
    kRuntimeFieldNumber = 1,
  };
  // string user_id = 2 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
  bool has_runtime() const;
  private:
  bool _internal_has_runtime() const;
  public:
  void clear_runtime();
  const ::pipelines::runtime::v1alpha1::Runtime& runtime() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::runtime::v1alpha1::Runtime* release_runtime();
  ::pipelines::runtime::v1alpha1::Runtime* mutable_runtime();
  void set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime);
  private:
  const ::pipelines::runtime::v1alpha1::Runtime& _internal_runtime() const;
  ::pipelines::runtime::v1alpha1::Runtime* _internal_mutable_runtime();
  public:
  void unsafe_arena_set_allocated_runtime(
      ::pipelines::runtime::v1alpha1::Runtime* runtime);
  ::pipelines::runtime::v1alpha1::Runtime* unsafe_arena_release_runtime();

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.RebuildRuntimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  ::pipelines::runtime::v1alpha1::Runtime* runtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class RebuildRuntimeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.RebuildRuntimeResponse) */ {
 public:
  inline RebuildRuntimeResponse() : RebuildRuntimeResponse(nullptr) {}
  ~RebuildRuntimeResponse() override;
  explicit constexpr RebuildRuntimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RebuildRuntimeResponse(const RebuildRuntimeResponse& from);
  RebuildRuntimeResponse(RebuildRuntimeResponse&& from) noexcept
    : RebuildRuntimeResponse() {
    *this = ::std::move(from);
  }

  inline RebuildRuntimeResponse& operator=(const RebuildRuntimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline RebuildRuntimeResponse& operator=(RebuildRuntimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RebuildRuntimeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const RebuildRuntimeResponse* internal_default_instance() {
    return reinterpret_cast<const RebuildRuntimeResponse*>(
               &_RebuildRuntimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(RebuildRuntimeResponse& a, RebuildRuntimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(RebuildRuntimeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RebuildRuntimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RebuildRuntimeResponse* New() const final {
    return new RebuildRuntimeResponse();
  }

  RebuildRuntimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RebuildRuntimeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RebuildRuntimeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RebuildRuntimeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RebuildRuntimeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.RebuildRuntimeResponse";
  }
  protected:
  explicit RebuildRuntimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kRuntimeFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
  bool has_runtime() const;
  private:
  bool _internal_has_runtime() const;
  public:
  void clear_runtime();
  const ::pipelines::runtime::v1alpha1::Runtime& runtime() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::runtime::v1alpha1::Runtime* release_runtime();
  ::pipelines::runtime::v1alpha1::Runtime* mutable_runtime();
  void set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime);
  private:
  const ::pipelines::runtime::v1alpha1::Runtime& _internal_runtime() const;
  ::pipelines::runtime::v1alpha1::Runtime* _internal_mutable_runtime();
  public:
  void unsafe_arena_set_allocated_runtime(
      ::pipelines::runtime::v1alpha1::Runtime* runtime);
  ::pipelines::runtime::v1alpha1::Runtime* unsafe_arena_release_runtime();

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.RebuildRuntimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::pipelines::runtime::v1alpha1::Runtime* runtime_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class AlreadyExistsRuntimeRequest_IntegrationEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AlreadyExistsRuntimeRequest_IntegrationEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<AlreadyExistsRuntimeRequest_IntegrationEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  AlreadyExistsRuntimeRequest_IntegrationEntry_DoNotUse();
  explicit constexpr AlreadyExistsRuntimeRequest_IntegrationEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit AlreadyExistsRuntimeRequest_IntegrationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const AlreadyExistsRuntimeRequest_IntegrationEntry_DoNotUse& other);
  static const AlreadyExistsRuntimeRequest_IntegrationEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const AlreadyExistsRuntimeRequest_IntegrationEntry_DoNotUse*>(&_AlreadyExistsRuntimeRequest_IntegrationEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.IntegrationEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.IntegrationEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class AlreadyExistsRuntimeRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest) */ {
 public:
  inline AlreadyExistsRuntimeRequest() : AlreadyExistsRuntimeRequest(nullptr) {}
  ~AlreadyExistsRuntimeRequest() override;
  explicit constexpr AlreadyExistsRuntimeRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlreadyExistsRuntimeRequest(const AlreadyExistsRuntimeRequest& from);
  AlreadyExistsRuntimeRequest(AlreadyExistsRuntimeRequest&& from) noexcept
    : AlreadyExistsRuntimeRequest() {
    *this = ::std::move(from);
  }

  inline AlreadyExistsRuntimeRequest& operator=(const AlreadyExistsRuntimeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlreadyExistsRuntimeRequest& operator=(AlreadyExistsRuntimeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlreadyExistsRuntimeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlreadyExistsRuntimeRequest* internal_default_instance() {
    return reinterpret_cast<const AlreadyExistsRuntimeRequest*>(
               &_AlreadyExistsRuntimeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(AlreadyExistsRuntimeRequest& a, AlreadyExistsRuntimeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(AlreadyExistsRuntimeRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlreadyExistsRuntimeRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlreadyExistsRuntimeRequest* New() const final {
    return new AlreadyExistsRuntimeRequest();
  }

  AlreadyExistsRuntimeRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlreadyExistsRuntimeRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlreadyExistsRuntimeRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AlreadyExistsRuntimeRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlreadyExistsRuntimeRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest";
  }
  protected:
  explicit AlreadyExistsRuntimeRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kIntegrationFieldNumber = 2,
    kIntegrationIdFieldNumber = 1,
    kEnvironmentIdFieldNumber = 3,
    kProjectIdFieldNumber = 4,
    kOrganizationIdFieldNumber = 5,
    kUserIdFieldNumber = 6,
  };
  // map<string, string> integration = 2 [json_name = "integration"];
  int integration_size() const;
  private:
  int _internal_integration_size() const;
  public:
  void clear_integration();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_integration() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_integration();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      integration() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_integration();

  // string integration_id = 1 [json_name = "integrationId"];
  void clear_integration_id();
  const std::string& integration_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_integration_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_integration_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_integration_id();
  void set_allocated_integration_id(std::string* integration_id);
  private:
  const std::string& _internal_integration_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_integration_id(const std::string& value);
  std::string* _internal_mutable_integration_id();
  public:

  // string environment_id = 3 [json_name = "environmentId"];
  void clear_environment_id();
  const std::string& environment_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_environment_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_environment_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_environment_id();
  void set_allocated_environment_id(std::string* environment_id);
  private:
  const std::string& _internal_environment_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_environment_id(const std::string& value);
  std::string* _internal_mutable_environment_id();
  public:

  // string project_id = 4 [json_name = "projectId"];
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // string organization_id = 5 [json_name = "organizationId"];
  void clear_organization_id();
  const std::string& organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_organization_id();
  void set_allocated_organization_id(std::string* organization_id);
  private:
  const std::string& _internal_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_id(const std::string& value);
  std::string* _internal_mutable_organization_id();
  public:

  // string user_id = 6 [json_name = "userId"];
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      AlreadyExistsRuntimeRequest_IntegrationEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> integration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr integration_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr environment_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class AlreadyExistsRuntimeResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeResponse) */ {
 public:
  inline AlreadyExistsRuntimeResponse() : AlreadyExistsRuntimeResponse(nullptr) {}
  ~AlreadyExistsRuntimeResponse() override;
  explicit constexpr AlreadyExistsRuntimeResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AlreadyExistsRuntimeResponse(const AlreadyExistsRuntimeResponse& from);
  AlreadyExistsRuntimeResponse(AlreadyExistsRuntimeResponse&& from) noexcept
    : AlreadyExistsRuntimeResponse() {
    *this = ::std::move(from);
  }

  inline AlreadyExistsRuntimeResponse& operator=(const AlreadyExistsRuntimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlreadyExistsRuntimeResponse& operator=(AlreadyExistsRuntimeResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AlreadyExistsRuntimeResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const AlreadyExistsRuntimeResponse* internal_default_instance() {
    return reinterpret_cast<const AlreadyExistsRuntimeResponse*>(
               &_AlreadyExistsRuntimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(AlreadyExistsRuntimeResponse& a, AlreadyExistsRuntimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(AlreadyExistsRuntimeResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlreadyExistsRuntimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlreadyExistsRuntimeResponse* New() const final {
    return new AlreadyExistsRuntimeResponse();
  }

  AlreadyExistsRuntimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlreadyExistsRuntimeResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const AlreadyExistsRuntimeResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const AlreadyExistsRuntimeResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlreadyExistsRuntimeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.AlreadyExistsRuntimeResponse";
  }
  protected:
  explicit AlreadyExistsRuntimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAlreadyExistsFieldNumber = 1,
    kStatusFieldNumber = 2,
  };
  // string already_exists = 1 [json_name = "alreadyExists"];
  void clear_already_exists();
  const std::string& already_exists() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_already_exists(ArgT0&& arg0, ArgT... args);
  std::string* mutable_already_exists();
  PROTOBUF_MUST_USE_RESULT std::string* release_already_exists();
  void set_allocated_already_exists(std::string* already_exists);
  private:
  const std::string& _internal_already_exists() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_already_exists(const std::string& value);
  std::string* _internal_mutable_already_exists();
  public:

  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr already_exists_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetRuntimesInLast24HoursRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.GetRuntimesInLast24HoursRequest) */ {
 public:
  inline GetRuntimesInLast24HoursRequest() : GetRuntimesInLast24HoursRequest(nullptr) {}
  ~GetRuntimesInLast24HoursRequest() override;
  explicit constexpr GetRuntimesInLast24HoursRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRuntimesInLast24HoursRequest(const GetRuntimesInLast24HoursRequest& from);
  GetRuntimesInLast24HoursRequest(GetRuntimesInLast24HoursRequest&& from) noexcept
    : GetRuntimesInLast24HoursRequest() {
    *this = ::std::move(from);
  }

  inline GetRuntimesInLast24HoursRequest& operator=(const GetRuntimesInLast24HoursRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRuntimesInLast24HoursRequest& operator=(GetRuntimesInLast24HoursRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRuntimesInLast24HoursRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRuntimesInLast24HoursRequest* internal_default_instance() {
    return reinterpret_cast<const GetRuntimesInLast24HoursRequest*>(
               &_GetRuntimesInLast24HoursRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(GetRuntimesInLast24HoursRequest& a, GetRuntimesInLast24HoursRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRuntimesInLast24HoursRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRuntimesInLast24HoursRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRuntimesInLast24HoursRequest* New() const final {
    return new GetRuntimesInLast24HoursRequest();
  }

  GetRuntimesInLast24HoursRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRuntimesInLast24HoursRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRuntimesInLast24HoursRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRuntimesInLast24HoursRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRuntimesInLast24HoursRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.GetRuntimesInLast24HoursRequest";
  }
  protected:
  explicit GetRuntimesInLast24HoursRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.GetRuntimesInLast24HoursRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetRuntimesInLast24HoursResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.GetRuntimesInLast24HoursResponse) */ {
 public:
  inline GetRuntimesInLast24HoursResponse() : GetRuntimesInLast24HoursResponse(nullptr) {}
  ~GetRuntimesInLast24HoursResponse() override;
  explicit constexpr GetRuntimesInLast24HoursResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRuntimesInLast24HoursResponse(const GetRuntimesInLast24HoursResponse& from);
  GetRuntimesInLast24HoursResponse(GetRuntimesInLast24HoursResponse&& from) noexcept
    : GetRuntimesInLast24HoursResponse() {
    *this = ::std::move(from);
  }

  inline GetRuntimesInLast24HoursResponse& operator=(const GetRuntimesInLast24HoursResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRuntimesInLast24HoursResponse& operator=(GetRuntimesInLast24HoursResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRuntimesInLast24HoursResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRuntimesInLast24HoursResponse* internal_default_instance() {
    return reinterpret_cast<const GetRuntimesInLast24HoursResponse*>(
               &_GetRuntimesInLast24HoursResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(GetRuntimesInLast24HoursResponse& a, GetRuntimesInLast24HoursResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRuntimesInLast24HoursResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRuntimesInLast24HoursResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRuntimesInLast24HoursResponse* New() const final {
    return new GetRuntimesInLast24HoursResponse();
  }

  GetRuntimesInLast24HoursResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRuntimesInLast24HoursResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRuntimesInLast24HoursResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRuntimesInLast24HoursResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRuntimesInLast24HoursResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.GetRuntimesInLast24HoursResponse";
  }
  protected:
  explicit GetRuntimesInLast24HoursResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kRuntimeListFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .pipelines.runtime.v1alpha1.RuntimeList runtime_list = 1 [json_name = "runtimeList"];
  bool has_runtime_list() const;
  private:
  bool _internal_has_runtime_list() const;
  public:
  void clear_runtime_list();
  const ::pipelines::runtime::v1alpha1::RuntimeList& runtime_list() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::runtime::v1alpha1::RuntimeList* release_runtime_list();
  ::pipelines::runtime::v1alpha1::RuntimeList* mutable_runtime_list();
  void set_allocated_runtime_list(::pipelines::runtime::v1alpha1::RuntimeList* runtime_list);
  private:
  const ::pipelines::runtime::v1alpha1::RuntimeList& _internal_runtime_list() const;
  ::pipelines::runtime::v1alpha1::RuntimeList* _internal_mutable_runtime_list();
  public:
  void unsafe_arena_set_allocated_runtime_list(
      ::pipelines::runtime::v1alpha1::RuntimeList* runtime_list);
  ::pipelines::runtime::v1alpha1::RuntimeList* unsafe_arena_release_runtime_list();

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.GetRuntimesInLast24HoursResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::pipelines::runtime::v1alpha1::RuntimeList* runtime_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetRuntimesByApplicationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.GetRuntimesByApplicationRequest) */ {
 public:
  inline GetRuntimesByApplicationRequest() : GetRuntimesByApplicationRequest(nullptr) {}
  ~GetRuntimesByApplicationRequest() override;
  explicit constexpr GetRuntimesByApplicationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRuntimesByApplicationRequest(const GetRuntimesByApplicationRequest& from);
  GetRuntimesByApplicationRequest(GetRuntimesByApplicationRequest&& from) noexcept
    : GetRuntimesByApplicationRequest() {
    *this = ::std::move(from);
  }

  inline GetRuntimesByApplicationRequest& operator=(const GetRuntimesByApplicationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRuntimesByApplicationRequest& operator=(GetRuntimesByApplicationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRuntimesByApplicationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRuntimesByApplicationRequest* internal_default_instance() {
    return reinterpret_cast<const GetRuntimesByApplicationRequest*>(
               &_GetRuntimesByApplicationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(GetRuntimesByApplicationRequest& a, GetRuntimesByApplicationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRuntimesByApplicationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRuntimesByApplicationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRuntimesByApplicationRequest* New() const final {
    return new GetRuntimesByApplicationRequest();
  }

  GetRuntimesByApplicationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRuntimesByApplicationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRuntimesByApplicationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRuntimesByApplicationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRuntimesByApplicationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.GetRuntimesByApplicationRequest";
  }
  protected:
  explicit GetRuntimesByApplicationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationIdFieldNumber = 1,
    kProjectIdFieldNumber = 2,
    kOrganizationIdFieldNumber = 3,
  };
  // string application_id = 1 [json_name = "applicationId"];
  void clear_application_id();
  const std::string& application_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_application_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_application_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_application_id();
  void set_allocated_application_id(std::string* application_id);
  private:
  const std::string& _internal_application_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_id(const std::string& value);
  std::string* _internal_mutable_application_id();
  public:

  // string project_id = 2 [json_name = "projectId"];
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // string organization_id = 3 [json_name = "organizationId"];
  void clear_organization_id();
  const std::string& organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_organization_id();
  void set_allocated_organization_id(std::string* organization_id);
  private:
  const std::string& _internal_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_id(const std::string& value);
  std::string* _internal_mutable_organization_id();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.GetRuntimesByApplicationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class GetRuntimesByApplicationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.GetRuntimesByApplicationResponse) */ {
 public:
  inline GetRuntimesByApplicationResponse() : GetRuntimesByApplicationResponse(nullptr) {}
  ~GetRuntimesByApplicationResponse() override;
  explicit constexpr GetRuntimesByApplicationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRuntimesByApplicationResponse(const GetRuntimesByApplicationResponse& from);
  GetRuntimesByApplicationResponse(GetRuntimesByApplicationResponse&& from) noexcept
    : GetRuntimesByApplicationResponse() {
    *this = ::std::move(from);
  }

  inline GetRuntimesByApplicationResponse& operator=(const GetRuntimesByApplicationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRuntimesByApplicationResponse& operator=(GetRuntimesByApplicationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRuntimesByApplicationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRuntimesByApplicationResponse* internal_default_instance() {
    return reinterpret_cast<const GetRuntimesByApplicationResponse*>(
               &_GetRuntimesByApplicationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(GetRuntimesByApplicationResponse& a, GetRuntimesByApplicationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRuntimesByApplicationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRuntimesByApplicationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetRuntimesByApplicationResponse* New() const final {
    return new GetRuntimesByApplicationResponse();
  }

  GetRuntimesByApplicationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetRuntimesByApplicationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRuntimesByApplicationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const GetRuntimesByApplicationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRuntimesByApplicationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.GetRuntimesByApplicationResponse";
  }
  protected:
  explicit GetRuntimesByApplicationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kRuntimeListFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .pipelines.runtime.v1alpha1.RuntimeList runtime_list = 1 [json_name = "runtimeList"];
  bool has_runtime_list() const;
  private:
  bool _internal_has_runtime_list() const;
  public:
  void clear_runtime_list();
  const ::pipelines::runtime::v1alpha1::RuntimeList& runtime_list() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::runtime::v1alpha1::RuntimeList* release_runtime_list();
  ::pipelines::runtime::v1alpha1::RuntimeList* mutable_runtime_list();
  void set_allocated_runtime_list(::pipelines::runtime::v1alpha1::RuntimeList* runtime_list);
  private:
  const ::pipelines::runtime::v1alpha1::RuntimeList& _internal_runtime_list() const;
  ::pipelines::runtime::v1alpha1::RuntimeList* _internal_mutable_runtime_list();
  public:
  void unsafe_arena_set_allocated_runtime_list(
      ::pipelines::runtime::v1alpha1::RuntimeList* runtime_list);
  ::pipelines::runtime::v1alpha1::RuntimeList* unsafe_arena_release_runtime_list();

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.GetRuntimesByApplicationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::pipelines::runtime::v1alpha1::RuntimeList* runtime_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ChangeStatusRuntimeAndApplicationRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest) */ {
 public:
  inline ChangeStatusRuntimeAndApplicationRequest() : ChangeStatusRuntimeAndApplicationRequest(nullptr) {}
  ~ChangeStatusRuntimeAndApplicationRequest() override;
  explicit constexpr ChangeStatusRuntimeAndApplicationRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeStatusRuntimeAndApplicationRequest(const ChangeStatusRuntimeAndApplicationRequest& from);
  ChangeStatusRuntimeAndApplicationRequest(ChangeStatusRuntimeAndApplicationRequest&& from) noexcept
    : ChangeStatusRuntimeAndApplicationRequest() {
    *this = ::std::move(from);
  }

  inline ChangeStatusRuntimeAndApplicationRequest& operator=(const ChangeStatusRuntimeAndApplicationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeStatusRuntimeAndApplicationRequest& operator=(ChangeStatusRuntimeAndApplicationRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeStatusRuntimeAndApplicationRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeStatusRuntimeAndApplicationRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeStatusRuntimeAndApplicationRequest*>(
               &_ChangeStatusRuntimeAndApplicationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ChangeStatusRuntimeAndApplicationRequest& a, ChangeStatusRuntimeAndApplicationRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeStatusRuntimeAndApplicationRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeStatusRuntimeAndApplicationRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeStatusRuntimeAndApplicationRequest* New() const final {
    return new ChangeStatusRuntimeAndApplicationRequest();
  }

  ChangeStatusRuntimeAndApplicationRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeStatusRuntimeAndApplicationRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangeStatusRuntimeAndApplicationRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChangeStatusRuntimeAndApplicationRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeStatusRuntimeAndApplicationRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest";
  }
  protected:
  explicit ChangeStatusRuntimeAndApplicationRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationIdFieldNumber = 1,
    kProjectIdFieldNumber = 2,
    kOrganizationIdFieldNumber = 3,
    kRuntimeIdFieldNumber = 4,
    kStatusFieldNumber = 5,
  };
  // string application_id = 1 [json_name = "applicationId"];
  void clear_application_id();
  const std::string& application_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_application_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_application_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_application_id();
  void set_allocated_application_id(std::string* application_id);
  private:
  const std::string& _internal_application_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_id(const std::string& value);
  std::string* _internal_mutable_application_id();
  public:

  // string project_id = 2 [json_name = "projectId"];
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // string organization_id = 3 [json_name = "organizationId"];
  void clear_organization_id();
  const std::string& organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_organization_id();
  void set_allocated_organization_id(std::string* organization_id);
  private:
  const std::string& _internal_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_id(const std::string& value);
  std::string* _internal_mutable_organization_id();
  public:

  // string runtime_id = 4 [json_name = "runtimeId"];
  void clear_runtime_id();
  const std::string& runtime_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_runtime_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_runtime_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_runtime_id();
  void set_allocated_runtime_id(std::string* runtime_id);
  private:
  const std::string& _internal_runtime_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_runtime_id(const std::string& value);
  std::string* _internal_mutable_runtime_id();
  public:

  // string status = 5 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class ChangeStatusRuntimeAndApplicationResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationResponse) */ {
 public:
  inline ChangeStatusRuntimeAndApplicationResponse() : ChangeStatusRuntimeAndApplicationResponse(nullptr) {}
  ~ChangeStatusRuntimeAndApplicationResponse() override;
  explicit constexpr ChangeStatusRuntimeAndApplicationResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChangeStatusRuntimeAndApplicationResponse(const ChangeStatusRuntimeAndApplicationResponse& from);
  ChangeStatusRuntimeAndApplicationResponse(ChangeStatusRuntimeAndApplicationResponse&& from) noexcept
    : ChangeStatusRuntimeAndApplicationResponse() {
    *this = ::std::move(from);
  }

  inline ChangeStatusRuntimeAndApplicationResponse& operator=(const ChangeStatusRuntimeAndApplicationResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChangeStatusRuntimeAndApplicationResponse& operator=(ChangeStatusRuntimeAndApplicationResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChangeStatusRuntimeAndApplicationResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChangeStatusRuntimeAndApplicationResponse* internal_default_instance() {
    return reinterpret_cast<const ChangeStatusRuntimeAndApplicationResponse*>(
               &_ChangeStatusRuntimeAndApplicationResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ChangeStatusRuntimeAndApplicationResponse& a, ChangeStatusRuntimeAndApplicationResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ChangeStatusRuntimeAndApplicationResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChangeStatusRuntimeAndApplicationResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ChangeStatusRuntimeAndApplicationResponse* New() const final {
    return new ChangeStatusRuntimeAndApplicationResponse();
  }

  ChangeStatusRuntimeAndApplicationResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ChangeStatusRuntimeAndApplicationResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChangeStatusRuntimeAndApplicationResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChangeStatusRuntimeAndApplicationResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeStatusRuntimeAndApplicationResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationResponse";
  }
  protected:
  explicit ChangeStatusRuntimeAndApplicationResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UpdateApplicationChangesRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest) */ {
 public:
  inline UpdateApplicationChangesRequest() : UpdateApplicationChangesRequest(nullptr) {}
  ~UpdateApplicationChangesRequest() override;
  explicit constexpr UpdateApplicationChangesRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateApplicationChangesRequest(const UpdateApplicationChangesRequest& from);
  UpdateApplicationChangesRequest(UpdateApplicationChangesRequest&& from) noexcept
    : UpdateApplicationChangesRequest() {
    *this = ::std::move(from);
  }

  inline UpdateApplicationChangesRequest& operator=(const UpdateApplicationChangesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateApplicationChangesRequest& operator=(UpdateApplicationChangesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateApplicationChangesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateApplicationChangesRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateApplicationChangesRequest*>(
               &_UpdateApplicationChangesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(UpdateApplicationChangesRequest& a, UpdateApplicationChangesRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateApplicationChangesRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateApplicationChangesRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateApplicationChangesRequest* New() const final {
    return new UpdateApplicationChangesRequest();
  }

  UpdateApplicationChangesRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateApplicationChangesRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateApplicationChangesRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateApplicationChangesRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateApplicationChangesRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest";
  }
  protected:
  explicit UpdateApplicationChangesRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kApplicationIdFieldNumber = 1,
    kProjectIdFieldNumber = 2,
    kOrganizationIdFieldNumber = 3,
    kRuntimeIdFieldNumber = 4,
  };
  // string application_id = 1 [json_name = "applicationId"];
  void clear_application_id();
  const std::string& application_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_application_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_application_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_application_id();
  void set_allocated_application_id(std::string* application_id);
  private:
  const std::string& _internal_application_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_id(const std::string& value);
  std::string* _internal_mutable_application_id();
  public:

  // string project_id = 2 [json_name = "projectId"];
  void clear_project_id();
  const std::string& project_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_project_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_project_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_project_id();
  void set_allocated_project_id(std::string* project_id);
  private:
  const std::string& _internal_project_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_project_id(const std::string& value);
  std::string* _internal_mutable_project_id();
  public:

  // string organization_id = 3 [json_name = "organizationId"];
  void clear_organization_id();
  const std::string& organization_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_organization_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_organization_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_organization_id();
  void set_allocated_organization_id(std::string* organization_id);
  private:
  const std::string& _internal_organization_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_organization_id(const std::string& value);
  std::string* _internal_mutable_organization_id();
  public:

  // string runtime_id = 4 [json_name = "runtimeId"];
  void clear_runtime_id();
  const std::string& runtime_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_runtime_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_runtime_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_runtime_id();
  void set_allocated_runtime_id(std::string* runtime_id);
  private:
  const std::string& _internal_runtime_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_runtime_id(const std::string& value);
  std::string* _internal_mutable_runtime_id();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr project_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr organization_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr runtime_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// -------------------------------------------------------------------

class UpdateApplicationChangesResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.UpdateApplicationChangesResponse) */ {
 public:
  inline UpdateApplicationChangesResponse() : UpdateApplicationChangesResponse(nullptr) {}
  ~UpdateApplicationChangesResponse() override;
  explicit constexpr UpdateApplicationChangesResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateApplicationChangesResponse(const UpdateApplicationChangesResponse& from);
  UpdateApplicationChangesResponse(UpdateApplicationChangesResponse&& from) noexcept
    : UpdateApplicationChangesResponse() {
    *this = ::std::move(from);
  }

  inline UpdateApplicationChangesResponse& operator=(const UpdateApplicationChangesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateApplicationChangesResponse& operator=(UpdateApplicationChangesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateApplicationChangesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateApplicationChangesResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateApplicationChangesResponse*>(
               &_UpdateApplicationChangesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(UpdateApplicationChangesResponse& a, UpdateApplicationChangesResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateApplicationChangesResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateApplicationChangesResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdateApplicationChangesResponse* New() const final {
    return new UpdateApplicationChangesResponse();
  }

  UpdateApplicationChangesResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdateApplicationChangesResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateApplicationChangesResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const UpdateApplicationChangesResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateApplicationChangesResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.UpdateApplicationChangesResponse";
  }
  protected:
  explicit UpdateApplicationChangesResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kErrorFieldNumber = 2,
  };
  // string msg = 1 [json_name = "msg"];
  void clear_msg();
  const std::string& msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  private:
  const std::string& _internal_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // string error = 2 [json_name = "error"];
  void clear_error();
  const std::string& error() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_error(ArgT0&& arg0, ArgT... args);
  std::string* mutable_error();
  PROTOBUF_MUST_USE_RESULT std::string* release_error();
  void set_allocated_error(std::string* error);
  private:
  const std::string& _internal_error() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_error(const std::string& value);
  std::string* _internal_mutable_error();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.UpdateApplicationChangesResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr error_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateRuntimeRequest

// .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
inline bool CreateRuntimeRequest::_internal_has_runtime() const {
  return this != internal_default_instance() && runtime_ != nullptr;
}
inline bool CreateRuntimeRequest::has_runtime() const {
  return _internal_has_runtime();
}
inline const ::pipelines::runtime::v1alpha1::Runtime& CreateRuntimeRequest::_internal_runtime() const {
  const ::pipelines::runtime::v1alpha1::Runtime* p = runtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::runtime::v1alpha1::Runtime&>(
      ::pipelines::runtime::v1alpha1::_Runtime_default_instance_);
}
inline const ::pipelines::runtime::v1alpha1::Runtime& CreateRuntimeRequest::runtime() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.CreateRuntimeRequest.runtime)
  return _internal_runtime();
}
inline void CreateRuntimeRequest::unsafe_arena_set_allocated_runtime(
    ::pipelines::runtime::v1alpha1::Runtime* runtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  runtime_ = runtime;
  if (runtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.runtime.v1alpha1.CreateRuntimeRequest.runtime)
}
inline ::pipelines::runtime::v1alpha1::Runtime* CreateRuntimeRequest::release_runtime() {
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* CreateRuntimeRequest::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.CreateRuntimeRequest.runtime)
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* CreateRuntimeRequest::_internal_mutable_runtime() {
  
  if (runtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime>(GetArenaForAllocation());
    runtime_ = p;
  }
  return runtime_;
}
inline ::pipelines::runtime::v1alpha1::Runtime* CreateRuntimeRequest::mutable_runtime() {
  ::pipelines::runtime::v1alpha1::Runtime* _msg = _internal_mutable_runtime();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.CreateRuntimeRequest.runtime)
  return _msg;
}
inline void CreateRuntimeRequest::set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  if (runtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime));
    if (message_arena != submessage_arena) {
      runtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime, submessage_arena);
    }
    
  } else {
    
  }
  runtime_ = runtime;
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.CreateRuntimeRequest.runtime)
}

// string status = 2 [json_name = "status"];
inline void CreateRuntimeRequest::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& CreateRuntimeRequest::status() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.CreateRuntimeRequest.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRuntimeRequest::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.CreateRuntimeRequest.status)
}
inline std::string* CreateRuntimeRequest::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.CreateRuntimeRequest.status)
  return _s;
}
inline const std::string& CreateRuntimeRequest::_internal_status() const {
  return status_.Get();
}
inline void CreateRuntimeRequest::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRuntimeRequest::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRuntimeRequest::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.CreateRuntimeRequest.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRuntimeRequest::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.CreateRuntimeRequest.status)
}

// string user_id = 3 [json_name = "userId"];
inline void CreateRuntimeRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& CreateRuntimeRequest::user_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.CreateRuntimeRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRuntimeRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.CreateRuntimeRequest.user_id)
}
inline std::string* CreateRuntimeRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.CreateRuntimeRequest.user_id)
  return _s;
}
inline const std::string& CreateRuntimeRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void CreateRuntimeRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRuntimeRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRuntimeRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.CreateRuntimeRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRuntimeRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.CreateRuntimeRequest.user_id)
}

// -------------------------------------------------------------------

// CreateRuntimeResponse

// .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
inline bool CreateRuntimeResponse::_internal_has_runtime() const {
  return this != internal_default_instance() && runtime_ != nullptr;
}
inline bool CreateRuntimeResponse::has_runtime() const {
  return _internal_has_runtime();
}
inline const ::pipelines::runtime::v1alpha1::Runtime& CreateRuntimeResponse::_internal_runtime() const {
  const ::pipelines::runtime::v1alpha1::Runtime* p = runtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::runtime::v1alpha1::Runtime&>(
      ::pipelines::runtime::v1alpha1::_Runtime_default_instance_);
}
inline const ::pipelines::runtime::v1alpha1::Runtime& CreateRuntimeResponse::runtime() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.CreateRuntimeResponse.runtime)
  return _internal_runtime();
}
inline void CreateRuntimeResponse::unsafe_arena_set_allocated_runtime(
    ::pipelines::runtime::v1alpha1::Runtime* runtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  runtime_ = runtime;
  if (runtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.runtime.v1alpha1.CreateRuntimeResponse.runtime)
}
inline ::pipelines::runtime::v1alpha1::Runtime* CreateRuntimeResponse::release_runtime() {
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* CreateRuntimeResponse::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.CreateRuntimeResponse.runtime)
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* CreateRuntimeResponse::_internal_mutable_runtime() {
  
  if (runtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime>(GetArenaForAllocation());
    runtime_ = p;
  }
  return runtime_;
}
inline ::pipelines::runtime::v1alpha1::Runtime* CreateRuntimeResponse::mutable_runtime() {
  ::pipelines::runtime::v1alpha1::Runtime* _msg = _internal_mutable_runtime();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.CreateRuntimeResponse.runtime)
  return _msg;
}
inline void CreateRuntimeResponse::set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  if (runtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime));
    if (message_arena != submessage_arena) {
      runtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime, submessage_arena);
    }
    
  } else {
    
  }
  runtime_ = runtime;
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.CreateRuntimeResponse.runtime)
}

// string status = 2 [json_name = "status"];
inline void CreateRuntimeResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& CreateRuntimeResponse::status() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.CreateRuntimeResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRuntimeResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.CreateRuntimeResponse.status)
}
inline std::string* CreateRuntimeResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.CreateRuntimeResponse.status)
  return _s;
}
inline const std::string& CreateRuntimeResponse::_internal_status() const {
  return status_.Get();
}
inline void CreateRuntimeResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateRuntimeResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateRuntimeResponse::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.CreateRuntimeResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateRuntimeResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.CreateRuntimeResponse.status)
}

// -------------------------------------------------------------------

// UpdateRuntimeRequest

// .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
inline bool UpdateRuntimeRequest::_internal_has_runtime() const {
  return this != internal_default_instance() && runtime_ != nullptr;
}
inline bool UpdateRuntimeRequest::has_runtime() const {
  return _internal_has_runtime();
}
inline const ::pipelines::runtime::v1alpha1::Runtime& UpdateRuntimeRequest::_internal_runtime() const {
  const ::pipelines::runtime::v1alpha1::Runtime* p = runtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::runtime::v1alpha1::Runtime&>(
      ::pipelines::runtime::v1alpha1::_Runtime_default_instance_);
}
inline const ::pipelines::runtime::v1alpha1::Runtime& UpdateRuntimeRequest::runtime() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.UpdateRuntimeRequest.runtime)
  return _internal_runtime();
}
inline void UpdateRuntimeRequest::unsafe_arena_set_allocated_runtime(
    ::pipelines::runtime::v1alpha1::Runtime* runtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  runtime_ = runtime;
  if (runtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.runtime.v1alpha1.UpdateRuntimeRequest.runtime)
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateRuntimeRequest::release_runtime() {
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateRuntimeRequest::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.UpdateRuntimeRequest.runtime)
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateRuntimeRequest::_internal_mutable_runtime() {
  
  if (runtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime>(GetArenaForAllocation());
    runtime_ = p;
  }
  return runtime_;
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateRuntimeRequest::mutable_runtime() {
  ::pipelines::runtime::v1alpha1::Runtime* _msg = _internal_mutable_runtime();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.UpdateRuntimeRequest.runtime)
  return _msg;
}
inline void UpdateRuntimeRequest::set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  if (runtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime));
    if (message_arena != submessage_arena) {
      runtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime, submessage_arena);
    }
    
  } else {
    
  }
  runtime_ = runtime;
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.UpdateRuntimeRequest.runtime)
}

// string status = 2 [json_name = "status"];
inline void UpdateRuntimeRequest::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& UpdateRuntimeRequest::status() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.UpdateRuntimeRequest.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateRuntimeRequest::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.UpdateRuntimeRequest.status)
}
inline std::string* UpdateRuntimeRequest::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.UpdateRuntimeRequest.status)
  return _s;
}
inline const std::string& UpdateRuntimeRequest::_internal_status() const {
  return status_.Get();
}
inline void UpdateRuntimeRequest::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateRuntimeRequest::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateRuntimeRequest::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.UpdateRuntimeRequest.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateRuntimeRequest::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.UpdateRuntimeRequest.status)
}

// string user_id = 3 [json_name = "userId"];
inline void UpdateRuntimeRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& UpdateRuntimeRequest::user_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.UpdateRuntimeRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateRuntimeRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.UpdateRuntimeRequest.user_id)
}
inline std::string* UpdateRuntimeRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.UpdateRuntimeRequest.user_id)
  return _s;
}
inline const std::string& UpdateRuntimeRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void UpdateRuntimeRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateRuntimeRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateRuntimeRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.UpdateRuntimeRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateRuntimeRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.UpdateRuntimeRequest.user_id)
}

// -------------------------------------------------------------------

// UpdateRuntimeResponse

// .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
inline bool UpdateRuntimeResponse::_internal_has_runtime() const {
  return this != internal_default_instance() && runtime_ != nullptr;
}
inline bool UpdateRuntimeResponse::has_runtime() const {
  return _internal_has_runtime();
}
inline const ::pipelines::runtime::v1alpha1::Runtime& UpdateRuntimeResponse::_internal_runtime() const {
  const ::pipelines::runtime::v1alpha1::Runtime* p = runtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::runtime::v1alpha1::Runtime&>(
      ::pipelines::runtime::v1alpha1::_Runtime_default_instance_);
}
inline const ::pipelines::runtime::v1alpha1::Runtime& UpdateRuntimeResponse::runtime() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.UpdateRuntimeResponse.runtime)
  return _internal_runtime();
}
inline void UpdateRuntimeResponse::unsafe_arena_set_allocated_runtime(
    ::pipelines::runtime::v1alpha1::Runtime* runtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  runtime_ = runtime;
  if (runtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.runtime.v1alpha1.UpdateRuntimeResponse.runtime)
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateRuntimeResponse::release_runtime() {
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateRuntimeResponse::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.UpdateRuntimeResponse.runtime)
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateRuntimeResponse::_internal_mutable_runtime() {
  
  if (runtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime>(GetArenaForAllocation());
    runtime_ = p;
  }
  return runtime_;
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateRuntimeResponse::mutable_runtime() {
  ::pipelines::runtime::v1alpha1::Runtime* _msg = _internal_mutable_runtime();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.UpdateRuntimeResponse.runtime)
  return _msg;
}
inline void UpdateRuntimeResponse::set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  if (runtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime));
    if (message_arena != submessage_arena) {
      runtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime, submessage_arena);
    }
    
  } else {
    
  }
  runtime_ = runtime;
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.UpdateRuntimeResponse.runtime)
}

// string status = 2 [json_name = "status"];
inline void UpdateRuntimeResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& UpdateRuntimeResponse::status() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.UpdateRuntimeResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateRuntimeResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.UpdateRuntimeResponse.status)
}
inline std::string* UpdateRuntimeResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.UpdateRuntimeResponse.status)
  return _s;
}
inline const std::string& UpdateRuntimeResponse::_internal_status() const {
  return status_.Get();
}
inline void UpdateRuntimeResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateRuntimeResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateRuntimeResponse::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.UpdateRuntimeResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateRuntimeResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.UpdateRuntimeResponse.status)
}

// -------------------------------------------------------------------

// UpdateResponseMessageRuntimeRequest

// .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
inline bool UpdateResponseMessageRuntimeRequest::_internal_has_runtime() const {
  return this != internal_default_instance() && runtime_ != nullptr;
}
inline bool UpdateResponseMessageRuntimeRequest::has_runtime() const {
  return _internal_has_runtime();
}
inline const ::pipelines::runtime::v1alpha1::Runtime& UpdateResponseMessageRuntimeRequest::_internal_runtime() const {
  const ::pipelines::runtime::v1alpha1::Runtime* p = runtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::runtime::v1alpha1::Runtime&>(
      ::pipelines::runtime::v1alpha1::_Runtime_default_instance_);
}
inline const ::pipelines::runtime::v1alpha1::Runtime& UpdateResponseMessageRuntimeRequest::runtime() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeRequest.runtime)
  return _internal_runtime();
}
inline void UpdateResponseMessageRuntimeRequest::unsafe_arena_set_allocated_runtime(
    ::pipelines::runtime::v1alpha1::Runtime* runtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  runtime_ = runtime;
  if (runtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeRequest.runtime)
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateResponseMessageRuntimeRequest::release_runtime() {
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateResponseMessageRuntimeRequest::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeRequest.runtime)
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateResponseMessageRuntimeRequest::_internal_mutable_runtime() {
  
  if (runtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime>(GetArenaForAllocation());
    runtime_ = p;
  }
  return runtime_;
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateResponseMessageRuntimeRequest::mutable_runtime() {
  ::pipelines::runtime::v1alpha1::Runtime* _msg = _internal_mutable_runtime();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeRequest.runtime)
  return _msg;
}
inline void UpdateResponseMessageRuntimeRequest::set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  if (runtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime));
    if (message_arena != submessage_arena) {
      runtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime, submessage_arena);
    }
    
  } else {
    
  }
  runtime_ = runtime;
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeRequest.runtime)
}

// string status = 2 [json_name = "status"];
inline void UpdateResponseMessageRuntimeRequest::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& UpdateResponseMessageRuntimeRequest::status() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeRequest.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateResponseMessageRuntimeRequest::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeRequest.status)
}
inline std::string* UpdateResponseMessageRuntimeRequest::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeRequest.status)
  return _s;
}
inline const std::string& UpdateResponseMessageRuntimeRequest::_internal_status() const {
  return status_.Get();
}
inline void UpdateResponseMessageRuntimeRequest::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateResponseMessageRuntimeRequest::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateResponseMessageRuntimeRequest::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeRequest.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateResponseMessageRuntimeRequest::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeRequest.status)
}

// -------------------------------------------------------------------

// UpdateResponseMessageRuntimeResponse

// .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
inline bool UpdateResponseMessageRuntimeResponse::_internal_has_runtime() const {
  return this != internal_default_instance() && runtime_ != nullptr;
}
inline bool UpdateResponseMessageRuntimeResponse::has_runtime() const {
  return _internal_has_runtime();
}
inline const ::pipelines::runtime::v1alpha1::Runtime& UpdateResponseMessageRuntimeResponse::_internal_runtime() const {
  const ::pipelines::runtime::v1alpha1::Runtime* p = runtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::runtime::v1alpha1::Runtime&>(
      ::pipelines::runtime::v1alpha1::_Runtime_default_instance_);
}
inline const ::pipelines::runtime::v1alpha1::Runtime& UpdateResponseMessageRuntimeResponse::runtime() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeResponse.runtime)
  return _internal_runtime();
}
inline void UpdateResponseMessageRuntimeResponse::unsafe_arena_set_allocated_runtime(
    ::pipelines::runtime::v1alpha1::Runtime* runtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  runtime_ = runtime;
  if (runtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeResponse.runtime)
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateResponseMessageRuntimeResponse::release_runtime() {
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateResponseMessageRuntimeResponse::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeResponse.runtime)
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateResponseMessageRuntimeResponse::_internal_mutable_runtime() {
  
  if (runtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime>(GetArenaForAllocation());
    runtime_ = p;
  }
  return runtime_;
}
inline ::pipelines::runtime::v1alpha1::Runtime* UpdateResponseMessageRuntimeResponse::mutable_runtime() {
  ::pipelines::runtime::v1alpha1::Runtime* _msg = _internal_mutable_runtime();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeResponse.runtime)
  return _msg;
}
inline void UpdateResponseMessageRuntimeResponse::set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  if (runtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime));
    if (message_arena != submessage_arena) {
      runtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime, submessage_arena);
    }
    
  } else {
    
  }
  runtime_ = runtime;
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeResponse.runtime)
}

// string status = 2 [json_name = "status"];
inline void UpdateResponseMessageRuntimeResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& UpdateResponseMessageRuntimeResponse::status() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateResponseMessageRuntimeResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeResponse.status)
}
inline std::string* UpdateResponseMessageRuntimeResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeResponse.status)
  return _s;
}
inline const std::string& UpdateResponseMessageRuntimeResponse::_internal_status() const {
  return status_.Get();
}
inline void UpdateResponseMessageRuntimeResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateResponseMessageRuntimeResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateResponseMessageRuntimeResponse::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateResponseMessageRuntimeResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.UpdateResponseMessageRuntimeResponse.status)
}

// -------------------------------------------------------------------

// DeleteRuntimeRequest

// string runtime_id = 1 [json_name = "runtimeId"];
inline void DeleteRuntimeRequest::clear_runtime_id() {
  runtime_id_.ClearToEmpty();
}
inline const std::string& DeleteRuntimeRequest::runtime_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.runtime_id)
  return _internal_runtime_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRuntimeRequest::set_runtime_id(ArgT0&& arg0, ArgT... args) {
 
 runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.runtime_id)
}
inline std::string* DeleteRuntimeRequest::mutable_runtime_id() {
  std::string* _s = _internal_mutable_runtime_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.runtime_id)
  return _s;
}
inline const std::string& DeleteRuntimeRequest::_internal_runtime_id() const {
  return runtime_id_.Get();
}
inline void DeleteRuntimeRequest::_internal_set_runtime_id(const std::string& value) {
  
  runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRuntimeRequest::_internal_mutable_runtime_id() {
  
  return runtime_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRuntimeRequest::release_runtime_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.runtime_id)
  return runtime_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRuntimeRequest::set_allocated_runtime_id(std::string* runtime_id) {
  if (runtime_id != nullptr) {
    
  } else {
    
  }
  runtime_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.runtime_id)
}

// string name = 2 [json_name = "name"];
inline void DeleteRuntimeRequest::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& DeleteRuntimeRequest::name() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRuntimeRequest::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.name)
}
inline std::string* DeleteRuntimeRequest::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.name)
  return _s;
}
inline const std::string& DeleteRuntimeRequest::_internal_name() const {
  return name_.Get();
}
inline void DeleteRuntimeRequest::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRuntimeRequest::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRuntimeRequest::release_name() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRuntimeRequest::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.name)
}

// string integration = 3 [json_name = "integration"];
inline void DeleteRuntimeRequest::clear_integration() {
  integration_.ClearToEmpty();
}
inline const std::string& DeleteRuntimeRequest::integration() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.integration)
  return _internal_integration();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRuntimeRequest::set_integration(ArgT0&& arg0, ArgT... args) {
 
 integration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.integration)
}
inline std::string* DeleteRuntimeRequest::mutable_integration() {
  std::string* _s = _internal_mutable_integration();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.integration)
  return _s;
}
inline const std::string& DeleteRuntimeRequest::_internal_integration() const {
  return integration_.Get();
}
inline void DeleteRuntimeRequest::_internal_set_integration(const std::string& value) {
  
  integration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRuntimeRequest::_internal_mutable_integration() {
  
  return integration_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRuntimeRequest::release_integration() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.integration)
  return integration_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRuntimeRequest::set_allocated_integration(std::string* integration) {
  if (integration != nullptr) {
    
  } else {
    
  }
  integration_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), integration,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.integration)
}

// string project_id = 4 [json_name = "projectId"];
inline void DeleteRuntimeRequest::clear_project_id() {
  project_id_.ClearToEmpty();
}
inline const std::string& DeleteRuntimeRequest::project_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRuntimeRequest::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.project_id)
}
inline std::string* DeleteRuntimeRequest::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.project_id)
  return _s;
}
inline const std::string& DeleteRuntimeRequest::_internal_project_id() const {
  return project_id_.Get();
}
inline void DeleteRuntimeRequest::_internal_set_project_id(const std::string& value) {
  
  project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRuntimeRequest::_internal_mutable_project_id() {
  
  return project_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRuntimeRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.project_id)
  return project_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRuntimeRequest::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.project_id)
}

// string organization_id = 5 [json_name = "organizationId"];
inline void DeleteRuntimeRequest::clear_organization_id() {
  organization_id_.ClearToEmpty();
}
inline const std::string& DeleteRuntimeRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.organization_id)
  return _internal_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRuntimeRequest::set_organization_id(ArgT0&& arg0, ArgT... args) {
 
 organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.organization_id)
}
inline std::string* DeleteRuntimeRequest::mutable_organization_id() {
  std::string* _s = _internal_mutable_organization_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.organization_id)
  return _s;
}
inline const std::string& DeleteRuntimeRequest::_internal_organization_id() const {
  return organization_id_.Get();
}
inline void DeleteRuntimeRequest::_internal_set_organization_id(const std::string& value) {
  
  organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRuntimeRequest::_internal_mutable_organization_id() {
  
  return organization_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRuntimeRequest::release_organization_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.organization_id)
  return organization_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRuntimeRequest::set_allocated_organization_id(std::string* organization_id) {
  if (organization_id != nullptr) {
    
  } else {
    
  }
  organization_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organization_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.organization_id)
}

// string user_id = 6 [json_name = "userId"];
inline void DeleteRuntimeRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& DeleteRuntimeRequest::user_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRuntimeRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.user_id)
}
inline std::string* DeleteRuntimeRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.user_id)
  return _s;
}
inline const std::string& DeleteRuntimeRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void DeleteRuntimeRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRuntimeRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRuntimeRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRuntimeRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.DeleteRuntimeRequest.user_id)
}

// -------------------------------------------------------------------

// DeleteRuntimeResponse

// string msg = 1 [json_name = "msg"];
inline void DeleteRuntimeResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& DeleteRuntimeResponse::msg() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.DeleteRuntimeResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRuntimeResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.DeleteRuntimeResponse.msg)
}
inline std::string* DeleteRuntimeResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.DeleteRuntimeResponse.msg)
  return _s;
}
inline const std::string& DeleteRuntimeResponse::_internal_msg() const {
  return msg_.Get();
}
inline void DeleteRuntimeResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRuntimeResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRuntimeResponse::release_msg() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.DeleteRuntimeResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRuntimeResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.DeleteRuntimeResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void DeleteRuntimeResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DeleteRuntimeResponse::error() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.DeleteRuntimeResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRuntimeResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.DeleteRuntimeResponse.error)
}
inline std::string* DeleteRuntimeResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.DeleteRuntimeResponse.error)
  return _s;
}
inline const std::string& DeleteRuntimeResponse::_internal_error() const {
  return error_.Get();
}
inline void DeleteRuntimeResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRuntimeResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRuntimeResponse::release_error() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.DeleteRuntimeResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRuntimeResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.DeleteRuntimeResponse.error)
}

// -------------------------------------------------------------------

// DeleteRuntimesByApplicationRequest

// string application_id = 1 [json_name = "applicationId"];
inline void DeleteRuntimesByApplicationRequest::clear_application_id() {
  application_id_.ClearToEmpty();
}
inline const std::string& DeleteRuntimesByApplicationRequest::application_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.application_id)
  return _internal_application_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRuntimesByApplicationRequest::set_application_id(ArgT0&& arg0, ArgT... args) {
 
 application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.application_id)
}
inline std::string* DeleteRuntimesByApplicationRequest::mutable_application_id() {
  std::string* _s = _internal_mutable_application_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.application_id)
  return _s;
}
inline const std::string& DeleteRuntimesByApplicationRequest::_internal_application_id() const {
  return application_id_.Get();
}
inline void DeleteRuntimesByApplicationRequest::_internal_set_application_id(const std::string& value) {
  
  application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByApplicationRequest::_internal_mutable_application_id() {
  
  return application_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByApplicationRequest::release_application_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.application_id)
  return application_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRuntimesByApplicationRequest::set_allocated_application_id(std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.application_id)
}

// string name_application = 2 [json_name = "nameApplication"];
inline void DeleteRuntimesByApplicationRequest::clear_name_application() {
  name_application_.ClearToEmpty();
}
inline const std::string& DeleteRuntimesByApplicationRequest::name_application() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.name_application)
  return _internal_name_application();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRuntimesByApplicationRequest::set_name_application(ArgT0&& arg0, ArgT... args) {
 
 name_application_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.name_application)
}
inline std::string* DeleteRuntimesByApplicationRequest::mutable_name_application() {
  std::string* _s = _internal_mutable_name_application();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.name_application)
  return _s;
}
inline const std::string& DeleteRuntimesByApplicationRequest::_internal_name_application() const {
  return name_application_.Get();
}
inline void DeleteRuntimesByApplicationRequest::_internal_set_name_application(const std::string& value) {
  
  name_application_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByApplicationRequest::_internal_mutable_name_application() {
  
  return name_application_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByApplicationRequest::release_name_application() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.name_application)
  return name_application_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRuntimesByApplicationRequest::set_allocated_name_application(std::string* name_application) {
  if (name_application != nullptr) {
    
  } else {
    
  }
  name_application_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_application,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.name_application)
}

// string integration_id = 3 [json_name = "integrationId"];
inline void DeleteRuntimesByApplicationRequest::clear_integration_id() {
  integration_id_.ClearToEmpty();
}
inline const std::string& DeleteRuntimesByApplicationRequest::integration_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.integration_id)
  return _internal_integration_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRuntimesByApplicationRequest::set_integration_id(ArgT0&& arg0, ArgT... args) {
 
 integration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.integration_id)
}
inline std::string* DeleteRuntimesByApplicationRequest::mutable_integration_id() {
  std::string* _s = _internal_mutable_integration_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.integration_id)
  return _s;
}
inline const std::string& DeleteRuntimesByApplicationRequest::_internal_integration_id() const {
  return integration_id_.Get();
}
inline void DeleteRuntimesByApplicationRequest::_internal_set_integration_id(const std::string& value) {
  
  integration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByApplicationRequest::_internal_mutable_integration_id() {
  
  return integration_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByApplicationRequest::release_integration_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.integration_id)
  return integration_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRuntimesByApplicationRequest::set_allocated_integration_id(std::string* integration_id) {
  if (integration_id != nullptr) {
    
  } else {
    
  }
  integration_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), integration_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.integration_id)
}

// string project_id = 4 [json_name = "projectId"];
inline void DeleteRuntimesByApplicationRequest::clear_project_id() {
  project_id_.ClearToEmpty();
}
inline const std::string& DeleteRuntimesByApplicationRequest::project_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRuntimesByApplicationRequest::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.project_id)
}
inline std::string* DeleteRuntimesByApplicationRequest::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.project_id)
  return _s;
}
inline const std::string& DeleteRuntimesByApplicationRequest::_internal_project_id() const {
  return project_id_.Get();
}
inline void DeleteRuntimesByApplicationRequest::_internal_set_project_id(const std::string& value) {
  
  project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByApplicationRequest::_internal_mutable_project_id() {
  
  return project_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByApplicationRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.project_id)
  return project_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRuntimesByApplicationRequest::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.project_id)
}

// string organization_id = 5 [json_name = "organizationId"];
inline void DeleteRuntimesByApplicationRequest::clear_organization_id() {
  organization_id_.ClearToEmpty();
}
inline const std::string& DeleteRuntimesByApplicationRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.organization_id)
  return _internal_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRuntimesByApplicationRequest::set_organization_id(ArgT0&& arg0, ArgT... args) {
 
 organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.organization_id)
}
inline std::string* DeleteRuntimesByApplicationRequest::mutable_organization_id() {
  std::string* _s = _internal_mutable_organization_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.organization_id)
  return _s;
}
inline const std::string& DeleteRuntimesByApplicationRequest::_internal_organization_id() const {
  return organization_id_.Get();
}
inline void DeleteRuntimesByApplicationRequest::_internal_set_organization_id(const std::string& value) {
  
  organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByApplicationRequest::_internal_mutable_organization_id() {
  
  return organization_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByApplicationRequest::release_organization_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.organization_id)
  return organization_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRuntimesByApplicationRequest::set_allocated_organization_id(std::string* organization_id) {
  if (organization_id != nullptr) {
    
  } else {
    
  }
  organization_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organization_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationRequest.organization_id)
}

// -------------------------------------------------------------------

// DeleteRuntimesByApplicationResponse

// string msg = 1 [json_name = "msg"];
inline void DeleteRuntimesByApplicationResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& DeleteRuntimesByApplicationResponse::msg() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRuntimesByApplicationResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationResponse.msg)
}
inline std::string* DeleteRuntimesByApplicationResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationResponse.msg)
  return _s;
}
inline const std::string& DeleteRuntimesByApplicationResponse::_internal_msg() const {
  return msg_.Get();
}
inline void DeleteRuntimesByApplicationResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByApplicationResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByApplicationResponse::release_msg() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRuntimesByApplicationResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void DeleteRuntimesByApplicationResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DeleteRuntimesByApplicationResponse::error() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRuntimesByApplicationResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationResponse.error)
}
inline std::string* DeleteRuntimesByApplicationResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationResponse.error)
  return _s;
}
inline const std::string& DeleteRuntimesByApplicationResponse::_internal_error() const {
  return error_.Get();
}
inline void DeleteRuntimesByApplicationResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByApplicationResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByApplicationResponse::release_error() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRuntimesByApplicationResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.DeleteRuntimesByApplicationResponse.error)
}

// -------------------------------------------------------------------

// DeleteRuntimesByEnvironmentRequest

// string environment_id = 1 [json_name = "environmentId"];
inline void DeleteRuntimesByEnvironmentRequest::clear_environment_id() {
  environment_id_.ClearToEmpty();
}
inline const std::string& DeleteRuntimesByEnvironmentRequest::environment_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentRequest.environment_id)
  return _internal_environment_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRuntimesByEnvironmentRequest::set_environment_id(ArgT0&& arg0, ArgT... args) {
 
 environment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentRequest.environment_id)
}
inline std::string* DeleteRuntimesByEnvironmentRequest::mutable_environment_id() {
  std::string* _s = _internal_mutable_environment_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentRequest.environment_id)
  return _s;
}
inline const std::string& DeleteRuntimesByEnvironmentRequest::_internal_environment_id() const {
  return environment_id_.Get();
}
inline void DeleteRuntimesByEnvironmentRequest::_internal_set_environment_id(const std::string& value) {
  
  environment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByEnvironmentRequest::_internal_mutable_environment_id() {
  
  return environment_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByEnvironmentRequest::release_environment_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentRequest.environment_id)
  return environment_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRuntimesByEnvironmentRequest::set_allocated_environment_id(std::string* environment_id) {
  if (environment_id != nullptr) {
    
  } else {
    
  }
  environment_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), environment_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentRequest.environment_id)
}

// string user_id = 2 [json_name = "userId"];
inline void DeleteRuntimesByEnvironmentRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& DeleteRuntimesByEnvironmentRequest::user_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRuntimesByEnvironmentRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentRequest.user_id)
}
inline std::string* DeleteRuntimesByEnvironmentRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentRequest.user_id)
  return _s;
}
inline const std::string& DeleteRuntimesByEnvironmentRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void DeleteRuntimesByEnvironmentRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByEnvironmentRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByEnvironmentRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRuntimesByEnvironmentRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentRequest.user_id)
}

// -------------------------------------------------------------------

// DeleteRuntimesByEnvironmentResponse

// string msg = 1 [json_name = "msg"];
inline void DeleteRuntimesByEnvironmentResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& DeleteRuntimesByEnvironmentResponse::msg() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRuntimesByEnvironmentResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentResponse.msg)
}
inline std::string* DeleteRuntimesByEnvironmentResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentResponse.msg)
  return _s;
}
inline const std::string& DeleteRuntimesByEnvironmentResponse::_internal_msg() const {
  return msg_.Get();
}
inline void DeleteRuntimesByEnvironmentResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByEnvironmentResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByEnvironmentResponse::release_msg() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRuntimesByEnvironmentResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void DeleteRuntimesByEnvironmentResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& DeleteRuntimesByEnvironmentResponse::error() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeleteRuntimesByEnvironmentResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentResponse.error)
}
inline std::string* DeleteRuntimesByEnvironmentResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentResponse.error)
  return _s;
}
inline const std::string& DeleteRuntimesByEnvironmentResponse::_internal_error() const {
  return error_.Get();
}
inline void DeleteRuntimesByEnvironmentResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByEnvironmentResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeleteRuntimesByEnvironmentResponse::release_error() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeleteRuntimesByEnvironmentResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.DeleteRuntimesByEnvironmentResponse.error)
}

// -------------------------------------------------------------------

// GetRuntimeRequest

// string runtime_id = 1 [json_name = "runtimeId"];
inline void GetRuntimeRequest::clear_runtime_id() {
  runtime_id_.ClearToEmpty();
}
inline const std::string& GetRuntimeRequest::runtime_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.GetRuntimeRequest.runtime_id)
  return _internal_runtime_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRuntimeRequest::set_runtime_id(ArgT0&& arg0, ArgT... args) {
 
 runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.GetRuntimeRequest.runtime_id)
}
inline std::string* GetRuntimeRequest::mutable_runtime_id() {
  std::string* _s = _internal_mutable_runtime_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.GetRuntimeRequest.runtime_id)
  return _s;
}
inline const std::string& GetRuntimeRequest::_internal_runtime_id() const {
  return runtime_id_.Get();
}
inline void GetRuntimeRequest::_internal_set_runtime_id(const std::string& value) {
  
  runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetRuntimeRequest::_internal_mutable_runtime_id() {
  
  return runtime_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetRuntimeRequest::release_runtime_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.GetRuntimeRequest.runtime_id)
  return runtime_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetRuntimeRequest::set_allocated_runtime_id(std::string* runtime_id) {
  if (runtime_id != nullptr) {
    
  } else {
    
  }
  runtime_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.GetRuntimeRequest.runtime_id)
}

// -------------------------------------------------------------------

// GetRuntimeResponse

// .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
inline bool GetRuntimeResponse::_internal_has_runtime() const {
  return this != internal_default_instance() && runtime_ != nullptr;
}
inline bool GetRuntimeResponse::has_runtime() const {
  return _internal_has_runtime();
}
inline const ::pipelines::runtime::v1alpha1::Runtime& GetRuntimeResponse::_internal_runtime() const {
  const ::pipelines::runtime::v1alpha1::Runtime* p = runtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::runtime::v1alpha1::Runtime&>(
      ::pipelines::runtime::v1alpha1::_Runtime_default_instance_);
}
inline const ::pipelines::runtime::v1alpha1::Runtime& GetRuntimeResponse::runtime() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.GetRuntimeResponse.runtime)
  return _internal_runtime();
}
inline void GetRuntimeResponse::unsafe_arena_set_allocated_runtime(
    ::pipelines::runtime::v1alpha1::Runtime* runtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  runtime_ = runtime;
  if (runtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.runtime.v1alpha1.GetRuntimeResponse.runtime)
}
inline ::pipelines::runtime::v1alpha1::Runtime* GetRuntimeResponse::release_runtime() {
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* GetRuntimeResponse::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.GetRuntimeResponse.runtime)
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* GetRuntimeResponse::_internal_mutable_runtime() {
  
  if (runtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime>(GetArenaForAllocation());
    runtime_ = p;
  }
  return runtime_;
}
inline ::pipelines::runtime::v1alpha1::Runtime* GetRuntimeResponse::mutable_runtime() {
  ::pipelines::runtime::v1alpha1::Runtime* _msg = _internal_mutable_runtime();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.GetRuntimeResponse.runtime)
  return _msg;
}
inline void GetRuntimeResponse::set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  if (runtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime));
    if (message_arena != submessage_arena) {
      runtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime, submessage_arena);
    }
    
  } else {
    
  }
  runtime_ = runtime;
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.GetRuntimeResponse.runtime)
}

// string status = 2 [json_name = "status"];
inline void GetRuntimeResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& GetRuntimeResponse::status() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.GetRuntimeResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRuntimeResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.GetRuntimeResponse.status)
}
inline std::string* GetRuntimeResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.GetRuntimeResponse.status)
  return _s;
}
inline const std::string& GetRuntimeResponse::_internal_status() const {
  return status_.Get();
}
inline void GetRuntimeResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetRuntimeResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetRuntimeResponse::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.GetRuntimeResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetRuntimeResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.GetRuntimeResponse.status)
}

// -------------------------------------------------------------------

// ListRuntimesRequest

// string project_id = 1 [json_name = "projectId"];
inline void ListRuntimesRequest::clear_project_id() {
  project_id_.ClearToEmpty();
}
inline const std::string& ListRuntimesRequest::project_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.ListRuntimesRequest.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRuntimesRequest::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.ListRuntimesRequest.project_id)
}
inline std::string* ListRuntimesRequest::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.ListRuntimesRequest.project_id)
  return _s;
}
inline const std::string& ListRuntimesRequest::_internal_project_id() const {
  return project_id_.Get();
}
inline void ListRuntimesRequest::_internal_set_project_id(const std::string& value) {
  
  project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListRuntimesRequest::_internal_mutable_project_id() {
  
  return project_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListRuntimesRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.ListRuntimesRequest.project_id)
  return project_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListRuntimesRequest::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.ListRuntimesRequest.project_id)
}

// -------------------------------------------------------------------

// ListRuntimesResponse

// .pipelines.runtime.v1alpha1.RuntimeList runtime_list = 1 [json_name = "runtimeList"];
inline bool ListRuntimesResponse::_internal_has_runtime_list() const {
  return this != internal_default_instance() && runtime_list_ != nullptr;
}
inline bool ListRuntimesResponse::has_runtime_list() const {
  return _internal_has_runtime_list();
}
inline const ::pipelines::runtime::v1alpha1::RuntimeList& ListRuntimesResponse::_internal_runtime_list() const {
  const ::pipelines::runtime::v1alpha1::RuntimeList* p = runtime_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::runtime::v1alpha1::RuntimeList&>(
      ::pipelines::runtime::v1alpha1::_RuntimeList_default_instance_);
}
inline const ::pipelines::runtime::v1alpha1::RuntimeList& ListRuntimesResponse::runtime_list() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.ListRuntimesResponse.runtime_list)
  return _internal_runtime_list();
}
inline void ListRuntimesResponse::unsafe_arena_set_allocated_runtime_list(
    ::pipelines::runtime::v1alpha1::RuntimeList* runtime_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_list_);
  }
  runtime_list_ = runtime_list;
  if (runtime_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.runtime.v1alpha1.ListRuntimesResponse.runtime_list)
}
inline ::pipelines::runtime::v1alpha1::RuntimeList* ListRuntimesResponse::release_runtime_list() {
  
  ::pipelines::runtime::v1alpha1::RuntimeList* temp = runtime_list_;
  runtime_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::runtime::v1alpha1::RuntimeList* ListRuntimesResponse::unsafe_arena_release_runtime_list() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.ListRuntimesResponse.runtime_list)
  
  ::pipelines::runtime::v1alpha1::RuntimeList* temp = runtime_list_;
  runtime_list_ = nullptr;
  return temp;
}
inline ::pipelines::runtime::v1alpha1::RuntimeList* ListRuntimesResponse::_internal_mutable_runtime_list() {
  
  if (runtime_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::runtime::v1alpha1::RuntimeList>(GetArenaForAllocation());
    runtime_list_ = p;
  }
  return runtime_list_;
}
inline ::pipelines::runtime::v1alpha1::RuntimeList* ListRuntimesResponse::mutable_runtime_list() {
  ::pipelines::runtime::v1alpha1::RuntimeList* _msg = _internal_mutable_runtime_list();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.ListRuntimesResponse.runtime_list)
  return _msg;
}
inline void ListRuntimesResponse::set_allocated_runtime_list(::pipelines::runtime::v1alpha1::RuntimeList* runtime_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_list_);
  }
  if (runtime_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_list));
    if (message_arena != submessage_arena) {
      runtime_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime_list, submessage_arena);
    }
    
  } else {
    
  }
  runtime_list_ = runtime_list;
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.ListRuntimesResponse.runtime_list)
}

// string status = 2 [json_name = "status"];
inline void ListRuntimesResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& ListRuntimesResponse::status() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.ListRuntimesResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRuntimesResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.ListRuntimesResponse.status)
}
inline std::string* ListRuntimesResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.ListRuntimesResponse.status)
  return _s;
}
inline const std::string& ListRuntimesResponse::_internal_status() const {
  return status_.Get();
}
inline void ListRuntimesResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ListRuntimesResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ListRuntimesResponse::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.ListRuntimesResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ListRuntimesResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.ListRuntimesResponse.status)
}

// -------------------------------------------------------------------

// ResponseMessageDeleteRuntimeByAppIdRequest

// string application_id = 1 [json_name = "applicationId"];
inline void ResponseMessageDeleteRuntimeByAppIdRequest::clear_application_id() {
  application_id_.ClearToEmpty();
}
inline const std::string& ResponseMessageDeleteRuntimeByAppIdRequest::application_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.application_id)
  return _internal_application_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseMessageDeleteRuntimeByAppIdRequest::set_application_id(ArgT0&& arg0, ArgT... args) {
 
 application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.application_id)
}
inline std::string* ResponseMessageDeleteRuntimeByAppIdRequest::mutable_application_id() {
  std::string* _s = _internal_mutable_application_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.application_id)
  return _s;
}
inline const std::string& ResponseMessageDeleteRuntimeByAppIdRequest::_internal_application_id() const {
  return application_id_.Get();
}
inline void ResponseMessageDeleteRuntimeByAppIdRequest::_internal_set_application_id(const std::string& value) {
  
  application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseMessageDeleteRuntimeByAppIdRequest::_internal_mutable_application_id() {
  
  return application_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseMessageDeleteRuntimeByAppIdRequest::release_application_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.application_id)
  return application_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseMessageDeleteRuntimeByAppIdRequest::set_allocated_application_id(std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.application_id)
}

// string name_application = 2 [json_name = "nameApplication"];
inline void ResponseMessageDeleteRuntimeByAppIdRequest::clear_name_application() {
  name_application_.ClearToEmpty();
}
inline const std::string& ResponseMessageDeleteRuntimeByAppIdRequest::name_application() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.name_application)
  return _internal_name_application();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseMessageDeleteRuntimeByAppIdRequest::set_name_application(ArgT0&& arg0, ArgT... args) {
 
 name_application_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.name_application)
}
inline std::string* ResponseMessageDeleteRuntimeByAppIdRequest::mutable_name_application() {
  std::string* _s = _internal_mutable_name_application();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.name_application)
  return _s;
}
inline const std::string& ResponseMessageDeleteRuntimeByAppIdRequest::_internal_name_application() const {
  return name_application_.Get();
}
inline void ResponseMessageDeleteRuntimeByAppIdRequest::_internal_set_name_application(const std::string& value) {
  
  name_application_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseMessageDeleteRuntimeByAppIdRequest::_internal_mutable_name_application() {
  
  return name_application_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseMessageDeleteRuntimeByAppIdRequest::release_name_application() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.name_application)
  return name_application_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseMessageDeleteRuntimeByAppIdRequest::set_allocated_name_application(std::string* name_application) {
  if (name_application != nullptr) {
    
  } else {
    
  }
  name_application_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name_application,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.name_application)
}

// string integration_id = 3 [json_name = "integrationId"];
inline void ResponseMessageDeleteRuntimeByAppIdRequest::clear_integration_id() {
  integration_id_.ClearToEmpty();
}
inline const std::string& ResponseMessageDeleteRuntimeByAppIdRequest::integration_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.integration_id)
  return _internal_integration_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseMessageDeleteRuntimeByAppIdRequest::set_integration_id(ArgT0&& arg0, ArgT... args) {
 
 integration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.integration_id)
}
inline std::string* ResponseMessageDeleteRuntimeByAppIdRequest::mutable_integration_id() {
  std::string* _s = _internal_mutable_integration_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.integration_id)
  return _s;
}
inline const std::string& ResponseMessageDeleteRuntimeByAppIdRequest::_internal_integration_id() const {
  return integration_id_.Get();
}
inline void ResponseMessageDeleteRuntimeByAppIdRequest::_internal_set_integration_id(const std::string& value) {
  
  integration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseMessageDeleteRuntimeByAppIdRequest::_internal_mutable_integration_id() {
  
  return integration_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseMessageDeleteRuntimeByAppIdRequest::release_integration_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.integration_id)
  return integration_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseMessageDeleteRuntimeByAppIdRequest::set_allocated_integration_id(std::string* integration_id) {
  if (integration_id != nullptr) {
    
  } else {
    
  }
  integration_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), integration_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.integration_id)
}

// string project_id = 4 [json_name = "projectId"];
inline void ResponseMessageDeleteRuntimeByAppIdRequest::clear_project_id() {
  project_id_.ClearToEmpty();
}
inline const std::string& ResponseMessageDeleteRuntimeByAppIdRequest::project_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseMessageDeleteRuntimeByAppIdRequest::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.project_id)
}
inline std::string* ResponseMessageDeleteRuntimeByAppIdRequest::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.project_id)
  return _s;
}
inline const std::string& ResponseMessageDeleteRuntimeByAppIdRequest::_internal_project_id() const {
  return project_id_.Get();
}
inline void ResponseMessageDeleteRuntimeByAppIdRequest::_internal_set_project_id(const std::string& value) {
  
  project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseMessageDeleteRuntimeByAppIdRequest::_internal_mutable_project_id() {
  
  return project_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseMessageDeleteRuntimeByAppIdRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.project_id)
  return project_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseMessageDeleteRuntimeByAppIdRequest::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.project_id)
}

// string organization_id = 5 [json_name = "organizationId"];
inline void ResponseMessageDeleteRuntimeByAppIdRequest::clear_organization_id() {
  organization_id_.ClearToEmpty();
}
inline const std::string& ResponseMessageDeleteRuntimeByAppIdRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.organization_id)
  return _internal_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseMessageDeleteRuntimeByAppIdRequest::set_organization_id(ArgT0&& arg0, ArgT... args) {
 
 organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.organization_id)
}
inline std::string* ResponseMessageDeleteRuntimeByAppIdRequest::mutable_organization_id() {
  std::string* _s = _internal_mutable_organization_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.organization_id)
  return _s;
}
inline const std::string& ResponseMessageDeleteRuntimeByAppIdRequest::_internal_organization_id() const {
  return organization_id_.Get();
}
inline void ResponseMessageDeleteRuntimeByAppIdRequest::_internal_set_organization_id(const std::string& value) {
  
  organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseMessageDeleteRuntimeByAppIdRequest::_internal_mutable_organization_id() {
  
  return organization_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseMessageDeleteRuntimeByAppIdRequest::release_organization_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.organization_id)
  return organization_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseMessageDeleteRuntimeByAppIdRequest::set_allocated_organization_id(std::string* organization_id) {
  if (organization_id != nullptr) {
    
  } else {
    
  }
  organization_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organization_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdRequest.organization_id)
}

// -------------------------------------------------------------------

// ResponseMessageDeleteRuntimeByAppIdResponse

// string msg = 1 [json_name = "msg"];
inline void ResponseMessageDeleteRuntimeByAppIdResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& ResponseMessageDeleteRuntimeByAppIdResponse::msg() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseMessageDeleteRuntimeByAppIdResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdResponse.msg)
}
inline std::string* ResponseMessageDeleteRuntimeByAppIdResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdResponse.msg)
  return _s;
}
inline const std::string& ResponseMessageDeleteRuntimeByAppIdResponse::_internal_msg() const {
  return msg_.Get();
}
inline void ResponseMessageDeleteRuntimeByAppIdResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseMessageDeleteRuntimeByAppIdResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseMessageDeleteRuntimeByAppIdResponse::release_msg() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseMessageDeleteRuntimeByAppIdResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void ResponseMessageDeleteRuntimeByAppIdResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& ResponseMessageDeleteRuntimeByAppIdResponse::error() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ResponseMessageDeleteRuntimeByAppIdResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdResponse.error)
}
inline std::string* ResponseMessageDeleteRuntimeByAppIdResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdResponse.error)
  return _s;
}
inline const std::string& ResponseMessageDeleteRuntimeByAppIdResponse::_internal_error() const {
  return error_.Get();
}
inline void ResponseMessageDeleteRuntimeByAppIdResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ResponseMessageDeleteRuntimeByAppIdResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ResponseMessageDeleteRuntimeByAppIdResponse::release_error() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ResponseMessageDeleteRuntimeByAppIdResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.ResponseMessageDeleteRuntimeByAppIdResponse.error)
}

// -------------------------------------------------------------------

// RebuildRuntimeRequest

// .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
inline bool RebuildRuntimeRequest::_internal_has_runtime() const {
  return this != internal_default_instance() && runtime_ != nullptr;
}
inline bool RebuildRuntimeRequest::has_runtime() const {
  return _internal_has_runtime();
}
inline const ::pipelines::runtime::v1alpha1::Runtime& RebuildRuntimeRequest::_internal_runtime() const {
  const ::pipelines::runtime::v1alpha1::Runtime* p = runtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::runtime::v1alpha1::Runtime&>(
      ::pipelines::runtime::v1alpha1::_Runtime_default_instance_);
}
inline const ::pipelines::runtime::v1alpha1::Runtime& RebuildRuntimeRequest::runtime() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.RebuildRuntimeRequest.runtime)
  return _internal_runtime();
}
inline void RebuildRuntimeRequest::unsafe_arena_set_allocated_runtime(
    ::pipelines::runtime::v1alpha1::Runtime* runtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  runtime_ = runtime;
  if (runtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.runtime.v1alpha1.RebuildRuntimeRequest.runtime)
}
inline ::pipelines::runtime::v1alpha1::Runtime* RebuildRuntimeRequest::release_runtime() {
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* RebuildRuntimeRequest::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.RebuildRuntimeRequest.runtime)
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* RebuildRuntimeRequest::_internal_mutable_runtime() {
  
  if (runtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime>(GetArenaForAllocation());
    runtime_ = p;
  }
  return runtime_;
}
inline ::pipelines::runtime::v1alpha1::Runtime* RebuildRuntimeRequest::mutable_runtime() {
  ::pipelines::runtime::v1alpha1::Runtime* _msg = _internal_mutable_runtime();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.RebuildRuntimeRequest.runtime)
  return _msg;
}
inline void RebuildRuntimeRequest::set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  if (runtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime));
    if (message_arena != submessage_arena) {
      runtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime, submessage_arena);
    }
    
  } else {
    
  }
  runtime_ = runtime;
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.RebuildRuntimeRequest.runtime)
}

// string user_id = 2 [json_name = "userId"];
inline void RebuildRuntimeRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& RebuildRuntimeRequest::user_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.RebuildRuntimeRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RebuildRuntimeRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.RebuildRuntimeRequest.user_id)
}
inline std::string* RebuildRuntimeRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.RebuildRuntimeRequest.user_id)
  return _s;
}
inline const std::string& RebuildRuntimeRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void RebuildRuntimeRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RebuildRuntimeRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RebuildRuntimeRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.RebuildRuntimeRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RebuildRuntimeRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.RebuildRuntimeRequest.user_id)
}

// -------------------------------------------------------------------

// RebuildRuntimeResponse

// .pipelines.runtime.v1alpha1.Runtime runtime = 1 [json_name = "runtime"];
inline bool RebuildRuntimeResponse::_internal_has_runtime() const {
  return this != internal_default_instance() && runtime_ != nullptr;
}
inline bool RebuildRuntimeResponse::has_runtime() const {
  return _internal_has_runtime();
}
inline const ::pipelines::runtime::v1alpha1::Runtime& RebuildRuntimeResponse::_internal_runtime() const {
  const ::pipelines::runtime::v1alpha1::Runtime* p = runtime_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::runtime::v1alpha1::Runtime&>(
      ::pipelines::runtime::v1alpha1::_Runtime_default_instance_);
}
inline const ::pipelines::runtime::v1alpha1::Runtime& RebuildRuntimeResponse::runtime() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.RebuildRuntimeResponse.runtime)
  return _internal_runtime();
}
inline void RebuildRuntimeResponse::unsafe_arena_set_allocated_runtime(
    ::pipelines::runtime::v1alpha1::Runtime* runtime) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  runtime_ = runtime;
  if (runtime) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.runtime.v1alpha1.RebuildRuntimeResponse.runtime)
}
inline ::pipelines::runtime::v1alpha1::Runtime* RebuildRuntimeResponse::release_runtime() {
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* RebuildRuntimeResponse::unsafe_arena_release_runtime() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.RebuildRuntimeResponse.runtime)
  
  ::pipelines::runtime::v1alpha1::Runtime* temp = runtime_;
  runtime_ = nullptr;
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Runtime* RebuildRuntimeResponse::_internal_mutable_runtime() {
  
  if (runtime_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime>(GetArenaForAllocation());
    runtime_ = p;
  }
  return runtime_;
}
inline ::pipelines::runtime::v1alpha1::Runtime* RebuildRuntimeResponse::mutable_runtime() {
  ::pipelines::runtime::v1alpha1::Runtime* _msg = _internal_mutable_runtime();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.RebuildRuntimeResponse.runtime)
  return _msg;
}
inline void RebuildRuntimeResponse::set_allocated_runtime(::pipelines::runtime::v1alpha1::Runtime* runtime) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_);
  }
  if (runtime) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime));
    if (message_arena != submessage_arena) {
      runtime = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime, submessage_arena);
    }
    
  } else {
    
  }
  runtime_ = runtime;
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.RebuildRuntimeResponse.runtime)
}

// string status = 2 [json_name = "status"];
inline void RebuildRuntimeResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& RebuildRuntimeResponse::status() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.RebuildRuntimeResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RebuildRuntimeResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.RebuildRuntimeResponse.status)
}
inline std::string* RebuildRuntimeResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.RebuildRuntimeResponse.status)
  return _s;
}
inline const std::string& RebuildRuntimeResponse::_internal_status() const {
  return status_.Get();
}
inline void RebuildRuntimeResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RebuildRuntimeResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RebuildRuntimeResponse::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.RebuildRuntimeResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RebuildRuntimeResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.RebuildRuntimeResponse.status)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// AlreadyExistsRuntimeRequest

// string integration_id = 1 [json_name = "integrationId"];
inline void AlreadyExistsRuntimeRequest::clear_integration_id() {
  integration_id_.ClearToEmpty();
}
inline const std::string& AlreadyExistsRuntimeRequest::integration_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.integration_id)
  return _internal_integration_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlreadyExistsRuntimeRequest::set_integration_id(ArgT0&& arg0, ArgT... args) {
 
 integration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.integration_id)
}
inline std::string* AlreadyExistsRuntimeRequest::mutable_integration_id() {
  std::string* _s = _internal_mutable_integration_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.integration_id)
  return _s;
}
inline const std::string& AlreadyExistsRuntimeRequest::_internal_integration_id() const {
  return integration_id_.Get();
}
inline void AlreadyExistsRuntimeRequest::_internal_set_integration_id(const std::string& value) {
  
  integration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AlreadyExistsRuntimeRequest::_internal_mutable_integration_id() {
  
  return integration_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AlreadyExistsRuntimeRequest::release_integration_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.integration_id)
  return integration_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AlreadyExistsRuntimeRequest::set_allocated_integration_id(std::string* integration_id) {
  if (integration_id != nullptr) {
    
  } else {
    
  }
  integration_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), integration_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.integration_id)
}

// map<string, string> integration = 2 [json_name = "integration"];
inline int AlreadyExistsRuntimeRequest::_internal_integration_size() const {
  return integration_.size();
}
inline int AlreadyExistsRuntimeRequest::integration_size() const {
  return _internal_integration_size();
}
inline void AlreadyExistsRuntimeRequest::clear_integration() {
  integration_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AlreadyExistsRuntimeRequest::_internal_integration() const {
  return integration_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
AlreadyExistsRuntimeRequest::integration() const {
  // @@protoc_insertion_point(field_map:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.integration)
  return _internal_integration();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AlreadyExistsRuntimeRequest::_internal_mutable_integration() {
  return integration_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
AlreadyExistsRuntimeRequest::mutable_integration() {
  // @@protoc_insertion_point(field_mutable_map:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.integration)
  return _internal_mutable_integration();
}

// string environment_id = 3 [json_name = "environmentId"];
inline void AlreadyExistsRuntimeRequest::clear_environment_id() {
  environment_id_.ClearToEmpty();
}
inline const std::string& AlreadyExistsRuntimeRequest::environment_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.environment_id)
  return _internal_environment_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlreadyExistsRuntimeRequest::set_environment_id(ArgT0&& arg0, ArgT... args) {
 
 environment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.environment_id)
}
inline std::string* AlreadyExistsRuntimeRequest::mutable_environment_id() {
  std::string* _s = _internal_mutable_environment_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.environment_id)
  return _s;
}
inline const std::string& AlreadyExistsRuntimeRequest::_internal_environment_id() const {
  return environment_id_.Get();
}
inline void AlreadyExistsRuntimeRequest::_internal_set_environment_id(const std::string& value) {
  
  environment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AlreadyExistsRuntimeRequest::_internal_mutable_environment_id() {
  
  return environment_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AlreadyExistsRuntimeRequest::release_environment_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.environment_id)
  return environment_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AlreadyExistsRuntimeRequest::set_allocated_environment_id(std::string* environment_id) {
  if (environment_id != nullptr) {
    
  } else {
    
  }
  environment_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), environment_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.environment_id)
}

// string project_id = 4 [json_name = "projectId"];
inline void AlreadyExistsRuntimeRequest::clear_project_id() {
  project_id_.ClearToEmpty();
}
inline const std::string& AlreadyExistsRuntimeRequest::project_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlreadyExistsRuntimeRequest::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.project_id)
}
inline std::string* AlreadyExistsRuntimeRequest::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.project_id)
  return _s;
}
inline const std::string& AlreadyExistsRuntimeRequest::_internal_project_id() const {
  return project_id_.Get();
}
inline void AlreadyExistsRuntimeRequest::_internal_set_project_id(const std::string& value) {
  
  project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AlreadyExistsRuntimeRequest::_internal_mutable_project_id() {
  
  return project_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AlreadyExistsRuntimeRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.project_id)
  return project_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AlreadyExistsRuntimeRequest::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.project_id)
}

// string organization_id = 5 [json_name = "organizationId"];
inline void AlreadyExistsRuntimeRequest::clear_organization_id() {
  organization_id_.ClearToEmpty();
}
inline const std::string& AlreadyExistsRuntimeRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.organization_id)
  return _internal_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlreadyExistsRuntimeRequest::set_organization_id(ArgT0&& arg0, ArgT... args) {
 
 organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.organization_id)
}
inline std::string* AlreadyExistsRuntimeRequest::mutable_organization_id() {
  std::string* _s = _internal_mutable_organization_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.organization_id)
  return _s;
}
inline const std::string& AlreadyExistsRuntimeRequest::_internal_organization_id() const {
  return organization_id_.Get();
}
inline void AlreadyExistsRuntimeRequest::_internal_set_organization_id(const std::string& value) {
  
  organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AlreadyExistsRuntimeRequest::_internal_mutable_organization_id() {
  
  return organization_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AlreadyExistsRuntimeRequest::release_organization_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.organization_id)
  return organization_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AlreadyExistsRuntimeRequest::set_allocated_organization_id(std::string* organization_id) {
  if (organization_id != nullptr) {
    
  } else {
    
  }
  organization_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organization_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.organization_id)
}

// string user_id = 6 [json_name = "userId"];
inline void AlreadyExistsRuntimeRequest::clear_user_id() {
  user_id_.ClearToEmpty();
}
inline const std::string& AlreadyExistsRuntimeRequest::user_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlreadyExistsRuntimeRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.user_id)
}
inline std::string* AlreadyExistsRuntimeRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.user_id)
  return _s;
}
inline const std::string& AlreadyExistsRuntimeRequest::_internal_user_id() const {
  return user_id_.Get();
}
inline void AlreadyExistsRuntimeRequest::_internal_set_user_id(const std::string& value) {
  
  user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AlreadyExistsRuntimeRequest::_internal_mutable_user_id() {
  
  return user_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AlreadyExistsRuntimeRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.user_id)
  return user_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AlreadyExistsRuntimeRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  user_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeRequest.user_id)
}

// -------------------------------------------------------------------

// AlreadyExistsRuntimeResponse

// string already_exists = 1 [json_name = "alreadyExists"];
inline void AlreadyExistsRuntimeResponse::clear_already_exists() {
  already_exists_.ClearToEmpty();
}
inline const std::string& AlreadyExistsRuntimeResponse::already_exists() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeResponse.already_exists)
  return _internal_already_exists();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlreadyExistsRuntimeResponse::set_already_exists(ArgT0&& arg0, ArgT... args) {
 
 already_exists_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeResponse.already_exists)
}
inline std::string* AlreadyExistsRuntimeResponse::mutable_already_exists() {
  std::string* _s = _internal_mutable_already_exists();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeResponse.already_exists)
  return _s;
}
inline const std::string& AlreadyExistsRuntimeResponse::_internal_already_exists() const {
  return already_exists_.Get();
}
inline void AlreadyExistsRuntimeResponse::_internal_set_already_exists(const std::string& value) {
  
  already_exists_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AlreadyExistsRuntimeResponse::_internal_mutable_already_exists() {
  
  return already_exists_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AlreadyExistsRuntimeResponse::release_already_exists() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeResponse.already_exists)
  return already_exists_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AlreadyExistsRuntimeResponse::set_allocated_already_exists(std::string* already_exists) {
  if (already_exists != nullptr) {
    
  } else {
    
  }
  already_exists_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), already_exists,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeResponse.already_exists)
}

// string status = 2 [json_name = "status"];
inline void AlreadyExistsRuntimeResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& AlreadyExistsRuntimeResponse::status() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AlreadyExistsRuntimeResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeResponse.status)
}
inline std::string* AlreadyExistsRuntimeResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeResponse.status)
  return _s;
}
inline const std::string& AlreadyExistsRuntimeResponse::_internal_status() const {
  return status_.Get();
}
inline void AlreadyExistsRuntimeResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AlreadyExistsRuntimeResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AlreadyExistsRuntimeResponse::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AlreadyExistsRuntimeResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.AlreadyExistsRuntimeResponse.status)
}

// -------------------------------------------------------------------

// GetRuntimesInLast24HoursRequest

// -------------------------------------------------------------------

// GetRuntimesInLast24HoursResponse

// .pipelines.runtime.v1alpha1.RuntimeList runtime_list = 1 [json_name = "runtimeList"];
inline bool GetRuntimesInLast24HoursResponse::_internal_has_runtime_list() const {
  return this != internal_default_instance() && runtime_list_ != nullptr;
}
inline bool GetRuntimesInLast24HoursResponse::has_runtime_list() const {
  return _internal_has_runtime_list();
}
inline const ::pipelines::runtime::v1alpha1::RuntimeList& GetRuntimesInLast24HoursResponse::_internal_runtime_list() const {
  const ::pipelines::runtime::v1alpha1::RuntimeList* p = runtime_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::runtime::v1alpha1::RuntimeList&>(
      ::pipelines::runtime::v1alpha1::_RuntimeList_default_instance_);
}
inline const ::pipelines::runtime::v1alpha1::RuntimeList& GetRuntimesInLast24HoursResponse::runtime_list() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.GetRuntimesInLast24HoursResponse.runtime_list)
  return _internal_runtime_list();
}
inline void GetRuntimesInLast24HoursResponse::unsafe_arena_set_allocated_runtime_list(
    ::pipelines::runtime::v1alpha1::RuntimeList* runtime_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_list_);
  }
  runtime_list_ = runtime_list;
  if (runtime_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.runtime.v1alpha1.GetRuntimesInLast24HoursResponse.runtime_list)
}
inline ::pipelines::runtime::v1alpha1::RuntimeList* GetRuntimesInLast24HoursResponse::release_runtime_list() {
  
  ::pipelines::runtime::v1alpha1::RuntimeList* temp = runtime_list_;
  runtime_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::runtime::v1alpha1::RuntimeList* GetRuntimesInLast24HoursResponse::unsafe_arena_release_runtime_list() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.GetRuntimesInLast24HoursResponse.runtime_list)
  
  ::pipelines::runtime::v1alpha1::RuntimeList* temp = runtime_list_;
  runtime_list_ = nullptr;
  return temp;
}
inline ::pipelines::runtime::v1alpha1::RuntimeList* GetRuntimesInLast24HoursResponse::_internal_mutable_runtime_list() {
  
  if (runtime_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::runtime::v1alpha1::RuntimeList>(GetArenaForAllocation());
    runtime_list_ = p;
  }
  return runtime_list_;
}
inline ::pipelines::runtime::v1alpha1::RuntimeList* GetRuntimesInLast24HoursResponse::mutable_runtime_list() {
  ::pipelines::runtime::v1alpha1::RuntimeList* _msg = _internal_mutable_runtime_list();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.GetRuntimesInLast24HoursResponse.runtime_list)
  return _msg;
}
inline void GetRuntimesInLast24HoursResponse::set_allocated_runtime_list(::pipelines::runtime::v1alpha1::RuntimeList* runtime_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_list_);
  }
  if (runtime_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_list));
    if (message_arena != submessage_arena) {
      runtime_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime_list, submessage_arena);
    }
    
  } else {
    
  }
  runtime_list_ = runtime_list;
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.GetRuntimesInLast24HoursResponse.runtime_list)
}

// string status = 2 [json_name = "status"];
inline void GetRuntimesInLast24HoursResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& GetRuntimesInLast24HoursResponse::status() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.GetRuntimesInLast24HoursResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRuntimesInLast24HoursResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.GetRuntimesInLast24HoursResponse.status)
}
inline std::string* GetRuntimesInLast24HoursResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.GetRuntimesInLast24HoursResponse.status)
  return _s;
}
inline const std::string& GetRuntimesInLast24HoursResponse::_internal_status() const {
  return status_.Get();
}
inline void GetRuntimesInLast24HoursResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetRuntimesInLast24HoursResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetRuntimesInLast24HoursResponse::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.GetRuntimesInLast24HoursResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetRuntimesInLast24HoursResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.GetRuntimesInLast24HoursResponse.status)
}

// -------------------------------------------------------------------

// GetRuntimesByApplicationRequest

// string application_id = 1 [json_name = "applicationId"];
inline void GetRuntimesByApplicationRequest::clear_application_id() {
  application_id_.ClearToEmpty();
}
inline const std::string& GetRuntimesByApplicationRequest::application_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.GetRuntimesByApplicationRequest.application_id)
  return _internal_application_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRuntimesByApplicationRequest::set_application_id(ArgT0&& arg0, ArgT... args) {
 
 application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.GetRuntimesByApplicationRequest.application_id)
}
inline std::string* GetRuntimesByApplicationRequest::mutable_application_id() {
  std::string* _s = _internal_mutable_application_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.GetRuntimesByApplicationRequest.application_id)
  return _s;
}
inline const std::string& GetRuntimesByApplicationRequest::_internal_application_id() const {
  return application_id_.Get();
}
inline void GetRuntimesByApplicationRequest::_internal_set_application_id(const std::string& value) {
  
  application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetRuntimesByApplicationRequest::_internal_mutable_application_id() {
  
  return application_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetRuntimesByApplicationRequest::release_application_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.GetRuntimesByApplicationRequest.application_id)
  return application_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetRuntimesByApplicationRequest::set_allocated_application_id(std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.GetRuntimesByApplicationRequest.application_id)
}

// string project_id = 2 [json_name = "projectId"];
inline void GetRuntimesByApplicationRequest::clear_project_id() {
  project_id_.ClearToEmpty();
}
inline const std::string& GetRuntimesByApplicationRequest::project_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.GetRuntimesByApplicationRequest.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRuntimesByApplicationRequest::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.GetRuntimesByApplicationRequest.project_id)
}
inline std::string* GetRuntimesByApplicationRequest::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.GetRuntimesByApplicationRequest.project_id)
  return _s;
}
inline const std::string& GetRuntimesByApplicationRequest::_internal_project_id() const {
  return project_id_.Get();
}
inline void GetRuntimesByApplicationRequest::_internal_set_project_id(const std::string& value) {
  
  project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetRuntimesByApplicationRequest::_internal_mutable_project_id() {
  
  return project_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetRuntimesByApplicationRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.GetRuntimesByApplicationRequest.project_id)
  return project_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetRuntimesByApplicationRequest::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.GetRuntimesByApplicationRequest.project_id)
}

// string organization_id = 3 [json_name = "organizationId"];
inline void GetRuntimesByApplicationRequest::clear_organization_id() {
  organization_id_.ClearToEmpty();
}
inline const std::string& GetRuntimesByApplicationRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.GetRuntimesByApplicationRequest.organization_id)
  return _internal_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRuntimesByApplicationRequest::set_organization_id(ArgT0&& arg0, ArgT... args) {
 
 organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.GetRuntimesByApplicationRequest.organization_id)
}
inline std::string* GetRuntimesByApplicationRequest::mutable_organization_id() {
  std::string* _s = _internal_mutable_organization_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.GetRuntimesByApplicationRequest.organization_id)
  return _s;
}
inline const std::string& GetRuntimesByApplicationRequest::_internal_organization_id() const {
  return organization_id_.Get();
}
inline void GetRuntimesByApplicationRequest::_internal_set_organization_id(const std::string& value) {
  
  organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetRuntimesByApplicationRequest::_internal_mutable_organization_id() {
  
  return organization_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetRuntimesByApplicationRequest::release_organization_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.GetRuntimesByApplicationRequest.organization_id)
  return organization_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetRuntimesByApplicationRequest::set_allocated_organization_id(std::string* organization_id) {
  if (organization_id != nullptr) {
    
  } else {
    
  }
  organization_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organization_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.GetRuntimesByApplicationRequest.organization_id)
}

// -------------------------------------------------------------------

// GetRuntimesByApplicationResponse

// .pipelines.runtime.v1alpha1.RuntimeList runtime_list = 1 [json_name = "runtimeList"];
inline bool GetRuntimesByApplicationResponse::_internal_has_runtime_list() const {
  return this != internal_default_instance() && runtime_list_ != nullptr;
}
inline bool GetRuntimesByApplicationResponse::has_runtime_list() const {
  return _internal_has_runtime_list();
}
inline const ::pipelines::runtime::v1alpha1::RuntimeList& GetRuntimesByApplicationResponse::_internal_runtime_list() const {
  const ::pipelines::runtime::v1alpha1::RuntimeList* p = runtime_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::runtime::v1alpha1::RuntimeList&>(
      ::pipelines::runtime::v1alpha1::_RuntimeList_default_instance_);
}
inline const ::pipelines::runtime::v1alpha1::RuntimeList& GetRuntimesByApplicationResponse::runtime_list() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.GetRuntimesByApplicationResponse.runtime_list)
  return _internal_runtime_list();
}
inline void GetRuntimesByApplicationResponse::unsafe_arena_set_allocated_runtime_list(
    ::pipelines::runtime::v1alpha1::RuntimeList* runtime_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_list_);
  }
  runtime_list_ = runtime_list;
  if (runtime_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.runtime.v1alpha1.GetRuntimesByApplicationResponse.runtime_list)
}
inline ::pipelines::runtime::v1alpha1::RuntimeList* GetRuntimesByApplicationResponse::release_runtime_list() {
  
  ::pipelines::runtime::v1alpha1::RuntimeList* temp = runtime_list_;
  runtime_list_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::runtime::v1alpha1::RuntimeList* GetRuntimesByApplicationResponse::unsafe_arena_release_runtime_list() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.GetRuntimesByApplicationResponse.runtime_list)
  
  ::pipelines::runtime::v1alpha1::RuntimeList* temp = runtime_list_;
  runtime_list_ = nullptr;
  return temp;
}
inline ::pipelines::runtime::v1alpha1::RuntimeList* GetRuntimesByApplicationResponse::_internal_mutable_runtime_list() {
  
  if (runtime_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::runtime::v1alpha1::RuntimeList>(GetArenaForAllocation());
    runtime_list_ = p;
  }
  return runtime_list_;
}
inline ::pipelines::runtime::v1alpha1::RuntimeList* GetRuntimesByApplicationResponse::mutable_runtime_list() {
  ::pipelines::runtime::v1alpha1::RuntimeList* _msg = _internal_mutable_runtime_list();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.GetRuntimesByApplicationResponse.runtime_list)
  return _msg;
}
inline void GetRuntimesByApplicationResponse::set_allocated_runtime_list(::pipelines::runtime::v1alpha1::RuntimeList* runtime_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_list_);
  }
  if (runtime_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(runtime_list));
    if (message_arena != submessage_arena) {
      runtime_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, runtime_list, submessage_arena);
    }
    
  } else {
    
  }
  runtime_list_ = runtime_list;
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.GetRuntimesByApplicationResponse.runtime_list)
}

// string status = 2 [json_name = "status"];
inline void GetRuntimesByApplicationResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& GetRuntimesByApplicationResponse::status() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.GetRuntimesByApplicationResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRuntimesByApplicationResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.GetRuntimesByApplicationResponse.status)
}
inline std::string* GetRuntimesByApplicationResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.GetRuntimesByApplicationResponse.status)
  return _s;
}
inline const std::string& GetRuntimesByApplicationResponse::_internal_status() const {
  return status_.Get();
}
inline void GetRuntimesByApplicationResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GetRuntimesByApplicationResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GetRuntimesByApplicationResponse::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.GetRuntimesByApplicationResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GetRuntimesByApplicationResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.GetRuntimesByApplicationResponse.status)
}

// -------------------------------------------------------------------

// ChangeStatusRuntimeAndApplicationRequest

// string application_id = 1 [json_name = "applicationId"];
inline void ChangeStatusRuntimeAndApplicationRequest::clear_application_id() {
  application_id_.ClearToEmpty();
}
inline const std::string& ChangeStatusRuntimeAndApplicationRequest::application_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.application_id)
  return _internal_application_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangeStatusRuntimeAndApplicationRequest::set_application_id(ArgT0&& arg0, ArgT... args) {
 
 application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.application_id)
}
inline std::string* ChangeStatusRuntimeAndApplicationRequest::mutable_application_id() {
  std::string* _s = _internal_mutable_application_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.application_id)
  return _s;
}
inline const std::string& ChangeStatusRuntimeAndApplicationRequest::_internal_application_id() const {
  return application_id_.Get();
}
inline void ChangeStatusRuntimeAndApplicationRequest::_internal_set_application_id(const std::string& value) {
  
  application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChangeStatusRuntimeAndApplicationRequest::_internal_mutable_application_id() {
  
  return application_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChangeStatusRuntimeAndApplicationRequest::release_application_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.application_id)
  return application_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChangeStatusRuntimeAndApplicationRequest::set_allocated_application_id(std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.application_id)
}

// string project_id = 2 [json_name = "projectId"];
inline void ChangeStatusRuntimeAndApplicationRequest::clear_project_id() {
  project_id_.ClearToEmpty();
}
inline const std::string& ChangeStatusRuntimeAndApplicationRequest::project_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangeStatusRuntimeAndApplicationRequest::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.project_id)
}
inline std::string* ChangeStatusRuntimeAndApplicationRequest::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.project_id)
  return _s;
}
inline const std::string& ChangeStatusRuntimeAndApplicationRequest::_internal_project_id() const {
  return project_id_.Get();
}
inline void ChangeStatusRuntimeAndApplicationRequest::_internal_set_project_id(const std::string& value) {
  
  project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChangeStatusRuntimeAndApplicationRequest::_internal_mutable_project_id() {
  
  return project_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChangeStatusRuntimeAndApplicationRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.project_id)
  return project_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChangeStatusRuntimeAndApplicationRequest::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.project_id)
}

// string organization_id = 3 [json_name = "organizationId"];
inline void ChangeStatusRuntimeAndApplicationRequest::clear_organization_id() {
  organization_id_.ClearToEmpty();
}
inline const std::string& ChangeStatusRuntimeAndApplicationRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.organization_id)
  return _internal_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangeStatusRuntimeAndApplicationRequest::set_organization_id(ArgT0&& arg0, ArgT... args) {
 
 organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.organization_id)
}
inline std::string* ChangeStatusRuntimeAndApplicationRequest::mutable_organization_id() {
  std::string* _s = _internal_mutable_organization_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.organization_id)
  return _s;
}
inline const std::string& ChangeStatusRuntimeAndApplicationRequest::_internal_organization_id() const {
  return organization_id_.Get();
}
inline void ChangeStatusRuntimeAndApplicationRequest::_internal_set_organization_id(const std::string& value) {
  
  organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChangeStatusRuntimeAndApplicationRequest::_internal_mutable_organization_id() {
  
  return organization_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChangeStatusRuntimeAndApplicationRequest::release_organization_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.organization_id)
  return organization_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChangeStatusRuntimeAndApplicationRequest::set_allocated_organization_id(std::string* organization_id) {
  if (organization_id != nullptr) {
    
  } else {
    
  }
  organization_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organization_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.organization_id)
}

// string runtime_id = 4 [json_name = "runtimeId"];
inline void ChangeStatusRuntimeAndApplicationRequest::clear_runtime_id() {
  runtime_id_.ClearToEmpty();
}
inline const std::string& ChangeStatusRuntimeAndApplicationRequest::runtime_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.runtime_id)
  return _internal_runtime_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangeStatusRuntimeAndApplicationRequest::set_runtime_id(ArgT0&& arg0, ArgT... args) {
 
 runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.runtime_id)
}
inline std::string* ChangeStatusRuntimeAndApplicationRequest::mutable_runtime_id() {
  std::string* _s = _internal_mutable_runtime_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.runtime_id)
  return _s;
}
inline const std::string& ChangeStatusRuntimeAndApplicationRequest::_internal_runtime_id() const {
  return runtime_id_.Get();
}
inline void ChangeStatusRuntimeAndApplicationRequest::_internal_set_runtime_id(const std::string& value) {
  
  runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChangeStatusRuntimeAndApplicationRequest::_internal_mutable_runtime_id() {
  
  return runtime_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChangeStatusRuntimeAndApplicationRequest::release_runtime_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.runtime_id)
  return runtime_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChangeStatusRuntimeAndApplicationRequest::set_allocated_runtime_id(std::string* runtime_id) {
  if (runtime_id != nullptr) {
    
  } else {
    
  }
  runtime_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.runtime_id)
}

// string status = 5 [json_name = "status"];
inline void ChangeStatusRuntimeAndApplicationRequest::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& ChangeStatusRuntimeAndApplicationRequest::status() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangeStatusRuntimeAndApplicationRequest::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.status)
}
inline std::string* ChangeStatusRuntimeAndApplicationRequest::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.status)
  return _s;
}
inline const std::string& ChangeStatusRuntimeAndApplicationRequest::_internal_status() const {
  return status_.Get();
}
inline void ChangeStatusRuntimeAndApplicationRequest::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChangeStatusRuntimeAndApplicationRequest::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChangeStatusRuntimeAndApplicationRequest::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChangeStatusRuntimeAndApplicationRequest::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationRequest.status)
}

// -------------------------------------------------------------------

// ChangeStatusRuntimeAndApplicationResponse

// string msg = 1 [json_name = "msg"];
inline void ChangeStatusRuntimeAndApplicationResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& ChangeStatusRuntimeAndApplicationResponse::msg() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangeStatusRuntimeAndApplicationResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationResponse.msg)
}
inline std::string* ChangeStatusRuntimeAndApplicationResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationResponse.msg)
  return _s;
}
inline const std::string& ChangeStatusRuntimeAndApplicationResponse::_internal_msg() const {
  return msg_.Get();
}
inline void ChangeStatusRuntimeAndApplicationResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChangeStatusRuntimeAndApplicationResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChangeStatusRuntimeAndApplicationResponse::release_msg() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChangeStatusRuntimeAndApplicationResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void ChangeStatusRuntimeAndApplicationResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& ChangeStatusRuntimeAndApplicationResponse::error() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChangeStatusRuntimeAndApplicationResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationResponse.error)
}
inline std::string* ChangeStatusRuntimeAndApplicationResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationResponse.error)
  return _s;
}
inline const std::string& ChangeStatusRuntimeAndApplicationResponse::_internal_error() const {
  return error_.Get();
}
inline void ChangeStatusRuntimeAndApplicationResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChangeStatusRuntimeAndApplicationResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChangeStatusRuntimeAndApplicationResponse::release_error() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChangeStatusRuntimeAndApplicationResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.ChangeStatusRuntimeAndApplicationResponse.error)
}

// -------------------------------------------------------------------

// UpdateApplicationChangesRequest

// string application_id = 1 [json_name = "applicationId"];
inline void UpdateApplicationChangesRequest::clear_application_id() {
  application_id_.ClearToEmpty();
}
inline const std::string& UpdateApplicationChangesRequest::application_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest.application_id)
  return _internal_application_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateApplicationChangesRequest::set_application_id(ArgT0&& arg0, ArgT... args) {
 
 application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest.application_id)
}
inline std::string* UpdateApplicationChangesRequest::mutable_application_id() {
  std::string* _s = _internal_mutable_application_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest.application_id)
  return _s;
}
inline const std::string& UpdateApplicationChangesRequest::_internal_application_id() const {
  return application_id_.Get();
}
inline void UpdateApplicationChangesRequest::_internal_set_application_id(const std::string& value) {
  
  application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateApplicationChangesRequest::_internal_mutable_application_id() {
  
  return application_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateApplicationChangesRequest::release_application_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest.application_id)
  return application_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateApplicationChangesRequest::set_allocated_application_id(std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest.application_id)
}

// string project_id = 2 [json_name = "projectId"];
inline void UpdateApplicationChangesRequest::clear_project_id() {
  project_id_.ClearToEmpty();
}
inline const std::string& UpdateApplicationChangesRequest::project_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest.project_id)
  return _internal_project_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateApplicationChangesRequest::set_project_id(ArgT0&& arg0, ArgT... args) {
 
 project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest.project_id)
}
inline std::string* UpdateApplicationChangesRequest::mutable_project_id() {
  std::string* _s = _internal_mutable_project_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest.project_id)
  return _s;
}
inline const std::string& UpdateApplicationChangesRequest::_internal_project_id() const {
  return project_id_.Get();
}
inline void UpdateApplicationChangesRequest::_internal_set_project_id(const std::string& value) {
  
  project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateApplicationChangesRequest::_internal_mutable_project_id() {
  
  return project_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateApplicationChangesRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest.project_id)
  return project_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateApplicationChangesRequest::set_allocated_project_id(std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), project_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest.project_id)
}

// string organization_id = 3 [json_name = "organizationId"];
inline void UpdateApplicationChangesRequest::clear_organization_id() {
  organization_id_.ClearToEmpty();
}
inline const std::string& UpdateApplicationChangesRequest::organization_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest.organization_id)
  return _internal_organization_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateApplicationChangesRequest::set_organization_id(ArgT0&& arg0, ArgT... args) {
 
 organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest.organization_id)
}
inline std::string* UpdateApplicationChangesRequest::mutable_organization_id() {
  std::string* _s = _internal_mutable_organization_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest.organization_id)
  return _s;
}
inline const std::string& UpdateApplicationChangesRequest::_internal_organization_id() const {
  return organization_id_.Get();
}
inline void UpdateApplicationChangesRequest::_internal_set_organization_id(const std::string& value) {
  
  organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateApplicationChangesRequest::_internal_mutable_organization_id() {
  
  return organization_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateApplicationChangesRequest::release_organization_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest.organization_id)
  return organization_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateApplicationChangesRequest::set_allocated_organization_id(std::string* organization_id) {
  if (organization_id != nullptr) {
    
  } else {
    
  }
  organization_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), organization_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest.organization_id)
}

// string runtime_id = 4 [json_name = "runtimeId"];
inline void UpdateApplicationChangesRequest::clear_runtime_id() {
  runtime_id_.ClearToEmpty();
}
inline const std::string& UpdateApplicationChangesRequest::runtime_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest.runtime_id)
  return _internal_runtime_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateApplicationChangesRequest::set_runtime_id(ArgT0&& arg0, ArgT... args) {
 
 runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest.runtime_id)
}
inline std::string* UpdateApplicationChangesRequest::mutable_runtime_id() {
  std::string* _s = _internal_mutable_runtime_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest.runtime_id)
  return _s;
}
inline const std::string& UpdateApplicationChangesRequest::_internal_runtime_id() const {
  return runtime_id_.Get();
}
inline void UpdateApplicationChangesRequest::_internal_set_runtime_id(const std::string& value) {
  
  runtime_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateApplicationChangesRequest::_internal_mutable_runtime_id() {
  
  return runtime_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateApplicationChangesRequest::release_runtime_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest.runtime_id)
  return runtime_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateApplicationChangesRequest::set_allocated_runtime_id(std::string* runtime_id) {
  if (runtime_id != nullptr) {
    
  } else {
    
  }
  runtime_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), runtime_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.UpdateApplicationChangesRequest.runtime_id)
}

// -------------------------------------------------------------------

// UpdateApplicationChangesResponse

// string msg = 1 [json_name = "msg"];
inline void UpdateApplicationChangesResponse::clear_msg() {
  msg_.ClearToEmpty();
}
inline const std::string& UpdateApplicationChangesResponse::msg() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.UpdateApplicationChangesResponse.msg)
  return _internal_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateApplicationChangesResponse::set_msg(ArgT0&& arg0, ArgT... args) {
 
 msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.UpdateApplicationChangesResponse.msg)
}
inline std::string* UpdateApplicationChangesResponse::mutable_msg() {
  std::string* _s = _internal_mutable_msg();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.UpdateApplicationChangesResponse.msg)
  return _s;
}
inline const std::string& UpdateApplicationChangesResponse::_internal_msg() const {
  return msg_.Get();
}
inline void UpdateApplicationChangesResponse::_internal_set_msg(const std::string& value) {
  
  msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateApplicationChangesResponse::_internal_mutable_msg() {
  
  return msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateApplicationChangesResponse::release_msg() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.UpdateApplicationChangesResponse.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateApplicationChangesResponse::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.UpdateApplicationChangesResponse.msg)
}

// string error = 2 [json_name = "error"];
inline void UpdateApplicationChangesResponse::clear_error() {
  error_.ClearToEmpty();
}
inline const std::string& UpdateApplicationChangesResponse::error() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.UpdateApplicationChangesResponse.error)
  return _internal_error();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdateApplicationChangesResponse::set_error(ArgT0&& arg0, ArgT... args) {
 
 error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.UpdateApplicationChangesResponse.error)
}
inline std::string* UpdateApplicationChangesResponse::mutable_error() {
  std::string* _s = _internal_mutable_error();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.UpdateApplicationChangesResponse.error)
  return _s;
}
inline const std::string& UpdateApplicationChangesResponse::_internal_error() const {
  return error_.Get();
}
inline void UpdateApplicationChangesResponse::_internal_set_error(const std::string& value) {
  
  error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdateApplicationChangesResponse::_internal_mutable_error() {
  
  return error_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdateApplicationChangesResponse::release_error() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.UpdateApplicationChangesResponse.error)
  return error_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdateApplicationChangesResponse::set_allocated_error(std::string* error) {
  if (error != nullptr) {
    
  } else {
    
  }
  error_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), error,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.UpdateApplicationChangesResponse.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace runtime
}  // namespace pipelines

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pipelines_2fruntime_2fv1alpha1_2fruntime_5fapi_2eproto
