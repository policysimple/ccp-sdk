// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pipelines/runtime/v1alpha1/runtime_api.proto

#include "pipelines/runtime/v1alpha1/runtime_api.pb.h"
#include "pipelines/runtime/v1alpha1/runtime_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pipelines {
namespace runtime {
namespace v1alpha1 {

static const char* RuntimeAPIService_method_names[] = {
  "/pipelines.runtime.v1alpha1.RuntimeAPIService/GetRuntime",
  "/pipelines.runtime.v1alpha1.RuntimeAPIService/CreateRuntime",
  "/pipelines.runtime.v1alpha1.RuntimeAPIService/UpdateRuntime",
  "/pipelines.runtime.v1alpha1.RuntimeAPIService/UpdateResponseMessageRuntime",
  "/pipelines.runtime.v1alpha1.RuntimeAPIService/ResponseMessageDeleteRuntimeByAppId",
  "/pipelines.runtime.v1alpha1.RuntimeAPIService/DeleteRuntime",
  "/pipelines.runtime.v1alpha1.RuntimeAPIService/DeleteRuntimesByApplication",
  "/pipelines.runtime.v1alpha1.RuntimeAPIService/ListRuntimes",
  "/pipelines.runtime.v1alpha1.RuntimeAPIService/RefreshRuntime",
};

std::unique_ptr< RuntimeAPIService::Stub> RuntimeAPIService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RuntimeAPIService::Stub> stub(new RuntimeAPIService::Stub(channel));
  return stub;
}

RuntimeAPIService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_GetRuntime_(RuntimeAPIService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateRuntime_(RuntimeAPIService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateRuntime_(RuntimeAPIService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateResponseMessageRuntime_(RuntimeAPIService_method_names[3], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ResponseMessageDeleteRuntimeByAppId_(RuntimeAPIService_method_names[4], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRuntime_(RuntimeAPIService_method_names[5], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRuntimesByApplication_(RuntimeAPIService_method_names[6], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListRuntimes_(RuntimeAPIService_method_names[7], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RefreshRuntime_(RuntimeAPIService_method_names[8], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RuntimeAPIService::Stub::GetRuntime(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::GetRuntimeRequest& request, ::pipelines::runtime::v1alpha1::GetRuntimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_GetRuntime_, context, request, response);
}

void RuntimeAPIService::Stub::experimental_async::GetRuntime(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::GetRuntimeRequest* request, ::pipelines::runtime::v1alpha1::GetRuntimeResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_GetRuntime_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::GetRuntimeResponse>* RuntimeAPIService::Stub::AsyncGetRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::GetRuntimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::GetRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_GetRuntime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::GetRuntimeResponse>* RuntimeAPIService::Stub::PrepareAsyncGetRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::GetRuntimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::GetRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_GetRuntime_, context, request, false);
}

::grpc::Status RuntimeAPIService::Stub::CreateRuntime(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::CreateRuntimeRequest& request, ::pipelines::runtime::v1alpha1::CreateRuntimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateRuntime_, context, request, response);
}

void RuntimeAPIService::Stub::experimental_async::CreateRuntime(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::CreateRuntimeRequest* request, ::pipelines::runtime::v1alpha1::CreateRuntimeResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateRuntime_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::CreateRuntimeResponse>* RuntimeAPIService::Stub::AsyncCreateRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::CreateRuntimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::CreateRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_CreateRuntime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::CreateRuntimeResponse>* RuntimeAPIService::Stub::PrepareAsyncCreateRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::CreateRuntimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::CreateRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_CreateRuntime_, context, request, false);
}

::grpc::Status RuntimeAPIService::Stub::UpdateRuntime(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::UpdateRuntimeRequest& request, ::pipelines::runtime::v1alpha1::UpdateRuntimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateRuntime_, context, request, response);
}

void RuntimeAPIService::Stub::experimental_async::UpdateRuntime(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::UpdateRuntimeRequest* request, ::pipelines::runtime::v1alpha1::UpdateRuntimeResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateRuntime_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::UpdateRuntimeResponse>* RuntimeAPIService::Stub::AsyncUpdateRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::UpdateRuntimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::UpdateRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_UpdateRuntime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::UpdateRuntimeResponse>* RuntimeAPIService::Stub::PrepareAsyncUpdateRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::UpdateRuntimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::UpdateRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_UpdateRuntime_, context, request, false);
}

::grpc::Status RuntimeAPIService::Stub::UpdateResponseMessageRuntime(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::UpdateResponseMessageRuntimeRequest& request, ::pipelines::runtime::v1alpha1::UpdateResponseMessageRuntimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateResponseMessageRuntime_, context, request, response);
}

void RuntimeAPIService::Stub::experimental_async::UpdateResponseMessageRuntime(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::UpdateResponseMessageRuntimeRequest* request, ::pipelines::runtime::v1alpha1::UpdateResponseMessageRuntimeResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateResponseMessageRuntime_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::UpdateResponseMessageRuntimeResponse>* RuntimeAPIService::Stub::AsyncUpdateResponseMessageRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::UpdateResponseMessageRuntimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::UpdateResponseMessageRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_UpdateResponseMessageRuntime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::UpdateResponseMessageRuntimeResponse>* RuntimeAPIService::Stub::PrepareAsyncUpdateResponseMessageRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::UpdateResponseMessageRuntimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::UpdateResponseMessageRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_UpdateResponseMessageRuntime_, context, request, false);
}

::grpc::Status RuntimeAPIService::Stub::ResponseMessageDeleteRuntimeByAppId(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::ResponseMessageDeleteRuntimeByAppIdRequest& request, ::pipelines::runtime::v1alpha1::ResponseMessageDeleteRuntimeByAppIdResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ResponseMessageDeleteRuntimeByAppId_, context, request, response);
}

void RuntimeAPIService::Stub::experimental_async::ResponseMessageDeleteRuntimeByAppId(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::ResponseMessageDeleteRuntimeByAppIdRequest* request, ::pipelines::runtime::v1alpha1::ResponseMessageDeleteRuntimeByAppIdResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ResponseMessageDeleteRuntimeByAppId_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::ResponseMessageDeleteRuntimeByAppIdResponse>* RuntimeAPIService::Stub::AsyncResponseMessageDeleteRuntimeByAppIdRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::ResponseMessageDeleteRuntimeByAppIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::ResponseMessageDeleteRuntimeByAppIdResponse>::Create(channel_.get(), cq, rpcmethod_ResponseMessageDeleteRuntimeByAppId_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::ResponseMessageDeleteRuntimeByAppIdResponse>* RuntimeAPIService::Stub::PrepareAsyncResponseMessageDeleteRuntimeByAppIdRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::ResponseMessageDeleteRuntimeByAppIdRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::ResponseMessageDeleteRuntimeByAppIdResponse>::Create(channel_.get(), cq, rpcmethod_ResponseMessageDeleteRuntimeByAppId_, context, request, false);
}

::grpc::Status RuntimeAPIService::Stub::DeleteRuntime(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::DeleteRuntimeRequest& request, ::pipelines::runtime::v1alpha1::DeleteRuntimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteRuntime_, context, request, response);
}

void RuntimeAPIService::Stub::experimental_async::DeleteRuntime(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::DeleteRuntimeRequest* request, ::pipelines::runtime::v1alpha1::DeleteRuntimeResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRuntime_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::DeleteRuntimeResponse>* RuntimeAPIService::Stub::AsyncDeleteRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::DeleteRuntimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::DeleteRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_DeleteRuntime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::DeleteRuntimeResponse>* RuntimeAPIService::Stub::PrepareAsyncDeleteRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::DeleteRuntimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::DeleteRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_DeleteRuntime_, context, request, false);
}

::grpc::Status RuntimeAPIService::Stub::DeleteRuntimesByApplication(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::DeleteRuntimesByApplicationRequest& request, ::pipelines::runtime::v1alpha1::DeleteRuntimesByApplicationResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteRuntimesByApplication_, context, request, response);
}

void RuntimeAPIService::Stub::experimental_async::DeleteRuntimesByApplication(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::DeleteRuntimesByApplicationRequest* request, ::pipelines::runtime::v1alpha1::DeleteRuntimesByApplicationResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRuntimesByApplication_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::DeleteRuntimesByApplicationResponse>* RuntimeAPIService::Stub::AsyncDeleteRuntimesByApplicationRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::DeleteRuntimesByApplicationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::DeleteRuntimesByApplicationResponse>::Create(channel_.get(), cq, rpcmethod_DeleteRuntimesByApplication_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::DeleteRuntimesByApplicationResponse>* RuntimeAPIService::Stub::PrepareAsyncDeleteRuntimesByApplicationRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::DeleteRuntimesByApplicationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::DeleteRuntimesByApplicationResponse>::Create(channel_.get(), cq, rpcmethod_DeleteRuntimesByApplication_, context, request, false);
}

::grpc::Status RuntimeAPIService::Stub::ListRuntimes(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::ListRuntimesRequest& request, ::pipelines::runtime::v1alpha1::ListRuntimesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_ListRuntimes_, context, request, response);
}

void RuntimeAPIService::Stub::experimental_async::ListRuntimes(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::ListRuntimesRequest* request, ::pipelines::runtime::v1alpha1::ListRuntimesResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_ListRuntimes_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::ListRuntimesResponse>* RuntimeAPIService::Stub::AsyncListRuntimesRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::ListRuntimesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::ListRuntimesResponse>::Create(channel_.get(), cq, rpcmethod_ListRuntimes_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::ListRuntimesResponse>* RuntimeAPIService::Stub::PrepareAsyncListRuntimesRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::ListRuntimesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::ListRuntimesResponse>::Create(channel_.get(), cq, rpcmethod_ListRuntimes_, context, request, false);
}

::grpc::Status RuntimeAPIService::Stub::RefreshRuntime(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::RefreshRuntimeRequest& request, ::pipelines::runtime::v1alpha1::RefreshRuntimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_RefreshRuntime_, context, request, response);
}

void RuntimeAPIService::Stub::experimental_async::RefreshRuntime(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::RefreshRuntimeRequest* request, ::pipelines::runtime::v1alpha1::RefreshRuntimeResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_RefreshRuntime_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::RefreshRuntimeResponse>* RuntimeAPIService::Stub::AsyncRefreshRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::RefreshRuntimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::RefreshRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_RefreshRuntime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::RefreshRuntimeResponse>* RuntimeAPIService::Stub::PrepareAsyncRefreshRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::RefreshRuntimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::RefreshRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_RefreshRuntime_, context, request, false);
}

RuntimeAPIService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeAPIService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeAPIService::Service, ::pipelines::runtime::v1alpha1::GetRuntimeRequest, ::pipelines::runtime::v1alpha1::GetRuntimeResponse>(
          std::mem_fn(&RuntimeAPIService::Service::GetRuntime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeAPIService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeAPIService::Service, ::pipelines::runtime::v1alpha1::CreateRuntimeRequest, ::pipelines::runtime::v1alpha1::CreateRuntimeResponse>(
          std::mem_fn(&RuntimeAPIService::Service::CreateRuntime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeAPIService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeAPIService::Service, ::pipelines::runtime::v1alpha1::UpdateRuntimeRequest, ::pipelines::runtime::v1alpha1::UpdateRuntimeResponse>(
          std::mem_fn(&RuntimeAPIService::Service::UpdateRuntime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeAPIService_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeAPIService::Service, ::pipelines::runtime::v1alpha1::UpdateResponseMessageRuntimeRequest, ::pipelines::runtime::v1alpha1::UpdateResponseMessageRuntimeResponse>(
          std::mem_fn(&RuntimeAPIService::Service::UpdateResponseMessageRuntime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeAPIService_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeAPIService::Service, ::pipelines::runtime::v1alpha1::ResponseMessageDeleteRuntimeByAppIdRequest, ::pipelines::runtime::v1alpha1::ResponseMessageDeleteRuntimeByAppIdResponse>(
          std::mem_fn(&RuntimeAPIService::Service::ResponseMessageDeleteRuntimeByAppId), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeAPIService_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeAPIService::Service, ::pipelines::runtime::v1alpha1::DeleteRuntimeRequest, ::pipelines::runtime::v1alpha1::DeleteRuntimeResponse>(
          std::mem_fn(&RuntimeAPIService::Service::DeleteRuntime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeAPIService_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeAPIService::Service, ::pipelines::runtime::v1alpha1::DeleteRuntimesByApplicationRequest, ::pipelines::runtime::v1alpha1::DeleteRuntimesByApplicationResponse>(
          std::mem_fn(&RuntimeAPIService::Service::DeleteRuntimesByApplication), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeAPIService_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeAPIService::Service, ::pipelines::runtime::v1alpha1::ListRuntimesRequest, ::pipelines::runtime::v1alpha1::ListRuntimesResponse>(
          std::mem_fn(&RuntimeAPIService::Service::ListRuntimes), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeAPIService_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeAPIService::Service, ::pipelines::runtime::v1alpha1::RefreshRuntimeRequest, ::pipelines::runtime::v1alpha1::RefreshRuntimeResponse>(
          std::mem_fn(&RuntimeAPIService::Service::RefreshRuntime), this)));
}

RuntimeAPIService::Service::~Service() {
}

::grpc::Status RuntimeAPIService::Service::GetRuntime(::grpc::ServerContext* context, const ::pipelines::runtime::v1alpha1::GetRuntimeRequest* request, ::pipelines::runtime::v1alpha1::GetRuntimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeAPIService::Service::CreateRuntime(::grpc::ServerContext* context, const ::pipelines::runtime::v1alpha1::CreateRuntimeRequest* request, ::pipelines::runtime::v1alpha1::CreateRuntimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeAPIService::Service::UpdateRuntime(::grpc::ServerContext* context, const ::pipelines::runtime::v1alpha1::UpdateRuntimeRequest* request, ::pipelines::runtime::v1alpha1::UpdateRuntimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeAPIService::Service::UpdateResponseMessageRuntime(::grpc::ServerContext* context, const ::pipelines::runtime::v1alpha1::UpdateResponseMessageRuntimeRequest* request, ::pipelines::runtime::v1alpha1::UpdateResponseMessageRuntimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeAPIService::Service::ResponseMessageDeleteRuntimeByAppId(::grpc::ServerContext* context, const ::pipelines::runtime::v1alpha1::ResponseMessageDeleteRuntimeByAppIdRequest* request, ::pipelines::runtime::v1alpha1::ResponseMessageDeleteRuntimeByAppIdResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeAPIService::Service::DeleteRuntime(::grpc::ServerContext* context, const ::pipelines::runtime::v1alpha1::DeleteRuntimeRequest* request, ::pipelines::runtime::v1alpha1::DeleteRuntimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeAPIService::Service::DeleteRuntimesByApplication(::grpc::ServerContext* context, const ::pipelines::runtime::v1alpha1::DeleteRuntimesByApplicationRequest* request, ::pipelines::runtime::v1alpha1::DeleteRuntimesByApplicationResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeAPIService::Service::ListRuntimes(::grpc::ServerContext* context, const ::pipelines::runtime::v1alpha1::ListRuntimesRequest* request, ::pipelines::runtime::v1alpha1::ListRuntimesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeAPIService::Service::RefreshRuntime(::grpc::ServerContext* context, const ::pipelines::runtime::v1alpha1::RefreshRuntimeRequest* request, ::pipelines::runtime::v1alpha1::RefreshRuntimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pipelines
}  // namespace runtime
}  // namespace v1alpha1

