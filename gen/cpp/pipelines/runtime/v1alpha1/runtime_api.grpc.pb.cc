// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pipelines/runtime/v1alpha1/runtime_api.proto

#include "pipelines/runtime/v1alpha1/runtime_api.pb.h"
#include "pipelines/runtime/v1alpha1/runtime_api.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace pipelines {
namespace runtime {
namespace v1alpha1 {

static const char* RuntimeAPIService_method_names[] = {
  "/pipelines.runtime.v1alpha1.RuntimeAPIService/CreateRuntime",
  "/pipelines.runtime.v1alpha1.RuntimeAPIService/UpdateRuntime",
  "/pipelines.runtime.v1alpha1.RuntimeAPIService/DeleteRuntime",
};

std::unique_ptr< RuntimeAPIService::Stub> RuntimeAPIService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< RuntimeAPIService::Stub> stub(new RuntimeAPIService::Stub(channel));
  return stub;
}

RuntimeAPIService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_CreateRuntime_(RuntimeAPIService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateRuntime_(RuntimeAPIService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteRuntime_(RuntimeAPIService_method_names[2], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status RuntimeAPIService::Stub::CreateRuntime(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::CreateRuntimeRequest& request, ::pipelines::runtime::v1alpha1::CreateRuntimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_CreateRuntime_, context, request, response);
}

void RuntimeAPIService::Stub::experimental_async::CreateRuntime(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::CreateRuntimeRequest* request, ::pipelines::runtime::v1alpha1::CreateRuntimeResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_CreateRuntime_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::CreateRuntimeResponse>* RuntimeAPIService::Stub::AsyncCreateRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::CreateRuntimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::CreateRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_CreateRuntime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::CreateRuntimeResponse>* RuntimeAPIService::Stub::PrepareAsyncCreateRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::CreateRuntimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::CreateRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_CreateRuntime_, context, request, false);
}

::grpc::Status RuntimeAPIService::Stub::UpdateRuntime(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::UpdateRuntimeRequest& request, ::pipelines::runtime::v1alpha1::UpdateRuntimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_UpdateRuntime_, context, request, response);
}

void RuntimeAPIService::Stub::experimental_async::UpdateRuntime(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::UpdateRuntimeRequest* request, ::pipelines::runtime::v1alpha1::UpdateRuntimeResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_UpdateRuntime_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::UpdateRuntimeResponse>* RuntimeAPIService::Stub::AsyncUpdateRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::UpdateRuntimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::UpdateRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_UpdateRuntime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::UpdateRuntimeResponse>* RuntimeAPIService::Stub::PrepareAsyncUpdateRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::UpdateRuntimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::UpdateRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_UpdateRuntime_, context, request, false);
}

::grpc::Status RuntimeAPIService::Stub::DeleteRuntime(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::DeleteRuntimeRequest& request, ::pipelines::runtime::v1alpha1::DeleteRuntimeResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_DeleteRuntime_, context, request, response);
}

void RuntimeAPIService::Stub::experimental_async::DeleteRuntime(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::DeleteRuntimeRequest* request, ::pipelines::runtime::v1alpha1::DeleteRuntimeResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_DeleteRuntime_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::DeleteRuntimeResponse>* RuntimeAPIService::Stub::AsyncDeleteRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::DeleteRuntimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::DeleteRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_DeleteRuntime_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::pipelines::runtime::v1alpha1::DeleteRuntimeResponse>* RuntimeAPIService::Stub::PrepareAsyncDeleteRuntimeRaw(::grpc::ClientContext* context, const ::pipelines::runtime::v1alpha1::DeleteRuntimeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::pipelines::runtime::v1alpha1::DeleteRuntimeResponse>::Create(channel_.get(), cq, rpcmethod_DeleteRuntime_, context, request, false);
}

RuntimeAPIService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeAPIService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeAPIService::Service, ::pipelines::runtime::v1alpha1::CreateRuntimeRequest, ::pipelines::runtime::v1alpha1::CreateRuntimeResponse>(
          std::mem_fn(&RuntimeAPIService::Service::CreateRuntime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeAPIService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeAPIService::Service, ::pipelines::runtime::v1alpha1::UpdateRuntimeRequest, ::pipelines::runtime::v1alpha1::UpdateRuntimeResponse>(
          std::mem_fn(&RuntimeAPIService::Service::UpdateRuntime), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      RuntimeAPIService_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< RuntimeAPIService::Service, ::pipelines::runtime::v1alpha1::DeleteRuntimeRequest, ::pipelines::runtime::v1alpha1::DeleteRuntimeResponse>(
          std::mem_fn(&RuntimeAPIService::Service::DeleteRuntime), this)));
}

RuntimeAPIService::Service::~Service() {
}

::grpc::Status RuntimeAPIService::Service::CreateRuntime(::grpc::ServerContext* context, const ::pipelines::runtime::v1alpha1::CreateRuntimeRequest* request, ::pipelines::runtime::v1alpha1::CreateRuntimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeAPIService::Service::UpdateRuntime(::grpc::ServerContext* context, const ::pipelines::runtime::v1alpha1::UpdateRuntimeRequest* request, ::pipelines::runtime::v1alpha1::UpdateRuntimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status RuntimeAPIService::Service::DeleteRuntime(::grpc::ServerContext* context, const ::pipelines::runtime::v1alpha1::DeleteRuntimeRequest* request, ::pipelines::runtime::v1alpha1::DeleteRuntimeResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace pipelines
}  // namespace runtime
}  // namespace v1alpha1

