// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipelines/runtime/v1alpha1/runtime.proto

#include "pipelines/runtime/v1alpha1/runtime.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace pipelines {
namespace runtime {
namespace v1alpha1 {
constexpr Branch::Branch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sha_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct BranchDefaultTypeInternal {
  constexpr BranchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BranchDefaultTypeInternal() {}
  union {
    Branch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BranchDefaultTypeInternal _Branch_default_instance_;
constexpr Repository::Repository(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , full_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , clone_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , provider_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , branch_(nullptr)
  , fork_(false)
  , private__(false)
  , repository_id_(0){}
struct RepositoryDefaultTypeInternal {
  constexpr RepositoryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RepositoryDefaultTypeInternal() {}
  union {
    Repository _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RepositoryDefaultTypeInternal _Repository_default_instance_;
constexpr Command::Command(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : build_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , run_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct CommandDefaultTypeInternal {
  constexpr CommandDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CommandDefaultTypeInternal() {}
  union {
    Command _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CommandDefaultTypeInternal _Command_default_instance_;
constexpr Env::Env(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , key_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , encrypted_(false){}
struct EnvDefaultTypeInternal {
  constexpr EnvDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~EnvDefaultTypeInternal() {}
  union {
    Env _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT EnvDefaultTypeInternal _Env_default_instance_;
constexpr Configuration::Configuration(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : envs_()
  , commands_()
  , runtime_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0){}
struct ConfigurationDefaultTypeInternal {
  constexpr ConfigurationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigurationDefaultTypeInternal() {}
  union {
    Configuration _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigurationDefaultTypeInternal _Configuration_default_instance_;
constexpr ConfigurationUpdate::ConfigurationUpdate(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : envs_()
  , instance_type_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ConfigurationUpdateDefaultTypeInternal {
  constexpr ConfigurationUpdateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ConfigurationUpdateDefaultTypeInternal() {}
  union {
    ConfigurationUpdate _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ConfigurationUpdateDefaultTypeInternal _ConfigurationUpdate_default_instance_;
constexpr Scaling::Scaling(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cpu_rule_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cool_down_period_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , polling_interval_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , min_replica_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , max_replica_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , memory_rule_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ScalingDefaultTypeInternal {
  constexpr ScalingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ScalingDefaultTypeInternal() {}
  union {
    Scaling _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ScalingDefaultTypeInternal _Scaling_default_instance_;
constexpr ContainerRegistry::ContainerRegistry(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : registry_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , registry_user_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , reg_cred_auth_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , image_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ContainerRegistryDefaultTypeInternal {
  constexpr ContainerRegistryDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ContainerRegistryDefaultTypeInternal() {}
  union {
    ContainerRegistry _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ContainerRegistryDefaultTypeInternal _ContainerRegistry_default_instance_;
constexpr Application::Application(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , integration_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_project_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_image_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_description_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , docker_image_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , application_status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , dockerfile_path_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , repository_(nullptr)
  , configuration_(nullptr)
  , scaling_(nullptr)
  , container_registry_(nullptr)
  , traffic_type_(0)

  , docker_image_buildpack_(0)

  , integration_status_(false)
  , no_docker_exists_(false){}
struct ApplicationDefaultTypeInternal {
  constexpr ApplicationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ApplicationDefaultTypeInternal() {}
  union {
    Application _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ApplicationDefaultTypeInternal _Application_default_instance_;
constexpr Runtime_IntegrationEntry_DoNotUse::Runtime_IntegrationEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Runtime_IntegrationEntry_DoNotUseDefaultTypeInternal {
  constexpr Runtime_IntegrationEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Runtime_IntegrationEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Runtime_IntegrationEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Runtime_IntegrationEntry_DoNotUseDefaultTypeInternal _Runtime_IntegrationEntry_DoNotUse_default_instance_;
constexpr Runtime_EnvironmentVariablesEntry_DoNotUse::Runtime_EnvironmentVariablesEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Runtime_EnvironmentVariablesEntry_DoNotUseDefaultTypeInternal {
  constexpr Runtime_EnvironmentVariablesEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Runtime_EnvironmentVariablesEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Runtime_EnvironmentVariablesEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Runtime_EnvironmentVariablesEntry_DoNotUseDefaultTypeInternal _Runtime_EnvironmentVariablesEntry_DoNotUse_default_instance_;
constexpr Runtime_CommandsEntry_DoNotUse::Runtime_CommandsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Runtime_CommandsEntry_DoNotUseDefaultTypeInternal {
  constexpr Runtime_CommandsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Runtime_CommandsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Runtime_CommandsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Runtime_CommandsEntry_DoNotUseDefaultTypeInternal _Runtime_CommandsEntry_DoNotUse_default_instance_;
constexpr Runtime_SecretsEntry_DoNotUse::Runtime_SecretsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Runtime_SecretsEntry_DoNotUseDefaultTypeInternal {
  constexpr Runtime_SecretsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Runtime_SecretsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Runtime_SecretsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Runtime_SecretsEntry_DoNotUseDefaultTypeInternal _Runtime_SecretsEntry_DoNotUse_default_instance_;
constexpr Runtime_ExtraArgsEntry_DoNotUse::Runtime_ExtraArgsEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Runtime_ExtraArgsEntry_DoNotUseDefaultTypeInternal {
  constexpr Runtime_ExtraArgsEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Runtime_ExtraArgsEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Runtime_ExtraArgsEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Runtime_ExtraArgsEntry_DoNotUseDefaultTypeInternal _Runtime_ExtraArgsEntry_DoNotUse_default_instance_;
constexpr Runtime::Runtime(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : instance_types_()
  , integration_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , environment_variables_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , commands_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , secrets_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , extra_args_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , before_deploy_tasks_()
  , after_deploy_tasks_()
  , params_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_project_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , application_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , workspace_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , environment_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , scaler_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pod_status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pod_status_msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , response_message_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , environment_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , environment_internal_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , application_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , integration_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pod_ingress_cert_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , host_url_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , app_label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , created_at_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , updated_at_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , tag_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , user_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , application_data_(nullptr)
  , pipeline_run_(nullptr)
  , configuration_(nullptr)
  , scaling_(nullptr)
  , traffic_type_(0)

  , storage_used_(0u)
  , storage_limit_(0u)
  , custom_pipeline_(false)
  , is_not_exist_dockerfile_(false)
  , is_enabled_application_(false)
  , is_enabled_(false){}
struct RuntimeDefaultTypeInternal {
  constexpr RuntimeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RuntimeDefaultTypeInternal() {}
  union {
    Runtime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RuntimeDefaultTypeInternal _Runtime_default_instance_;
constexpr UpdateRuntime::UpdateRuntime(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , application_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , branch_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , organization_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , project_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , configuration_(nullptr)
  , scaling_(nullptr)
  , traffic_type_(0)
{}
struct UpdateRuntimeDefaultTypeInternal {
  constexpr UpdateRuntimeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UpdateRuntimeDefaultTypeInternal() {}
  union {
    UpdateRuntime _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UpdateRuntimeDefaultTypeInternal _UpdateRuntime_default_instance_;
constexpr RuntimeList::RuntimeList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : items_(){}
struct RuntimeListDefaultTypeInternal {
  constexpr RuntimeListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RuntimeListDefaultTypeInternal() {}
  union {
    RuntimeList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RuntimeListDefaultTypeInternal _RuntimeList_default_instance_;
constexpr IntanceType::IntanceType(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : resources_rules_()
  , id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct IntanceTypeDefaultTypeInternal {
  constexpr IntanceTypeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IntanceTypeDefaultTypeInternal() {}
  union {
    IntanceType _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IntanceTypeDefaultTypeInternal _IntanceType_default_instance_;
constexpr ResourcesRules::ResourcesRules(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : limit_()
  , request_(){}
struct ResourcesRulesDefaultTypeInternal {
  constexpr ResourcesRulesDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ResourcesRulesDefaultTypeInternal() {}
  union {
    ResourcesRules _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ResourcesRulesDefaultTypeInternal _ResourcesRules_default_instance_;
constexpr Limit::Limit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cpu_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ram_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct LimitDefaultTypeInternal {
  constexpr LimitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~LimitDefaultTypeInternal() {}
  union {
    Limit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT LimitDefaultTypeInternal _Limit_default_instance_;
constexpr Request::Request(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : cpu_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ram_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct RequestDefaultTypeInternal {
  constexpr RequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RequestDefaultTypeInternal() {}
  union {
    Request _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RequestDefaultTypeInternal _Request_default_instance_;
constexpr PipelineRun::PipelineRun(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , label_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , namespace__(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , pipeline_run_status_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PipelineRunDefaultTypeInternal {
  constexpr PipelineRunDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PipelineRunDefaultTypeInternal() {}
  union {
    PipelineRun _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PipelineRunDefaultTypeInternal _PipelineRun_default_instance_;
}  // namespace v1alpha1
}  // namespace runtime
}  // namespace pipelines
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[22];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Branch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Branch, name_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Branch, sha_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Branch, url_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Repository, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Repository, name_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Repository, full_name_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Repository, description_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Repository, fork_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Repository, clone_url_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Repository, private__),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Repository, branch_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Repository, repository_id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Repository, provider_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Command, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Command, build_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Command, run_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Env, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Env, value_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Env, key_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Env, encrypted_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Configuration, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Configuration, envs_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Configuration, commands_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Configuration, port_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Configuration, runtime_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::ConfigurationUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::ConfigurationUpdate, envs_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::ConfigurationUpdate, instance_type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Scaling, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Scaling, cpu_rule_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Scaling, cool_down_period_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Scaling, polling_interval_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Scaling, min_replica_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Scaling, max_replica_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Scaling, memory_rule_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::ContainerRegistry, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::ContainerRegistry, registry_url_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::ContainerRegistry, registry_user_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::ContainerRegistry, reg_cred_auth_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::ContainerRegistry, image_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Application, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Application, id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Application, name_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Application, integration_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Application, repository_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Application, configuration_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Application, project_id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Application, name_project_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Application, project_image_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Application, project_description_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Application, organization_id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Application, scaling_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Application, traffic_type_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Application, integration_status_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Application, docker_image_buildpack_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Application, no_docker_exists_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Application, container_registry_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Application, docker_image_name_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Application, application_status_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Application, dockerfile_path_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime_IntegrationEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime_IntegrationEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime_IntegrationEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime_IntegrationEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime_EnvironmentVariablesEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime_EnvironmentVariablesEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime_EnvironmentVariablesEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime_EnvironmentVariablesEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime_CommandsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime_CommandsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime_CommandsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime_CommandsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime_SecretsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime_SecretsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime_SecretsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime_SecretsEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime_ExtraArgsEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime_ExtraArgsEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime_ExtraArgsEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime_ExtraArgsEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, name_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, instance_types_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, organization_id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, project_id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, name_project_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, application_id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, workspace_id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, environment_id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, scaler_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, pod_status_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, pod_status_msg_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, integration_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, environment_variables_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, commands_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, secrets_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, extra_args_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, traffic_type_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, response_message_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, environment_name_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, environment_internal_name_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, application_name_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, storage_used_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, storage_limit_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, integration_id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, application_data_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, custom_pipeline_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, before_deploy_tasks_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, after_deploy_tasks_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, pod_ingress_cert_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, is_not_exist_dockerfile_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, params_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, pipeline_run_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, host_url_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, app_label_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, created_at_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, updated_at_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, is_enabled_application_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, is_enabled_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, configuration_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, scaling_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, tag_name_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Runtime, user_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::UpdateRuntime, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::UpdateRuntime, id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::UpdateRuntime, application_id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::UpdateRuntime, traffic_type_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::UpdateRuntime, configuration_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::UpdateRuntime, scaling_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::UpdateRuntime, branch_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::UpdateRuntime, organization_id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::UpdateRuntime, project_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::RuntimeList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::RuntimeList, items_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::IntanceType, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::IntanceType, id_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::IntanceType, name_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::IntanceType, resources_rules_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::ResourcesRules, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::ResourcesRules, limit_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::ResourcesRules, request_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Limit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Limit, cpu_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Limit, ram_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Request, cpu_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::Request, ram_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::PipelineRun, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::PipelineRun, name_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::PipelineRun, label_),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::PipelineRun, namespace__),
  PROTOBUF_FIELD_OFFSET(::pipelines::runtime::v1alpha1::PipelineRun, pipeline_run_status_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pipelines::runtime::v1alpha1::Branch)},
  { 8, -1, sizeof(::pipelines::runtime::v1alpha1::Repository)},
  { 22, -1, sizeof(::pipelines::runtime::v1alpha1::Command)},
  { 29, -1, sizeof(::pipelines::runtime::v1alpha1::Env)},
  { 37, -1, sizeof(::pipelines::runtime::v1alpha1::Configuration)},
  { 46, -1, sizeof(::pipelines::runtime::v1alpha1::ConfigurationUpdate)},
  { 53, -1, sizeof(::pipelines::runtime::v1alpha1::Scaling)},
  { 64, -1, sizeof(::pipelines::runtime::v1alpha1::ContainerRegistry)},
  { 73, -1, sizeof(::pipelines::runtime::v1alpha1::Application)},
  { 97, 104, sizeof(::pipelines::runtime::v1alpha1::Runtime_IntegrationEntry_DoNotUse)},
  { 106, 113, sizeof(::pipelines::runtime::v1alpha1::Runtime_EnvironmentVariablesEntry_DoNotUse)},
  { 115, 122, sizeof(::pipelines::runtime::v1alpha1::Runtime_CommandsEntry_DoNotUse)},
  { 124, 131, sizeof(::pipelines::runtime::v1alpha1::Runtime_SecretsEntry_DoNotUse)},
  { 133, 140, sizeof(::pipelines::runtime::v1alpha1::Runtime_ExtraArgsEntry_DoNotUse)},
  { 142, -1, sizeof(::pipelines::runtime::v1alpha1::Runtime)},
  { 190, -1, sizeof(::pipelines::runtime::v1alpha1::UpdateRuntime)},
  { 203, -1, sizeof(::pipelines::runtime::v1alpha1::RuntimeList)},
  { 209, -1, sizeof(::pipelines::runtime::v1alpha1::IntanceType)},
  { 217, -1, sizeof(::pipelines::runtime::v1alpha1::ResourcesRules)},
  { 224, -1, sizeof(::pipelines::runtime::v1alpha1::Limit)},
  { 231, -1, sizeof(::pipelines::runtime::v1alpha1::Request)},
  { 238, -1, sizeof(::pipelines::runtime::v1alpha1::PipelineRun)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_Branch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_Repository_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_Command_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_Env_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_Configuration_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_ConfigurationUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_Scaling_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_ContainerRegistry_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_Application_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_Runtime_IntegrationEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_Runtime_EnvironmentVariablesEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_Runtime_CommandsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_Runtime_SecretsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_Runtime_ExtraArgsEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_Runtime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_UpdateRuntime_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_RuntimeList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_IntanceType_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_ResourcesRules_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_Limit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::pipelines::runtime::v1alpha1::_PipelineRun_default_instance_),
};

const char descriptor_table_protodef_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n(pipelines/runtime/v1alpha1/runtime.pro"
  "to\022\032pipelines.runtime.v1alpha1\032&pipeline"
  "s/tekton/v1alpha1/tekton.proto\"@\n\006Branch"
  "\022\022\n\004name\030\001 \001(\tR\004name\022\020\n\003sha\030\002 \001(\tR\003sha\022\020"
  "\n\003url\030\003 \001(\tR\003url\"\260\002\n\nRepository\022\022\n\004name\030"
  "\001 \001(\tR\004name\022\033\n\tfull_name\030\002 \001(\tR\010fullName"
  "\022 \n\013description\030\003 \001(\tR\013description\022\022\n\004fo"
  "rk\030\004 \001(\010R\004fork\022\033\n\tclone_url\030\005 \001(\tR\010clone"
  "Url\022\030\n\007private\030\006 \001(\010R\007private\022:\n\006branch\030"
  "\007 \001(\0132\".pipelines.runtime.v1alpha1.Branc"
  "hR\006branch\022#\n\rrepository_id\030\010 \001(\005R\014reposi"
  "toryId\022#\n\rprovider_name\030\t \001(\tR\014providerN"
  "ame\"1\n\007Command\022\024\n\005build\030\001 \001(\tR\005build\022\020\n\003"
  "run\030\002 \001(\tR\003run\"K\n\003Env\022\024\n\005value\030\001 \001(\tR\005va"
  "lue\022\020\n\003key\030\002 \001(\tR\003key\022\034\n\tencrypted\030\003 \001(\010"
  "R\tencrypted\"\274\001\n\rConfiguration\0223\n\004envs\030\001 "
  "\003(\0132\037.pipelines.runtime.v1alpha1.EnvR\004en"
  "vs\022\?\n\010commands\030\002 \003(\0132#.pipelines.runtime"
  ".v1alpha1.CommandR\010commands\022\022\n\004port\030\003 \001("
  "\005R\004port\022!\n\014runtime_type\030\004 \001(\tR\013runtimeTy"
  "pe\"o\n\023ConfigurationUpdate\0223\n\004envs\030\001 \003(\0132"
  "\037.pipelines.runtime.v1alpha1.EnvR\004envs\022#"
  "\n\rinstance_type\030\002 \001(\tR\014instanceType\"\334\001\n\007"
  "Scaling\022\031\n\010cpu_rule\030\001 \001(\tR\007cpuRule\022(\n\020co"
  "ol_down_period\030\002 \001(\tR\016coolDownPeriod\022)\n\020"
  "polling_interval\030\003 \001(\tR\017pollingInterval\022"
  "\037\n\013min_replica\030\004 \001(\tR\nminReplica\022\037\n\013max_"
  "replica\030\005 \001(\tR\nmaxReplica\022\037\n\013memory_rule"
  "\030\006 \001(\tR\nmemoryRule\"\236\001\n\021ContainerRegistry"
  "\022!\n\014registry_url\030\001 \001(\tR\013registryUrl\022#\n\rr"
  "egistry_user\030\002 \001(\tR\014registryUser\022\"\n\rreg_"
  "cred_auth\030\003 \001(\tR\013regCredAuth\022\035\n\nimage_na"
  "me\030\004 \001(\tR\timageName\"\333\007\n\013Application\022\016\n\002i"
  "d\030\001 \001(\tR\002id\022\022\n\004name\030\002 \001(\tR\004name\022 \n\013integ"
  "ration\030\003 \001(\tR\013integration\022F\n\nrepository\030"
  "\004 \001(\0132&.pipelines.runtime.v1alpha1.Repos"
  "itoryR\nrepository\022O\n\rconfiguration\030\005 \001(\013"
  "2).pipelines.runtime.v1alpha1.Configurat"
  "ionR\rconfiguration\022\035\n\nproject_id\030\006 \001(\tR\t"
  "projectId\022!\n\014name_project\030\007 \001(\tR\013namePro"
  "ject\022#\n\rproject_image\030\010 \001(\tR\014projectImag"
  "e\022/\n\023project_description\030\t \001(\tR\022projectD"
  "escription\022\'\n\017organization_id\030\n \001(\tR\016org"
  "anizationId\022=\n\007scaling\030\013 \001(\0132#.pipelines"
  ".runtime.v1alpha1.ScalingR\007scaling\022J\n\014tr"
  "affic_type\030\014 \001(\0162\'.pipelines.runtime.v1a"
  "lpha1.TrafficTypeR\013trafficType\022-\n\022integr"
  "ation_status\030\r \001(\010R\021integrationStatus\022f\n"
  "\026docker_image_buildpack\030\016 \001(\01620.pipeline"
  "s.runtime.v1alpha1.DockerImageBuildpackR"
  "\024dockerImageBuildpack\022(\n\020no_docker_exist"
  "s\030\017 \001(\010R\016noDockerExists\022\\\n\022container_reg"
  "istry\030\020 \001(\0132-.pipelines.runtime.v1alpha1"
  ".ContainerRegistryR\021containerRegistry\022*\n"
  "\021docker_image_name\030\021 \001(\tR\017dockerImageNam"
  "e\022-\n\022application_status\030\022 \001(\tR\021applicati"
  "onStatus\022\'\n\017dockerfile_path\030\023 \001(\tR\016docke"
  "rfilePath\"\273\023\n\007Runtime\022\016\n\002id\030\001 \001(\tR\002id\022\022\n"
  "\004name\030\002 \001(\tR\004name\022N\n\016instance_types\030\003 \003("
  "\0132\'.pipelines.runtime.v1alpha1.IntanceTy"
  "peR\rinstanceTypes\022\'\n\017organization_id\030\004 \001"
  "(\tR\016organizationId\022\035\n\nproject_id\030\005 \001(\tR\t"
  "projectId\022!\n\014name_project\030\006 \001(\tR\013namePro"
  "ject\022%\n\016application_id\030\007 \001(\tR\rapplicatio"
  "nId\022!\n\014workspace_id\030\010 \001(\tR\013workspaceId\022%"
  "\n\016environment_id\030\t \001(\tR\renvironmentId\022\026\n"
  "\006scaler\030\n \001(\tR\006scaler\022\035\n\npod_status\030\013 \001("
  "\tR\tpodStatus\022$\n\016pod_status_msg\030\014 \001(\tR\014po"
  "dStatusMsg\022V\n\013integration\030\r \003(\01324.pipeli"
  "nes.runtime.v1alpha1.Runtime.Integration"
  "EntryR\013integration\022r\n\025environment_variab"
  "les\030\016 \003(\0132=.pipelines.runtime.v1alpha1.R"
  "untime.EnvironmentVariablesEntryR\024enviro"
  "nmentVariables\022M\n\010commands\030\017 \003(\01321.pipel"
  "ines.runtime.v1alpha1.Runtime.CommandsEn"
  "tryR\010commands\022J\n\007secrets\030\020 \003(\01320.pipelin"
  "es.runtime.v1alpha1.Runtime.SecretsEntry"
  "R\007secrets\022Q\n\nextra_args\030\021 \003(\01322.pipeline"
  "s.runtime.v1alpha1.Runtime.ExtraArgsEntr"
  "yR\textraArgs\022J\n\014traffic_type\030\022 \001(\0162\'.pip"
  "elines.runtime.v1alpha1.TrafficTypeR\013tra"
  "fficType\022)\n\020response_message\030\023 \001(\tR\017resp"
  "onseMessage\022)\n\020environment_name\030\024 \001(\tR\017e"
  "nvironmentName\022:\n\031environment_internal_n"
  "ame\030\025 \001(\tR\027environmentInternalName\022)\n\020ap"
  "plication_name\030\026 \001(\tR\017applicationName\022!\n"
  "\014storage_used\030\027 \001(\rR\013storageUsed\022#\n\rstor"
  "age_limit\030\030 \001(\rR\014storageLimit\022%\n\016integra"
  "tion_id\030\031 \001(\tR\rintegrationId\022R\n\020applicat"
  "ion_data\030\032 \001(\0132\'.pipelines.runtime.v1alp"
  "ha1.ApplicationR\017applicationData\022\'\n\017cust"
  "om_pipeline\030\033 \001(\010R\016customPipeline\022O\n\023bef"
  "ore_deploy_tasks\030\034 \003(\0132\037.pipelines.tekto"
  "n.v1alpha1.TaskR\021beforeDeployTasks\022M\n\022af"
  "ter_deploy_tasks\030\035 \003(\0132\037.pipelines.tekto"
  "n.v1alpha1.TaskR\020afterDeployTasks\022(\n\020pod"
  "_ingress_cert\030\036 \001(\tR\016podIngressCert\0225\n\027i"
  "s_not_exist_dockerfile\030\037 \001(\010R\024isNotExist"
  "Dockerfile\0229\n\006params\030  \003(\0132!.pipelines.t"
  "ekton.v1alpha1.ParamsR\006params\022I\n\014pipelin"
  "e_run\030! \001(\0132&.pipelines.tekton.v1alpha1."
  "PipelineRunR\013pipelineRun\022\031\n\010host_url\030\" \001"
  "(\tR\007hostUrl\022\033\n\tapp_label\030# \001(\tR\010appLabel"
  "\022\035\n\ncreated_at\030$ \001(\tR\tcreatedAt\022\035\n\nupdat"
  "ed_at\030% \001(\tR\tupdatedAt\0224\n\026is_enabled_app"
  "lication\030& \001(\010R\024isEnabledApplication\022\035\n\n"
  "is_enabled\030\' \001(\010R\tisEnabled\022O\n\rconfigura"
  "tion\030( \001(\0132).pipelines.runtime.v1alpha1."
  "ConfigurationR\rconfiguration\022=\n\007scaling\030"
  ") \001(\0132#.pipelines.runtime.v1alpha1.Scali"
  "ngR\007scaling\022\031\n\010tag_name\030* \001(\tR\007tagName\022\027"
  "\n\007user_id\030+ \001(\tR\006userId\032>\n\020IntegrationEn"
  "try\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005va"
  "lue:\0028\001\032G\n\031EnvironmentVariablesEntry\022\020\n\003"
  "key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028\001"
  "\032;\n\rCommandsEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n\005v"
  "alue\030\002 \001(\tR\005value:\0028\001\032:\n\014SecretsEntry\022\020\n"
  "\003key\030\001 \001(\tR\003key\022\024\n\005value\030\002 \001(\tR\005value:\0028"
  "\001\032<\n\016ExtraArgsEntry\022\020\n\003key\030\001 \001(\tR\003key\022\024\n"
  "\005value\030\002 \001(\tR\005value:\0028\001\"\210\003\n\rUpdateRuntim"
  "e\022\016\n\002id\030\001 \001(\tR\002id\022%\n\016application_id\030\002 \001("
  "\tR\rapplicationId\022J\n\014traffic_type\030\003 \001(\0162\'"
  ".pipelines.runtime.v1alpha1.TrafficTypeR"
  "\013trafficType\022U\n\rconfiguration\030\004 \001(\0132/.pi"
  "pelines.runtime.v1alpha1.ConfigurationUp"
  "dateR\rconfiguration\022=\n\007scaling\030\005 \001(\0132#.p"
  "ipelines.runtime.v1alpha1.ScalingR\007scali"
  "ng\022\026\n\006branch\030\006 \001(\tR\006branch\022\'\n\017organizati"
  "on_id\030\007 \001(\tR\016organizationId\022\035\n\nproject_i"
  "d\030\010 \001(\tR\tprojectId\"H\n\013RuntimeList\0229\n\005ite"
  "ms\030\001 \003(\0132#.pipelines.runtime.v1alpha1.Ru"
  "ntimeR\005items\"\206\001\n\013IntanceType\022\016\n\002id\030\001 \001(\t"
  "R\002id\022\022\n\004name\030\002 \001(\tR\004name\022S\n\017resources_ru"
  "les\030\003 \003(\0132*.pipelines.runtime.v1alpha1.R"
  "esourcesRulesR\016resourcesRules\"\210\001\n\016Resour"
  "cesRules\0227\n\005limit\030\001 \003(\0132!.pipelines.runt"
  "ime.v1alpha1.LimitR\005limit\022=\n\007request\030\002 \003"
  "(\0132#.pipelines.runtime.v1alpha1.RequestR"
  "\007request\"+\n\005Limit\022\020\n\003cpu\030\001 \001(\tR\003cpu\022\020\n\003r"
  "am\030\002 \001(\tR\003ram\"-\n\007Request\022\020\n\003cpu\030\001 \001(\tR\003c"
  "pu\022\020\n\003ram\030\002 \001(\tR\003ram\"\205\001\n\013PipelineRun\022\022\n\004"
  "name\030\001 \001(\tR\004name\022\024\n\005label\030\002 \001(\tR\005label\022\034"
  "\n\tnamespace\030\003 \001(\tR\tnamespace\022.\n\023pipeline"
  "_run_status\030\004 \001(\tR\021pipelineRunStatus*\314\001\n"
  "\024DockerImageBuildpack\022&\n\"DOCKER_IMAGE_BU"
  "ILDPACK_UNSPECIFIED\020\000\022!\n\035DOCKER_IMAGE_BU"
  "ILDPACK_GOLANG\020\001\022\037\n\033DOCKER_IMAGE_BUILDPA"
  "CK_JAVA\020\002\022%\n!DOCKER_IMAGE_BUILDPACK_JAVA"
  "SCRIPT\020\003\022!\n\035DOCKER_IMAGE_BUILDPACK_PYTHO"
  "N\020\004*a\n\013TrafficType\022\034\n\030TRAFFIC_TYPE_UNSPE"
  "CIFIED\020\000\022\031\n\025TRAFFIC_TYPE_EXTERNAL\020\001\022\031\n\025T"
  "RAFFIC_TYPE_INTERNAL\020\002B\255\001\n$io.cuemby.pip"
  "elines.runtime.v1alpha1B\014RuntimeProtoP\001Z"
  "5github.com/cuemby/ccp-runtime-service/r"
  "untimev1alpha1\242\002\003PPX\252\002\032Pipelines.Runtime"
  ".V1Alpha1\312\002\032Pipelines\\Runtime\\V1Alpha1b\006"
  "proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_deps[1] = {
  &::descriptor_table_pipelines_2ftekton_2fv1alpha1_2ftekton_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto = {
  false, false, 6246, descriptor_table_protodef_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto, "pipelines/runtime/v1alpha1/runtime.proto", 
  &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once, descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_deps, 1, 22,
  schemas, file_default_instances, TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto::offsets,
  file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto, file_level_enum_descriptors_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto, file_level_service_descriptors_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter() {
  return &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto(&descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto);
namespace pipelines {
namespace runtime {
namespace v1alpha1 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DockerImageBuildpack_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto);
  return file_level_enum_descriptors_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[0];
}
bool DockerImageBuildpack_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto);
  return file_level_enum_descriptors_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[1];
}
bool TrafficType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Branch::_Internal {
 public:
};

Branch::Branch(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.runtime.v1alpha1.Branch)
}
Branch::Branch(const Branch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sha().empty()) {
    sha_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sha(), 
      GetArenaForAllocation());
  }
  url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_url().empty()) {
    url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_url(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.runtime.v1alpha1.Branch)
}

inline void Branch::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
sha_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Branch::~Branch() {
  // @@protoc_insertion_point(destructor:pipelines.runtime.v1alpha1.Branch)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Branch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Branch::ArenaDtor(void* object) {
  Branch* _this = reinterpret_cast< Branch* >(object);
  (void)_this;
}
void Branch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Branch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Branch::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.runtime.v1alpha1.Branch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  sha_.ClearToEmpty();
  url_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Branch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Branch.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string sha = 2 [json_name = "sha"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sha();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Branch.sha"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string url = 3 [json_name = "url"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Branch.url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Branch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.runtime.v1alpha1.Branch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Branch.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string sha = 2 [json_name = "sha"];
  if (!this->_internal_sha().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sha().data(), static_cast<int>(this->_internal_sha().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Branch.sha");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sha(), target);
  }

  // string url = 3 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_url().data(), static_cast<int>(this->_internal_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Branch.url");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_url(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.runtime.v1alpha1.Branch)
  return target;
}

size_t Branch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.runtime.v1alpha1.Branch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string sha = 2 [json_name = "sha"];
  if (!this->_internal_sha().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sha());
  }

  // string url = 3 [json_name = "url"];
  if (!this->_internal_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_url());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Branch::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Branch::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Branch::GetClassData() const { return &_class_data_; }

void Branch::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Branch *>(to)->MergeFrom(
      static_cast<const Branch &>(from));
}


void Branch::MergeFrom(const Branch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.runtime.v1alpha1.Branch)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_sha().empty()) {
    _internal_set_sha(from._internal_sha());
  }
  if (!from._internal_url().empty()) {
    _internal_set_url(from._internal_url());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Branch::CopyFrom(const Branch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.runtime.v1alpha1.Branch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Branch::IsInitialized() const {
  return true;
}

void Branch::InternalSwap(Branch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sha_, GetArenaForAllocation(),
      &other->sha_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &url_, GetArenaForAllocation(),
      &other->url_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Branch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[0]);
}

// ===================================================================

class Repository::_Internal {
 public:
  static const ::pipelines::runtime::v1alpha1::Branch& branch(const Repository* msg);
};

const ::pipelines::runtime::v1alpha1::Branch&
Repository::_Internal::branch(const Repository* msg) {
  return *msg->branch_;
}
Repository::Repository(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.runtime.v1alpha1.Repository)
}
Repository::Repository(const Repository& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_full_name().empty()) {
    full_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_full_name(), 
      GetArenaForAllocation());
  }
  description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_description().empty()) {
    description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_description(), 
      GetArenaForAllocation());
  }
  clone_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_clone_url().empty()) {
    clone_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_clone_url(), 
      GetArenaForAllocation());
  }
  provider_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_provider_name().empty()) {
    provider_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_provider_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_branch()) {
    branch_ = new ::pipelines::runtime::v1alpha1::Branch(*from.branch_);
  } else {
    branch_ = nullptr;
  }
  ::memcpy(&fork_, &from.fork_,
    static_cast<size_t>(reinterpret_cast<char*>(&repository_id_) -
    reinterpret_cast<char*>(&fork_)) + sizeof(repository_id_));
  // @@protoc_insertion_point(copy_constructor:pipelines.runtime.v1alpha1.Repository)
}

inline void Repository::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
full_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
clone_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
provider_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&branch_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&repository_id_) -
    reinterpret_cast<char*>(&branch_)) + sizeof(repository_id_));
}

Repository::~Repository() {
  // @@protoc_insertion_point(destructor:pipelines.runtime.v1alpha1.Repository)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Repository::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  full_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clone_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  provider_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete branch_;
}

void Repository::ArenaDtor(void* object) {
  Repository* _this = reinterpret_cast< Repository* >(object);
  (void)_this;
}
void Repository::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Repository::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Repository::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.runtime.v1alpha1.Repository)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  full_name_.ClearToEmpty();
  description_.ClearToEmpty();
  clone_url_.ClearToEmpty();
  provider_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && branch_ != nullptr) {
    delete branch_;
  }
  branch_ = nullptr;
  ::memset(&fork_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&repository_id_) -
      reinterpret_cast<char*>(&fork_)) + sizeof(repository_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Repository::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Repository.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string full_name = 2 [json_name = "fullName"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_full_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Repository.full_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string description = 3 [json_name = "description"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Repository.description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool fork = 4 [json_name = "fork"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          fork_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string clone_url = 5 [json_name = "cloneUrl"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_clone_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Repository.clone_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool private = 6 [json_name = "private"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          private__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pipelines.runtime.v1alpha1.Branch branch = 7 [json_name = "branch"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_branch(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 repository_id = 8 [json_name = "repositoryId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          repository_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string provider_name = 9 [json_name = "providerName"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_provider_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Repository.provider_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Repository::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.runtime.v1alpha1.Repository)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Repository.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string full_name = 2 [json_name = "fullName"];
  if (!this->_internal_full_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_full_name().data(), static_cast<int>(this->_internal_full_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Repository.full_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_full_name(), target);
  }

  // string description = 3 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_description().data(), static_cast<int>(this->_internal_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Repository.description");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_description(), target);
  }

  // bool fork = 4 [json_name = "fork"];
  if (this->_internal_fork() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_fork(), target);
  }

  // string clone_url = 5 [json_name = "cloneUrl"];
  if (!this->_internal_clone_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_clone_url().data(), static_cast<int>(this->_internal_clone_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Repository.clone_url");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_clone_url(), target);
  }

  // bool private = 6 [json_name = "private"];
  if (this->_internal_private_() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(6, this->_internal_private_(), target);
  }

  // .pipelines.runtime.v1alpha1.Branch branch = 7 [json_name = "branch"];
  if (this->_internal_has_branch()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::branch(this), target, stream);
  }

  // int32 repository_id = 8 [json_name = "repositoryId"];
  if (this->_internal_repository_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_repository_id(), target);
  }

  // string provider_name = 9 [json_name = "providerName"];
  if (!this->_internal_provider_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_provider_name().data(), static_cast<int>(this->_internal_provider_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Repository.provider_name");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_provider_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.runtime.v1alpha1.Repository)
  return target;
}

size_t Repository::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.runtime.v1alpha1.Repository)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string full_name = 2 [json_name = "fullName"];
  if (!this->_internal_full_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_full_name());
  }

  // string description = 3 [json_name = "description"];
  if (!this->_internal_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_description());
  }

  // string clone_url = 5 [json_name = "cloneUrl"];
  if (!this->_internal_clone_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_clone_url());
  }

  // string provider_name = 9 [json_name = "providerName"];
  if (!this->_internal_provider_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_provider_name());
  }

  // .pipelines.runtime.v1alpha1.Branch branch = 7 [json_name = "branch"];
  if (this->_internal_has_branch()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *branch_);
  }

  // bool fork = 4 [json_name = "fork"];
  if (this->_internal_fork() != 0) {
    total_size += 1 + 1;
  }

  // bool private = 6 [json_name = "private"];
  if (this->_internal_private_() != 0) {
    total_size += 1 + 1;
  }

  // int32 repository_id = 8 [json_name = "repositoryId"];
  if (this->_internal_repository_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_repository_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Repository::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Repository::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Repository::GetClassData() const { return &_class_data_; }

void Repository::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Repository *>(to)->MergeFrom(
      static_cast<const Repository &>(from));
}


void Repository::MergeFrom(const Repository& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.runtime.v1alpha1.Repository)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_full_name().empty()) {
    _internal_set_full_name(from._internal_full_name());
  }
  if (!from._internal_description().empty()) {
    _internal_set_description(from._internal_description());
  }
  if (!from._internal_clone_url().empty()) {
    _internal_set_clone_url(from._internal_clone_url());
  }
  if (!from._internal_provider_name().empty()) {
    _internal_set_provider_name(from._internal_provider_name());
  }
  if (from._internal_has_branch()) {
    _internal_mutable_branch()->::pipelines::runtime::v1alpha1::Branch::MergeFrom(from._internal_branch());
  }
  if (from._internal_fork() != 0) {
    _internal_set_fork(from._internal_fork());
  }
  if (from._internal_private_() != 0) {
    _internal_set_private_(from._internal_private_());
  }
  if (from._internal_repository_id() != 0) {
    _internal_set_repository_id(from._internal_repository_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Repository::CopyFrom(const Repository& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.runtime.v1alpha1.Repository)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Repository::IsInitialized() const {
  return true;
}

void Repository::InternalSwap(Repository* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &full_name_, GetArenaForAllocation(),
      &other->full_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &description_, GetArenaForAllocation(),
      &other->description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &clone_url_, GetArenaForAllocation(),
      &other->clone_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &provider_name_, GetArenaForAllocation(),
      &other->provider_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Repository, repository_id_)
      + sizeof(Repository::repository_id_)
      - PROTOBUF_FIELD_OFFSET(Repository, branch_)>(
          reinterpret_cast<char*>(&branch_),
          reinterpret_cast<char*>(&other->branch_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Repository::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[1]);
}

// ===================================================================

class Command::_Internal {
 public:
};

Command::Command(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.runtime.v1alpha1.Command)
}
Command::Command(const Command& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_build().empty()) {
    build_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_build(), 
      GetArenaForAllocation());
  }
  run_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_run().empty()) {
    run_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_run(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.runtime.v1alpha1.Command)
}

inline void Command::SharedCtor() {
build_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
run_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Command::~Command() {
  // @@protoc_insertion_point(destructor:pipelines.runtime.v1alpha1.Command)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Command::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  build_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  run_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Command::ArenaDtor(void* object) {
  Command* _this = reinterpret_cast< Command* >(object);
  (void)_this;
}
void Command::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Command::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Command::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.runtime.v1alpha1.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  build_.ClearToEmpty();
  run_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Command::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string build = 1 [json_name = "build"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_build();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Command.build"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string run = 2 [json_name = "run"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_run();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Command.run"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Command::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.runtime.v1alpha1.Command)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string build = 1 [json_name = "build"];
  if (!this->_internal_build().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_build().data(), static_cast<int>(this->_internal_build().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Command.build");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_build(), target);
  }

  // string run = 2 [json_name = "run"];
  if (!this->_internal_run().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_run().data(), static_cast<int>(this->_internal_run().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Command.run");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_run(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.runtime.v1alpha1.Command)
  return target;
}

size_t Command::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.runtime.v1alpha1.Command)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string build = 1 [json_name = "build"];
  if (!this->_internal_build().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_build());
  }

  // string run = 2 [json_name = "run"];
  if (!this->_internal_run().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_run());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Command::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Command::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Command::GetClassData() const { return &_class_data_; }

void Command::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Command *>(to)->MergeFrom(
      static_cast<const Command &>(from));
}


void Command::MergeFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.runtime.v1alpha1.Command)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_build().empty()) {
    _internal_set_build(from._internal_build());
  }
  if (!from._internal_run().empty()) {
    _internal_set_run(from._internal_run());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Command::CopyFrom(const Command& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.runtime.v1alpha1.Command)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Command::IsInitialized() const {
  return true;
}

void Command::InternalSwap(Command* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &build_, GetArenaForAllocation(),
      &other->build_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &run_, GetArenaForAllocation(),
      &other->run_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Command::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[2]);
}

// ===================================================================

class Env::_Internal {
 public:
};

Env::Env(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.runtime.v1alpha1.Env)
}
Env::Env(const Env& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_value(), 
      GetArenaForAllocation());
  }
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_key(), 
      GetArenaForAllocation());
  }
  encrypted_ = from.encrypted_;
  // @@protoc_insertion_point(copy_constructor:pipelines.runtime.v1alpha1.Env)
}

inline void Env::SharedCtor() {
value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
encrypted_ = false;
}

Env::~Env() {
  // @@protoc_insertion_point(destructor:pipelines.runtime.v1alpha1.Env)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Env::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Env::ArenaDtor(void* object) {
  Env* _this = reinterpret_cast< Env* >(object);
  (void)_this;
}
void Env::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Env::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Env::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.runtime.v1alpha1.Env)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_.ClearToEmpty();
  key_.ClearToEmpty();
  encrypted_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Env::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string value = 1 [json_name = "value"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Env.value"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2 [json_name = "key"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Env.key"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool encrypted = 3 [json_name = "encrypted"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          encrypted_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Env::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.runtime.v1alpha1.Env)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string value = 1 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Env.value");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_value(), target);
  }

  // string key = 2 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Env.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // bool encrypted = 3 [json_name = "encrypted"];
  if (this->_internal_encrypted() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_encrypted(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.runtime.v1alpha1.Env)
  return target;
}

size_t Env::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.runtime.v1alpha1.Env)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string value = 1 [json_name = "value"];
  if (!this->_internal_value().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // string key = 2 [json_name = "key"];
  if (!this->_internal_key().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // bool encrypted = 3 [json_name = "encrypted"];
  if (this->_internal_encrypted() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Env::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Env::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Env::GetClassData() const { return &_class_data_; }

void Env::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Env *>(to)->MergeFrom(
      static_cast<const Env &>(from));
}


void Env::MergeFrom(const Env& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.runtime.v1alpha1.Env)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_value().empty()) {
    _internal_set_value(from._internal_value());
  }
  if (!from._internal_key().empty()) {
    _internal_set_key(from._internal_key());
  }
  if (from._internal_encrypted() != 0) {
    _internal_set_encrypted(from._internal_encrypted());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Env::CopyFrom(const Env& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.runtime.v1alpha1.Env)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Env::IsInitialized() const {
  return true;
}

void Env::InternalSwap(Env* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &value_, GetArenaForAllocation(),
      &other->value_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &key_, GetArenaForAllocation(),
      &other->key_, other->GetArenaForAllocation()
  );
  swap(encrypted_, other->encrypted_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Env::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[3]);
}

// ===================================================================

class Configuration::_Internal {
 public:
};

Configuration::Configuration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  envs_(arena),
  commands_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.runtime.v1alpha1.Configuration)
}
Configuration::Configuration(const Configuration& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      envs_(from.envs_),
      commands_(from.commands_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  runtime_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_runtime_type().empty()) {
    runtime_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_runtime_type(), 
      GetArenaForAllocation());
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:pipelines.runtime.v1alpha1.Configuration)
}

inline void Configuration::SharedCtor() {
runtime_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
port_ = 0;
}

Configuration::~Configuration() {
  // @@protoc_insertion_point(destructor:pipelines.runtime.v1alpha1.Configuration)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Configuration::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  runtime_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Configuration::ArenaDtor(void* object) {
  Configuration* _this = reinterpret_cast< Configuration* >(object);
  (void)_this;
}
void Configuration::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Configuration::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Configuration::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.runtime.v1alpha1.Configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  envs_.Clear();
  commands_.Clear();
  runtime_type_.ClearToEmpty();
  port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Configuration::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pipelines.runtime.v1alpha1.Env envs = 1 [json_name = "envs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_envs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pipelines.runtime.v1alpha1.Command commands = 2 [json_name = "commands"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_commands(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // int32 port = 3 [json_name = "port"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string runtime_type = 4 [json_name = "runtimeType"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_runtime_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Configuration.runtime_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Configuration::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.runtime.v1alpha1.Configuration)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pipelines.runtime.v1alpha1.Env envs = 1 [json_name = "envs"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_envs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_envs(i), target, stream);
  }

  // repeated .pipelines.runtime.v1alpha1.Command commands = 2 [json_name = "commands"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_commands_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_commands(i), target, stream);
  }

  // int32 port = 3 [json_name = "port"];
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_port(), target);
  }

  // string runtime_type = 4 [json_name = "runtimeType"];
  if (!this->_internal_runtime_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_runtime_type().data(), static_cast<int>(this->_internal_runtime_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Configuration.runtime_type");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_runtime_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.runtime.v1alpha1.Configuration)
  return target;
}

size_t Configuration::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.runtime.v1alpha1.Configuration)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pipelines.runtime.v1alpha1.Env envs = 1 [json_name = "envs"];
  total_size += 1UL * this->_internal_envs_size();
  for (const auto& msg : this->envs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pipelines.runtime.v1alpha1.Command commands = 2 [json_name = "commands"];
  total_size += 1UL * this->_internal_commands_size();
  for (const auto& msg : this->commands_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string runtime_type = 4 [json_name = "runtimeType"];
  if (!this->_internal_runtime_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_runtime_type());
  }

  // int32 port = 3 [json_name = "port"];
  if (this->_internal_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Configuration::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Configuration::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Configuration::GetClassData() const { return &_class_data_; }

void Configuration::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Configuration *>(to)->MergeFrom(
      static_cast<const Configuration &>(from));
}


void Configuration::MergeFrom(const Configuration& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.runtime.v1alpha1.Configuration)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  envs_.MergeFrom(from.envs_);
  commands_.MergeFrom(from.commands_);
  if (!from._internal_runtime_type().empty()) {
    _internal_set_runtime_type(from._internal_runtime_type());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Configuration::CopyFrom(const Configuration& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.runtime.v1alpha1.Configuration)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configuration::IsInitialized() const {
  return true;
}

void Configuration::InternalSwap(Configuration* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  envs_.InternalSwap(&other->envs_);
  commands_.InternalSwap(&other->commands_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &runtime_type_, GetArenaForAllocation(),
      &other->runtime_type_, other->GetArenaForAllocation()
  );
  swap(port_, other->port_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Configuration::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[4]);
}

// ===================================================================

class ConfigurationUpdate::_Internal {
 public:
};

ConfigurationUpdate::ConfigurationUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  envs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.runtime.v1alpha1.ConfigurationUpdate)
}
ConfigurationUpdate::ConfigurationUpdate(const ConfigurationUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      envs_(from.envs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  instance_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_instance_type().empty()) {
    instance_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_instance_type(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.runtime.v1alpha1.ConfigurationUpdate)
}

inline void ConfigurationUpdate::SharedCtor() {
instance_type_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ConfigurationUpdate::~ConfigurationUpdate() {
  // @@protoc_insertion_point(destructor:pipelines.runtime.v1alpha1.ConfigurationUpdate)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ConfigurationUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  instance_type_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ConfigurationUpdate::ArenaDtor(void* object) {
  ConfigurationUpdate* _this = reinterpret_cast< ConfigurationUpdate* >(object);
  (void)_this;
}
void ConfigurationUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ConfigurationUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ConfigurationUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.runtime.v1alpha1.ConfigurationUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  envs_.Clear();
  instance_type_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ConfigurationUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pipelines.runtime.v1alpha1.Env envs = 1 [json_name = "envs"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_envs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // string instance_type = 2 [json_name = "instanceType"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_instance_type();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.ConfigurationUpdate.instance_type"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ConfigurationUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.runtime.v1alpha1.ConfigurationUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pipelines.runtime.v1alpha1.Env envs = 1 [json_name = "envs"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_envs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_envs(i), target, stream);
  }

  // string instance_type = 2 [json_name = "instanceType"];
  if (!this->_internal_instance_type().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_instance_type().data(), static_cast<int>(this->_internal_instance_type().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.ConfigurationUpdate.instance_type");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_instance_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.runtime.v1alpha1.ConfigurationUpdate)
  return target;
}

size_t ConfigurationUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.runtime.v1alpha1.ConfigurationUpdate)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pipelines.runtime.v1alpha1.Env envs = 1 [json_name = "envs"];
  total_size += 1UL * this->_internal_envs_size();
  for (const auto& msg : this->envs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string instance_type = 2 [json_name = "instanceType"];
  if (!this->_internal_instance_type().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_instance_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ConfigurationUpdate::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ConfigurationUpdate::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ConfigurationUpdate::GetClassData() const { return &_class_data_; }

void ConfigurationUpdate::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ConfigurationUpdate *>(to)->MergeFrom(
      static_cast<const ConfigurationUpdate &>(from));
}


void ConfigurationUpdate::MergeFrom(const ConfigurationUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.runtime.v1alpha1.ConfigurationUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  envs_.MergeFrom(from.envs_);
  if (!from._internal_instance_type().empty()) {
    _internal_set_instance_type(from._internal_instance_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ConfigurationUpdate::CopyFrom(const ConfigurationUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.runtime.v1alpha1.ConfigurationUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigurationUpdate::IsInitialized() const {
  return true;
}

void ConfigurationUpdate::InternalSwap(ConfigurationUpdate* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  envs_.InternalSwap(&other->envs_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &instance_type_, GetArenaForAllocation(),
      &other->instance_type_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ConfigurationUpdate::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[5]);
}

// ===================================================================

class Scaling::_Internal {
 public:
};

Scaling::Scaling(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.runtime.v1alpha1.Scaling)
}
Scaling::Scaling(const Scaling& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cpu_rule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cpu_rule().empty()) {
    cpu_rule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cpu_rule(), 
      GetArenaForAllocation());
  }
  cool_down_period_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cool_down_period().empty()) {
    cool_down_period_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cool_down_period(), 
      GetArenaForAllocation());
  }
  polling_interval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_polling_interval().empty()) {
    polling_interval_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_polling_interval(), 
      GetArenaForAllocation());
  }
  min_replica_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_min_replica().empty()) {
    min_replica_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_min_replica(), 
      GetArenaForAllocation());
  }
  max_replica_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_max_replica().empty()) {
    max_replica_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_max_replica(), 
      GetArenaForAllocation());
  }
  memory_rule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_memory_rule().empty()) {
    memory_rule_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_memory_rule(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.runtime.v1alpha1.Scaling)
}

inline void Scaling::SharedCtor() {
cpu_rule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
cool_down_period_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
polling_interval_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
min_replica_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
max_replica_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
memory_rule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Scaling::~Scaling() {
  // @@protoc_insertion_point(destructor:pipelines.runtime.v1alpha1.Scaling)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Scaling::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cpu_rule_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  cool_down_period_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  polling_interval_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  min_replica_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  max_replica_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  memory_rule_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Scaling::ArenaDtor(void* object) {
  Scaling* _this = reinterpret_cast< Scaling* >(object);
  (void)_this;
}
void Scaling::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Scaling::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Scaling::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.runtime.v1alpha1.Scaling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cpu_rule_.ClearToEmpty();
  cool_down_period_.ClearToEmpty();
  polling_interval_.ClearToEmpty();
  min_replica_.ClearToEmpty();
  max_replica_.ClearToEmpty();
  memory_rule_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Scaling::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cpu_rule = 1 [json_name = "cpuRule"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cpu_rule();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Scaling.cpu_rule"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string cool_down_period = 2 [json_name = "coolDownPeriod"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_cool_down_period();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Scaling.cool_down_period"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string polling_interval = 3 [json_name = "pollingInterval"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_polling_interval();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Scaling.polling_interval"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string min_replica = 4 [json_name = "minReplica"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_min_replica();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Scaling.min_replica"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string max_replica = 5 [json_name = "maxReplica"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_max_replica();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Scaling.max_replica"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string memory_rule = 6 [json_name = "memoryRule"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_memory_rule();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Scaling.memory_rule"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Scaling::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.runtime.v1alpha1.Scaling)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cpu_rule = 1 [json_name = "cpuRule"];
  if (!this->_internal_cpu_rule().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpu_rule().data(), static_cast<int>(this->_internal_cpu_rule().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Scaling.cpu_rule");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cpu_rule(), target);
  }

  // string cool_down_period = 2 [json_name = "coolDownPeriod"];
  if (!this->_internal_cool_down_period().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cool_down_period().data(), static_cast<int>(this->_internal_cool_down_period().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Scaling.cool_down_period");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_cool_down_period(), target);
  }

  // string polling_interval = 3 [json_name = "pollingInterval"];
  if (!this->_internal_polling_interval().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_polling_interval().data(), static_cast<int>(this->_internal_polling_interval().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Scaling.polling_interval");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_polling_interval(), target);
  }

  // string min_replica = 4 [json_name = "minReplica"];
  if (!this->_internal_min_replica().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_min_replica().data(), static_cast<int>(this->_internal_min_replica().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Scaling.min_replica");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_min_replica(), target);
  }

  // string max_replica = 5 [json_name = "maxReplica"];
  if (!this->_internal_max_replica().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_max_replica().data(), static_cast<int>(this->_internal_max_replica().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Scaling.max_replica");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_max_replica(), target);
  }

  // string memory_rule = 6 [json_name = "memoryRule"];
  if (!this->_internal_memory_rule().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_memory_rule().data(), static_cast<int>(this->_internal_memory_rule().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Scaling.memory_rule");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_memory_rule(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.runtime.v1alpha1.Scaling)
  return target;
}

size_t Scaling::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.runtime.v1alpha1.Scaling)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cpu_rule = 1 [json_name = "cpuRule"];
  if (!this->_internal_cpu_rule().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpu_rule());
  }

  // string cool_down_period = 2 [json_name = "coolDownPeriod"];
  if (!this->_internal_cool_down_period().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cool_down_period());
  }

  // string polling_interval = 3 [json_name = "pollingInterval"];
  if (!this->_internal_polling_interval().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_polling_interval());
  }

  // string min_replica = 4 [json_name = "minReplica"];
  if (!this->_internal_min_replica().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_min_replica());
  }

  // string max_replica = 5 [json_name = "maxReplica"];
  if (!this->_internal_max_replica().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_max_replica());
  }

  // string memory_rule = 6 [json_name = "memoryRule"];
  if (!this->_internal_memory_rule().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_memory_rule());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Scaling::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Scaling::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Scaling::GetClassData() const { return &_class_data_; }

void Scaling::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Scaling *>(to)->MergeFrom(
      static_cast<const Scaling &>(from));
}


void Scaling::MergeFrom(const Scaling& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.runtime.v1alpha1.Scaling)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cpu_rule().empty()) {
    _internal_set_cpu_rule(from._internal_cpu_rule());
  }
  if (!from._internal_cool_down_period().empty()) {
    _internal_set_cool_down_period(from._internal_cool_down_period());
  }
  if (!from._internal_polling_interval().empty()) {
    _internal_set_polling_interval(from._internal_polling_interval());
  }
  if (!from._internal_min_replica().empty()) {
    _internal_set_min_replica(from._internal_min_replica());
  }
  if (!from._internal_max_replica().empty()) {
    _internal_set_max_replica(from._internal_max_replica());
  }
  if (!from._internal_memory_rule().empty()) {
    _internal_set_memory_rule(from._internal_memory_rule());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Scaling::CopyFrom(const Scaling& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.runtime.v1alpha1.Scaling)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Scaling::IsInitialized() const {
  return true;
}

void Scaling::InternalSwap(Scaling* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cpu_rule_, GetArenaForAllocation(),
      &other->cpu_rule_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cool_down_period_, GetArenaForAllocation(),
      &other->cool_down_period_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &polling_interval_, GetArenaForAllocation(),
      &other->polling_interval_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &min_replica_, GetArenaForAllocation(),
      &other->min_replica_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &max_replica_, GetArenaForAllocation(),
      &other->max_replica_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &memory_rule_, GetArenaForAllocation(),
      &other->memory_rule_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Scaling::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[6]);
}

// ===================================================================

class ContainerRegistry::_Internal {
 public:
};

ContainerRegistry::ContainerRegistry(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.runtime.v1alpha1.ContainerRegistry)
}
ContainerRegistry::ContainerRegistry(const ContainerRegistry& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  registry_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_registry_url().empty()) {
    registry_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_registry_url(), 
      GetArenaForAllocation());
  }
  registry_user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_registry_user().empty()) {
    registry_user_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_registry_user(), 
      GetArenaForAllocation());
  }
  reg_cred_auth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_reg_cred_auth().empty()) {
    reg_cred_auth_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_reg_cred_auth(), 
      GetArenaForAllocation());
  }
  image_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_name().empty()) {
    image_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_image_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.runtime.v1alpha1.ContainerRegistry)
}

inline void ContainerRegistry::SharedCtor() {
registry_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
registry_user_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
reg_cred_auth_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
image_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ContainerRegistry::~ContainerRegistry() {
  // @@protoc_insertion_point(destructor:pipelines.runtime.v1alpha1.ContainerRegistry)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ContainerRegistry::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  registry_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  registry_user_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  reg_cred_auth_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  image_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ContainerRegistry::ArenaDtor(void* object) {
  ContainerRegistry* _this = reinterpret_cast< ContainerRegistry* >(object);
  (void)_this;
}
void ContainerRegistry::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ContainerRegistry::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ContainerRegistry::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.runtime.v1alpha1.ContainerRegistry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  registry_url_.ClearToEmpty();
  registry_user_.ClearToEmpty();
  reg_cred_auth_.ClearToEmpty();
  image_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ContainerRegistry::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string registry_url = 1 [json_name = "registryUrl"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_registry_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.ContainerRegistry.registry_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string registry_user = 2 [json_name = "registryUser"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_registry_user();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.ContainerRegistry.registry_user"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string reg_cred_auth = 3 [json_name = "regCredAuth"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_reg_cred_auth();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.ContainerRegistry.reg_cred_auth"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string image_name = 4 [json_name = "imageName"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_image_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.ContainerRegistry.image_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ContainerRegistry::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.runtime.v1alpha1.ContainerRegistry)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string registry_url = 1 [json_name = "registryUrl"];
  if (!this->_internal_registry_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_registry_url().data(), static_cast<int>(this->_internal_registry_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.ContainerRegistry.registry_url");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_registry_url(), target);
  }

  // string registry_user = 2 [json_name = "registryUser"];
  if (!this->_internal_registry_user().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_registry_user().data(), static_cast<int>(this->_internal_registry_user().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.ContainerRegistry.registry_user");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_registry_user(), target);
  }

  // string reg_cred_auth = 3 [json_name = "regCredAuth"];
  if (!this->_internal_reg_cred_auth().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_reg_cred_auth().data(), static_cast<int>(this->_internal_reg_cred_auth().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.ContainerRegistry.reg_cred_auth");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_reg_cred_auth(), target);
  }

  // string image_name = 4 [json_name = "imageName"];
  if (!this->_internal_image_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_image_name().data(), static_cast<int>(this->_internal_image_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.ContainerRegistry.image_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_image_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.runtime.v1alpha1.ContainerRegistry)
  return target;
}

size_t ContainerRegistry::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.runtime.v1alpha1.ContainerRegistry)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string registry_url = 1 [json_name = "registryUrl"];
  if (!this->_internal_registry_url().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_registry_url());
  }

  // string registry_user = 2 [json_name = "registryUser"];
  if (!this->_internal_registry_user().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_registry_user());
  }

  // string reg_cred_auth = 3 [json_name = "regCredAuth"];
  if (!this->_internal_reg_cred_auth().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_reg_cred_auth());
  }

  // string image_name = 4 [json_name = "imageName"];
  if (!this->_internal_image_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_image_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ContainerRegistry::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ContainerRegistry::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ContainerRegistry::GetClassData() const { return &_class_data_; }

void ContainerRegistry::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ContainerRegistry *>(to)->MergeFrom(
      static_cast<const ContainerRegistry &>(from));
}


void ContainerRegistry::MergeFrom(const ContainerRegistry& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.runtime.v1alpha1.ContainerRegistry)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_registry_url().empty()) {
    _internal_set_registry_url(from._internal_registry_url());
  }
  if (!from._internal_registry_user().empty()) {
    _internal_set_registry_user(from._internal_registry_user());
  }
  if (!from._internal_reg_cred_auth().empty()) {
    _internal_set_reg_cred_auth(from._internal_reg_cred_auth());
  }
  if (!from._internal_image_name().empty()) {
    _internal_set_image_name(from._internal_image_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ContainerRegistry::CopyFrom(const ContainerRegistry& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.runtime.v1alpha1.ContainerRegistry)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerRegistry::IsInitialized() const {
  return true;
}

void ContainerRegistry::InternalSwap(ContainerRegistry* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &registry_url_, GetArenaForAllocation(),
      &other->registry_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &registry_user_, GetArenaForAllocation(),
      &other->registry_user_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &reg_cred_auth_, GetArenaForAllocation(),
      &other->reg_cred_auth_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &image_name_, GetArenaForAllocation(),
      &other->image_name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ContainerRegistry::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[7]);
}

// ===================================================================

class Application::_Internal {
 public:
  static const ::pipelines::runtime::v1alpha1::Repository& repository(const Application* msg);
  static const ::pipelines::runtime::v1alpha1::Configuration& configuration(const Application* msg);
  static const ::pipelines::runtime::v1alpha1::Scaling& scaling(const Application* msg);
  static const ::pipelines::runtime::v1alpha1::ContainerRegistry& container_registry(const Application* msg);
};

const ::pipelines::runtime::v1alpha1::Repository&
Application::_Internal::repository(const Application* msg) {
  return *msg->repository_;
}
const ::pipelines::runtime::v1alpha1::Configuration&
Application::_Internal::configuration(const Application* msg) {
  return *msg->configuration_;
}
const ::pipelines::runtime::v1alpha1::Scaling&
Application::_Internal::scaling(const Application* msg) {
  return *msg->scaling_;
}
const ::pipelines::runtime::v1alpha1::ContainerRegistry&
Application::_Internal::container_registry(const Application* msg) {
  return *msg->container_registry_;
}
Application::Application(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.runtime.v1alpha1.Application)
}
Application::Application(const Application& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  integration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_integration().empty()) {
    integration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_integration(), 
      GetArenaForAllocation());
  }
  project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_id().empty()) {
    project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_id(), 
      GetArenaForAllocation());
  }
  name_project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name_project().empty()) {
    name_project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name_project(), 
      GetArenaForAllocation());
  }
  project_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_image().empty()) {
    project_image_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_image(), 
      GetArenaForAllocation());
  }
  project_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_description().empty()) {
    project_description_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_description(), 
      GetArenaForAllocation());
  }
  organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization_id().empty()) {
    organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization_id(), 
      GetArenaForAllocation());
  }
  docker_image_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_docker_image_name().empty()) {
    docker_image_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_docker_image_name(), 
      GetArenaForAllocation());
  }
  application_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_application_status().empty()) {
    application_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_application_status(), 
      GetArenaForAllocation());
  }
  dockerfile_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dockerfile_path().empty()) {
    dockerfile_path_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dockerfile_path(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_repository()) {
    repository_ = new ::pipelines::runtime::v1alpha1::Repository(*from.repository_);
  } else {
    repository_ = nullptr;
  }
  if (from._internal_has_configuration()) {
    configuration_ = new ::pipelines::runtime::v1alpha1::Configuration(*from.configuration_);
  } else {
    configuration_ = nullptr;
  }
  if (from._internal_has_scaling()) {
    scaling_ = new ::pipelines::runtime::v1alpha1::Scaling(*from.scaling_);
  } else {
    scaling_ = nullptr;
  }
  if (from._internal_has_container_registry()) {
    container_registry_ = new ::pipelines::runtime::v1alpha1::ContainerRegistry(*from.container_registry_);
  } else {
    container_registry_ = nullptr;
  }
  ::memcpy(&traffic_type_, &from.traffic_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&no_docker_exists_) -
    reinterpret_cast<char*>(&traffic_type_)) + sizeof(no_docker_exists_));
  // @@protoc_insertion_point(copy_constructor:pipelines.runtime.v1alpha1.Application)
}

inline void Application::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
integration_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
project_image_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
project_description_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
docker_image_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
application_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
dockerfile_path_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&repository_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&no_docker_exists_) -
    reinterpret_cast<char*>(&repository_)) + sizeof(no_docker_exists_));
}

Application::~Application() {
  // @@protoc_insertion_point(destructor:pipelines.runtime.v1alpha1.Application)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Application::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  integration_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_image_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_description_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  docker_image_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  application_status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dockerfile_path_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete repository_;
  if (this != internal_default_instance()) delete configuration_;
  if (this != internal_default_instance()) delete scaling_;
  if (this != internal_default_instance()) delete container_registry_;
}

void Application::ArenaDtor(void* object) {
  Application* _this = reinterpret_cast< Application* >(object);
  (void)_this;
}
void Application::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Application::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Application::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.runtime.v1alpha1.Application)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  name_.ClearToEmpty();
  integration_.ClearToEmpty();
  project_id_.ClearToEmpty();
  name_project_.ClearToEmpty();
  project_image_.ClearToEmpty();
  project_description_.ClearToEmpty();
  organization_id_.ClearToEmpty();
  docker_image_name_.ClearToEmpty();
  application_status_.ClearToEmpty();
  dockerfile_path_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && repository_ != nullptr) {
    delete repository_;
  }
  repository_ = nullptr;
  if (GetArenaForAllocation() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && scaling_ != nullptr) {
    delete scaling_;
  }
  scaling_ = nullptr;
  if (GetArenaForAllocation() == nullptr && container_registry_ != nullptr) {
    delete container_registry_;
  }
  container_registry_ = nullptr;
  ::memset(&traffic_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&no_docker_exists_) -
      reinterpret_cast<char*>(&traffic_type_)) + sizeof(no_docker_exists_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Application::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Application.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Application.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string integration = 3 [json_name = "integration"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_integration();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Application.integration"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pipelines.runtime.v1alpha1.Repository repository = 4 [json_name = "repository"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_repository(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pipelines.runtime.v1alpha1.Configuration configuration = 5 [json_name = "configuration"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string project_id = 6 [json_name = "projectId"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Application.project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name_project = 7 [json_name = "nameProject"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_name_project();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Application.name_project"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string project_image = 8 [json_name = "projectImage"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_project_image();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Application.project_image"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string project_description = 9 [json_name = "projectDescription"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_project_description();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Application.project_description"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string organization_id = 10 [json_name = "organizationId"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Application.organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pipelines.runtime.v1alpha1.Scaling scaling = 11 [json_name = "scaling"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_scaling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pipelines.runtime.v1alpha1.TrafficType traffic_type = 12 [json_name = "trafficType"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_traffic_type(static_cast<::pipelines::runtime::v1alpha1::TrafficType>(val));
        } else goto handle_unusual;
        continue;
      // bool integration_status = 13 [json_name = "integrationStatus"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          integration_status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pipelines.runtime.v1alpha1.DockerImageBuildpack docker_image_buildpack = 14 [json_name = "dockerImageBuildpack"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_docker_image_buildpack(static_cast<::pipelines::runtime::v1alpha1::DockerImageBuildpack>(val));
        } else goto handle_unusual;
        continue;
      // bool no_docker_exists = 15 [json_name = "noDockerExists"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          no_docker_exists_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pipelines.runtime.v1alpha1.ContainerRegistry container_registry = 16 [json_name = "containerRegistry"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_container_registry(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string docker_image_name = 17 [json_name = "dockerImageName"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_docker_image_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Application.docker_image_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string application_status = 18 [json_name = "applicationStatus"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_application_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Application.application_status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dockerfile_path = 19 [json_name = "dockerfilePath"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_dockerfile_path();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Application.dockerfile_path"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Application::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.runtime.v1alpha1.Application)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Application.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Application.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // string integration = 3 [json_name = "integration"];
  if (!this->_internal_integration().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_integration().data(), static_cast<int>(this->_internal_integration().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Application.integration");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_integration(), target);
  }

  // .pipelines.runtime.v1alpha1.Repository repository = 4 [json_name = "repository"];
  if (this->_internal_has_repository()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::repository(this), target, stream);
  }

  // .pipelines.runtime.v1alpha1.Configuration configuration = 5 [json_name = "configuration"];
  if (this->_internal_has_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::configuration(this), target, stream);
  }

  // string project_id = 6 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_id().data(), static_cast<int>(this->_internal_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Application.project_id");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_project_id(), target);
  }

  // string name_project = 7 [json_name = "nameProject"];
  if (!this->_internal_name_project().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_project().data(), static_cast<int>(this->_internal_name_project().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Application.name_project");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_name_project(), target);
  }

  // string project_image = 8 [json_name = "projectImage"];
  if (!this->_internal_project_image().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_image().data(), static_cast<int>(this->_internal_project_image().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Application.project_image");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_project_image(), target);
  }

  // string project_description = 9 [json_name = "projectDescription"];
  if (!this->_internal_project_description().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_description().data(), static_cast<int>(this->_internal_project_description().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Application.project_description");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_project_description(), target);
  }

  // string organization_id = 10 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Application.organization_id");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_organization_id(), target);
  }

  // .pipelines.runtime.v1alpha1.Scaling scaling = 11 [json_name = "scaling"];
  if (this->_internal_has_scaling()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::scaling(this), target, stream);
  }

  // .pipelines.runtime.v1alpha1.TrafficType traffic_type = 12 [json_name = "trafficType"];
  if (this->_internal_traffic_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_traffic_type(), target);
  }

  // bool integration_status = 13 [json_name = "integrationStatus"];
  if (this->_internal_integration_status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(13, this->_internal_integration_status(), target);
  }

  // .pipelines.runtime.v1alpha1.DockerImageBuildpack docker_image_buildpack = 14 [json_name = "dockerImageBuildpack"];
  if (this->_internal_docker_image_buildpack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      14, this->_internal_docker_image_buildpack(), target);
  }

  // bool no_docker_exists = 15 [json_name = "noDockerExists"];
  if (this->_internal_no_docker_exists() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(15, this->_internal_no_docker_exists(), target);
  }

  // .pipelines.runtime.v1alpha1.ContainerRegistry container_registry = 16 [json_name = "containerRegistry"];
  if (this->_internal_has_container_registry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::container_registry(this), target, stream);
  }

  // string docker_image_name = 17 [json_name = "dockerImageName"];
  if (!this->_internal_docker_image_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_docker_image_name().data(), static_cast<int>(this->_internal_docker_image_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Application.docker_image_name");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_docker_image_name(), target);
  }

  // string application_status = 18 [json_name = "applicationStatus"];
  if (!this->_internal_application_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_application_status().data(), static_cast<int>(this->_internal_application_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Application.application_status");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_application_status(), target);
  }

  // string dockerfile_path = 19 [json_name = "dockerfilePath"];
  if (!this->_internal_dockerfile_path().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dockerfile_path().data(), static_cast<int>(this->_internal_dockerfile_path().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Application.dockerfile_path");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_dockerfile_path(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.runtime.v1alpha1.Application)
  return target;
}

size_t Application::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.runtime.v1alpha1.Application)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string integration = 3 [json_name = "integration"];
  if (!this->_internal_integration().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_integration());
  }

  // string project_id = 6 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_id());
  }

  // string name_project = 7 [json_name = "nameProject"];
  if (!this->_internal_name_project().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_project());
  }

  // string project_image = 8 [json_name = "projectImage"];
  if (!this->_internal_project_image().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_image());
  }

  // string project_description = 9 [json_name = "projectDescription"];
  if (!this->_internal_project_description().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_description());
  }

  // string organization_id = 10 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  // string docker_image_name = 17 [json_name = "dockerImageName"];
  if (!this->_internal_docker_image_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_docker_image_name());
  }

  // string application_status = 18 [json_name = "applicationStatus"];
  if (!this->_internal_application_status().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_application_status());
  }

  // string dockerfile_path = 19 [json_name = "dockerfilePath"];
  if (!this->_internal_dockerfile_path().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dockerfile_path());
  }

  // .pipelines.runtime.v1alpha1.Repository repository = 4 [json_name = "repository"];
  if (this->_internal_has_repository()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *repository_);
  }

  // .pipelines.runtime.v1alpha1.Configuration configuration = 5 [json_name = "configuration"];
  if (this->_internal_has_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *configuration_);
  }

  // .pipelines.runtime.v1alpha1.Scaling scaling = 11 [json_name = "scaling"];
  if (this->_internal_has_scaling()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scaling_);
  }

  // .pipelines.runtime.v1alpha1.ContainerRegistry container_registry = 16 [json_name = "containerRegistry"];
  if (this->_internal_has_container_registry()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *container_registry_);
  }

  // .pipelines.runtime.v1alpha1.TrafficType traffic_type = 12 [json_name = "trafficType"];
  if (this->_internal_traffic_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_traffic_type());
  }

  // .pipelines.runtime.v1alpha1.DockerImageBuildpack docker_image_buildpack = 14 [json_name = "dockerImageBuildpack"];
  if (this->_internal_docker_image_buildpack() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_docker_image_buildpack());
  }

  // bool integration_status = 13 [json_name = "integrationStatus"];
  if (this->_internal_integration_status() != 0) {
    total_size += 1 + 1;
  }

  // bool no_docker_exists = 15 [json_name = "noDockerExists"];
  if (this->_internal_no_docker_exists() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Application::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Application::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Application::GetClassData() const { return &_class_data_; }

void Application::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Application *>(to)->MergeFrom(
      static_cast<const Application &>(from));
}


void Application::MergeFrom(const Application& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.runtime.v1alpha1.Application)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_integration().empty()) {
    _internal_set_integration(from._internal_integration());
  }
  if (!from._internal_project_id().empty()) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (!from._internal_name_project().empty()) {
    _internal_set_name_project(from._internal_name_project());
  }
  if (!from._internal_project_image().empty()) {
    _internal_set_project_image(from._internal_project_image());
  }
  if (!from._internal_project_description().empty()) {
    _internal_set_project_description(from._internal_project_description());
  }
  if (!from._internal_organization_id().empty()) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (!from._internal_docker_image_name().empty()) {
    _internal_set_docker_image_name(from._internal_docker_image_name());
  }
  if (!from._internal_application_status().empty()) {
    _internal_set_application_status(from._internal_application_status());
  }
  if (!from._internal_dockerfile_path().empty()) {
    _internal_set_dockerfile_path(from._internal_dockerfile_path());
  }
  if (from._internal_has_repository()) {
    _internal_mutable_repository()->::pipelines::runtime::v1alpha1::Repository::MergeFrom(from._internal_repository());
  }
  if (from._internal_has_configuration()) {
    _internal_mutable_configuration()->::pipelines::runtime::v1alpha1::Configuration::MergeFrom(from._internal_configuration());
  }
  if (from._internal_has_scaling()) {
    _internal_mutable_scaling()->::pipelines::runtime::v1alpha1::Scaling::MergeFrom(from._internal_scaling());
  }
  if (from._internal_has_container_registry()) {
    _internal_mutable_container_registry()->::pipelines::runtime::v1alpha1::ContainerRegistry::MergeFrom(from._internal_container_registry());
  }
  if (from._internal_traffic_type() != 0) {
    _internal_set_traffic_type(from._internal_traffic_type());
  }
  if (from._internal_docker_image_buildpack() != 0) {
    _internal_set_docker_image_buildpack(from._internal_docker_image_buildpack());
  }
  if (from._internal_integration_status() != 0) {
    _internal_set_integration_status(from._internal_integration_status());
  }
  if (from._internal_no_docker_exists() != 0) {
    _internal_set_no_docker_exists(from._internal_no_docker_exists());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Application::CopyFrom(const Application& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.runtime.v1alpha1.Application)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Application::IsInitialized() const {
  return true;
}

void Application::InternalSwap(Application* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &integration_, GetArenaForAllocation(),
      &other->integration_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_id_, GetArenaForAllocation(),
      &other->project_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_project_, GetArenaForAllocation(),
      &other->name_project_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_image_, GetArenaForAllocation(),
      &other->project_image_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_description_, GetArenaForAllocation(),
      &other->project_description_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_id_, GetArenaForAllocation(),
      &other->organization_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &docker_image_name_, GetArenaForAllocation(),
      &other->docker_image_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &application_status_, GetArenaForAllocation(),
      &other->application_status_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dockerfile_path_, GetArenaForAllocation(),
      &other->dockerfile_path_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Application, no_docker_exists_)
      + sizeof(Application::no_docker_exists_)
      - PROTOBUF_FIELD_OFFSET(Application, repository_)>(
          reinterpret_cast<char*>(&repository_),
          reinterpret_cast<char*>(&other->repository_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Application::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[8]);
}

// ===================================================================

Runtime_IntegrationEntry_DoNotUse::Runtime_IntegrationEntry_DoNotUse() {}
Runtime_IntegrationEntry_DoNotUse::Runtime_IntegrationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Runtime_IntegrationEntry_DoNotUse::MergeFrom(const Runtime_IntegrationEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Runtime_IntegrationEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[9]);
}

// ===================================================================

Runtime_EnvironmentVariablesEntry_DoNotUse::Runtime_EnvironmentVariablesEntry_DoNotUse() {}
Runtime_EnvironmentVariablesEntry_DoNotUse::Runtime_EnvironmentVariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Runtime_EnvironmentVariablesEntry_DoNotUse::MergeFrom(const Runtime_EnvironmentVariablesEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Runtime_EnvironmentVariablesEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[10]);
}

// ===================================================================

Runtime_CommandsEntry_DoNotUse::Runtime_CommandsEntry_DoNotUse() {}
Runtime_CommandsEntry_DoNotUse::Runtime_CommandsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Runtime_CommandsEntry_DoNotUse::MergeFrom(const Runtime_CommandsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Runtime_CommandsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[11]);
}

// ===================================================================

Runtime_SecretsEntry_DoNotUse::Runtime_SecretsEntry_DoNotUse() {}
Runtime_SecretsEntry_DoNotUse::Runtime_SecretsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Runtime_SecretsEntry_DoNotUse::MergeFrom(const Runtime_SecretsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Runtime_SecretsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[12]);
}

// ===================================================================

Runtime_ExtraArgsEntry_DoNotUse::Runtime_ExtraArgsEntry_DoNotUse() {}
Runtime_ExtraArgsEntry_DoNotUse::Runtime_ExtraArgsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Runtime_ExtraArgsEntry_DoNotUse::MergeFrom(const Runtime_ExtraArgsEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Runtime_ExtraArgsEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[13]);
}

// ===================================================================

class Runtime::_Internal {
 public:
  static const ::pipelines::runtime::v1alpha1::Application& application_data(const Runtime* msg);
  static const ::pipelines::tekton::v1alpha1::PipelineRun& pipeline_run(const Runtime* msg);
  static const ::pipelines::runtime::v1alpha1::Configuration& configuration(const Runtime* msg);
  static const ::pipelines::runtime::v1alpha1::Scaling& scaling(const Runtime* msg);
};

const ::pipelines::runtime::v1alpha1::Application&
Runtime::_Internal::application_data(const Runtime* msg) {
  return *msg->application_data_;
}
const ::pipelines::tekton::v1alpha1::PipelineRun&
Runtime::_Internal::pipeline_run(const Runtime* msg) {
  return *msg->pipeline_run_;
}
const ::pipelines::runtime::v1alpha1::Configuration&
Runtime::_Internal::configuration(const Runtime* msg) {
  return *msg->configuration_;
}
const ::pipelines::runtime::v1alpha1::Scaling&
Runtime::_Internal::scaling(const Runtime* msg) {
  return *msg->scaling_;
}
void Runtime::clear_before_deploy_tasks() {
  before_deploy_tasks_.Clear();
}
void Runtime::clear_after_deploy_tasks() {
  after_deploy_tasks_.Clear();
}
void Runtime::clear_params() {
  params_.Clear();
}
void Runtime::clear_pipeline_run() {
  if (GetArenaForAllocation() == nullptr && pipeline_run_ != nullptr) {
    delete pipeline_run_;
  }
  pipeline_run_ = nullptr;
}
Runtime::Runtime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  instance_types_(arena),
  integration_(arena),
  environment_variables_(arena),
  commands_(arena),
  secrets_(arena),
  extra_args_(arena),
  before_deploy_tasks_(arena),
  after_deploy_tasks_(arena),
  params_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.runtime.v1alpha1.Runtime)
}
Runtime::Runtime(const Runtime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      instance_types_(from.instance_types_),
      before_deploy_tasks_(from.before_deploy_tasks_),
      after_deploy_tasks_(from.after_deploy_tasks_),
      params_(from.params_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  integration_.MergeFrom(from.integration_);
  environment_variables_.MergeFrom(from.environment_variables_);
  commands_.MergeFrom(from.commands_);
  secrets_.MergeFrom(from.secrets_);
  extra_args_.MergeFrom(from.extra_args_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization_id().empty()) {
    organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization_id(), 
      GetArenaForAllocation());
  }
  project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_id().empty()) {
    project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_id(), 
      GetArenaForAllocation());
  }
  name_project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name_project().empty()) {
    name_project_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name_project(), 
      GetArenaForAllocation());
  }
  application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_application_id().empty()) {
    application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_application_id(), 
      GetArenaForAllocation());
  }
  workspace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_workspace_id().empty()) {
    workspace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_workspace_id(), 
      GetArenaForAllocation());
  }
  environment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_environment_id().empty()) {
    environment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_environment_id(), 
      GetArenaForAllocation());
  }
  scaler_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_scaler().empty()) {
    scaler_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_scaler(), 
      GetArenaForAllocation());
  }
  pod_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pod_status().empty()) {
    pod_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pod_status(), 
      GetArenaForAllocation());
  }
  pod_status_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pod_status_msg().empty()) {
    pod_status_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pod_status_msg(), 
      GetArenaForAllocation());
  }
  response_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response_message().empty()) {
    response_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_response_message(), 
      GetArenaForAllocation());
  }
  environment_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_environment_name().empty()) {
    environment_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_environment_name(), 
      GetArenaForAllocation());
  }
  environment_internal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_environment_internal_name().empty()) {
    environment_internal_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_environment_internal_name(), 
      GetArenaForAllocation());
  }
  application_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_application_name().empty()) {
    application_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_application_name(), 
      GetArenaForAllocation());
  }
  integration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_integration_id().empty()) {
    integration_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_integration_id(), 
      GetArenaForAllocation());
  }
  pod_ingress_cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pod_ingress_cert().empty()) {
    pod_ingress_cert_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pod_ingress_cert(), 
      GetArenaForAllocation());
  }
  host_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_host_url().empty()) {
    host_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_host_url(), 
      GetArenaForAllocation());
  }
  app_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_app_label().empty()) {
    app_label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_app_label(), 
      GetArenaForAllocation());
  }
  created_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_created_at().empty()) {
    created_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_created_at(), 
      GetArenaForAllocation());
  }
  updated_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_updated_at().empty()) {
    updated_at_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_updated_at(), 
      GetArenaForAllocation());
  }
  tag_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_tag_name().empty()) {
    tag_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_tag_name(), 
      GetArenaForAllocation());
  }
  user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_user_id().empty()) {
    user_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_user_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_application_data()) {
    application_data_ = new ::pipelines::runtime::v1alpha1::Application(*from.application_data_);
  } else {
    application_data_ = nullptr;
  }
  if (from._internal_has_pipeline_run()) {
    pipeline_run_ = new ::pipelines::tekton::v1alpha1::PipelineRun(*from.pipeline_run_);
  } else {
    pipeline_run_ = nullptr;
  }
  if (from._internal_has_configuration()) {
    configuration_ = new ::pipelines::runtime::v1alpha1::Configuration(*from.configuration_);
  } else {
    configuration_ = nullptr;
  }
  if (from._internal_has_scaling()) {
    scaling_ = new ::pipelines::runtime::v1alpha1::Scaling(*from.scaling_);
  } else {
    scaling_ = nullptr;
  }
  ::memcpy(&traffic_type_, &from.traffic_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_enabled_) -
    reinterpret_cast<char*>(&traffic_type_)) + sizeof(is_enabled_));
  // @@protoc_insertion_point(copy_constructor:pipelines.runtime.v1alpha1.Runtime)
}

inline void Runtime::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_project_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
workspace_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
environment_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
scaler_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pod_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pod_status_msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
response_message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
environment_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
environment_internal_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
application_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
integration_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pod_ingress_cert_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
host_url_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
app_label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
created_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
updated_at_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
tag_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
user_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&application_data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_enabled_) -
    reinterpret_cast<char*>(&application_data_)) + sizeof(is_enabled_));
}

Runtime::~Runtime() {
  // @@protoc_insertion_point(destructor:pipelines.runtime.v1alpha1.Runtime)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Runtime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_project_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  application_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  workspace_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  environment_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  scaler_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pod_status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pod_status_msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  response_message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  environment_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  environment_internal_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  application_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  integration_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pod_ingress_cert_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  host_url_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  app_label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  created_at_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updated_at_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  tag_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  user_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete application_data_;
  if (this != internal_default_instance()) delete pipeline_run_;
  if (this != internal_default_instance()) delete configuration_;
  if (this != internal_default_instance()) delete scaling_;
}

void Runtime::ArenaDtor(void* object) {
  Runtime* _this = reinterpret_cast< Runtime* >(object);
  (void)_this;
  _this->integration_. ~MapField();
  _this->environment_variables_. ~MapField();
  _this->commands_. ~MapField();
  _this->secrets_. ~MapField();
  _this->extra_args_. ~MapField();
}
inline void Runtime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Runtime::ArenaDtor);
  }
}
void Runtime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Runtime::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.runtime.v1alpha1.Runtime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  instance_types_.Clear();
  integration_.Clear();
  environment_variables_.Clear();
  commands_.Clear();
  secrets_.Clear();
  extra_args_.Clear();
  before_deploy_tasks_.Clear();
  after_deploy_tasks_.Clear();
  params_.Clear();
  id_.ClearToEmpty();
  name_.ClearToEmpty();
  organization_id_.ClearToEmpty();
  project_id_.ClearToEmpty();
  name_project_.ClearToEmpty();
  application_id_.ClearToEmpty();
  workspace_id_.ClearToEmpty();
  environment_id_.ClearToEmpty();
  scaler_.ClearToEmpty();
  pod_status_.ClearToEmpty();
  pod_status_msg_.ClearToEmpty();
  response_message_.ClearToEmpty();
  environment_name_.ClearToEmpty();
  environment_internal_name_.ClearToEmpty();
  application_name_.ClearToEmpty();
  integration_id_.ClearToEmpty();
  pod_ingress_cert_.ClearToEmpty();
  host_url_.ClearToEmpty();
  app_label_.ClearToEmpty();
  created_at_.ClearToEmpty();
  updated_at_.ClearToEmpty();
  tag_name_.ClearToEmpty();
  user_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && application_data_ != nullptr) {
    delete application_data_;
  }
  application_data_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pipeline_run_ != nullptr) {
    delete pipeline_run_;
  }
  pipeline_run_ = nullptr;
  if (GetArenaForAllocation() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && scaling_ != nullptr) {
    delete scaling_;
  }
  scaling_ = nullptr;
  ::memset(&traffic_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_enabled_) -
      reinterpret_cast<char*>(&traffic_type_)) + sizeof(is_enabled_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Runtime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pipelines.runtime.v1alpha1.IntanceType instance_types = 3 [json_name = "instanceTypes"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_instance_types(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string organization_id = 4 [json_name = "organizationId"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string project_id = 5 [json_name = "projectId"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name_project = 6 [json_name = "nameProject"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_name_project();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.name_project"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string application_id = 7 [json_name = "applicationId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_application_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.application_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string workspace_id = 8 [json_name = "workspaceId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_workspace_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.workspace_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string environment_id = 9 [json_name = "environmentId"];
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_environment_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.environment_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string scaler = 10 [json_name = "scaler"];
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_scaler();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.scaler"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pod_status = 11 [json_name = "podStatus"];
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_pod_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.pod_status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pod_status_msg = 12 [json_name = "podStatusMsg"];
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_pod_status_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.pod_status_msg"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // map<string, string> integration = 13 [json_name = "integration"];
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&integration_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> environment_variables = 14 [json_name = "environmentVariables"];
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&environment_variables_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> commands = 15 [json_name = "commands"];
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&commands_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> secrets = 16 [json_name = "secrets"];
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&secrets_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // map<string, string> extra_args = 17 [json_name = "extraArgs"];
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(&extra_args_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // .pipelines.runtime.v1alpha1.TrafficType traffic_type = 18 [json_name = "trafficType"];
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_traffic_type(static_cast<::pipelines::runtime::v1alpha1::TrafficType>(val));
        } else goto handle_unusual;
        continue;
      // string response_message = 19 [json_name = "responseMessage"];
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_response_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.response_message"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string environment_name = 20 [json_name = "environmentName"];
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_environment_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.environment_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string environment_internal_name = 21 [json_name = "environmentInternalName"];
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_environment_internal_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.environment_internal_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string application_name = 22 [json_name = "applicationName"];
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_application_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.application_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 storage_used = 23 [json_name = "storageUsed"];
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          storage_used_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 storage_limit = 24 [json_name = "storageLimit"];
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          storage_limit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string integration_id = 25 [json_name = "integrationId"];
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_integration_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.integration_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pipelines.runtime.v1alpha1.Application application_data = 26 [json_name = "applicationData"];
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_application_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool custom_pipeline = 27 [json_name = "customPipeline"];
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          custom_pipeline_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pipelines.tekton.v1alpha1.Task before_deploy_tasks = 28 [json_name = "beforeDeployTasks"];
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_before_deploy_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pipelines.tekton.v1alpha1.Task after_deploy_tasks = 29 [json_name = "afterDeployTasks"];
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_after_deploy_tasks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else goto handle_unusual;
        continue;
      // string pod_ingress_cert = 30 [json_name = "podIngressCert"];
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_pod_ingress_cert();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.pod_ingress_cert"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_not_exist_dockerfile = 31 [json_name = "isNotExistDockerfile"];
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 248)) {
          is_not_exist_dockerfile_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pipelines.tekton.v1alpha1.Params params = 32 [json_name = "params"];
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_params(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else goto handle_unusual;
        continue;
      // .pipelines.tekton.v1alpha1.PipelineRun pipeline_run = 33 [json_name = "pipelineRun"];
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_pipeline_run(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string host_url = 34 [json_name = "hostUrl"];
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_host_url();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.host_url"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string app_label = 35 [json_name = "appLabel"];
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_app_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.app_label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string created_at = 36 [json_name = "createdAt"];
      case 36:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_created_at();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.created_at"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string updated_at = 37 [json_name = "updatedAt"];
      case 37:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_updated_at();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.updated_at"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_enabled_application = 38 [json_name = "isEnabledApplication"];
      case 38:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          is_enabled_application_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_enabled = 39 [json_name = "isEnabled"];
      case 39:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          is_enabled_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pipelines.runtime.v1alpha1.Configuration configuration = 40 [json_name = "configuration"];
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pipelines.runtime.v1alpha1.Scaling scaling = 41 [json_name = "scaling"];
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_scaling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string tag_name = 42 [json_name = "tagName"];
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_tag_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.tag_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string user_id = 43 [json_name = "userId"];
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_user_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Runtime.user_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Runtime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.runtime.v1alpha1.Runtime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .pipelines.runtime.v1alpha1.IntanceType instance_types = 3 [json_name = "instanceTypes"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_instance_types_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_instance_types(i), target, stream);
  }

  // string organization_id = 4 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.organization_id");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_organization_id(), target);
  }

  // string project_id = 5 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_id().data(), static_cast<int>(this->_internal_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.project_id");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_project_id(), target);
  }

  // string name_project = 6 [json_name = "nameProject"];
  if (!this->_internal_name_project().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name_project().data(), static_cast<int>(this->_internal_name_project().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.name_project");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_name_project(), target);
  }

  // string application_id = 7 [json_name = "applicationId"];
  if (!this->_internal_application_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_application_id().data(), static_cast<int>(this->_internal_application_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.application_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_application_id(), target);
  }

  // string workspace_id = 8 [json_name = "workspaceId"];
  if (!this->_internal_workspace_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_workspace_id().data(), static_cast<int>(this->_internal_workspace_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.workspace_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_workspace_id(), target);
  }

  // string environment_id = 9 [json_name = "environmentId"];
  if (!this->_internal_environment_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_environment_id().data(), static_cast<int>(this->_internal_environment_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.environment_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_environment_id(), target);
  }

  // string scaler = 10 [json_name = "scaler"];
  if (!this->_internal_scaler().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_scaler().data(), static_cast<int>(this->_internal_scaler().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.scaler");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_scaler(), target);
  }

  // string pod_status = 11 [json_name = "podStatus"];
  if (!this->_internal_pod_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pod_status().data(), static_cast<int>(this->_internal_pod_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.pod_status");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_pod_status(), target);
  }

  // string pod_status_msg = 12 [json_name = "podStatusMsg"];
  if (!this->_internal_pod_status_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pod_status_msg().data(), static_cast<int>(this->_internal_pod_status_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.pod_status_msg");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_pod_status_msg(), target);
  }

  // map<string, string> integration = 13 [json_name = "integration"];
  if (!this->_internal_integration().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pipelines.runtime.v1alpha1.Runtime.IntegrationEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pipelines.runtime.v1alpha1.Runtime.IntegrationEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_integration().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_integration().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_integration().begin();
          it != this->_internal_integration().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Runtime_IntegrationEntry_DoNotUse::Funcs::InternalSerialize(13, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_integration().begin();
          it != this->_internal_integration().end(); ++it) {
        target = Runtime_IntegrationEntry_DoNotUse::Funcs::InternalSerialize(13, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> environment_variables = 14 [json_name = "environmentVariables"];
  if (!this->_internal_environment_variables().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pipelines.runtime.v1alpha1.Runtime.EnvironmentVariablesEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pipelines.runtime.v1alpha1.Runtime.EnvironmentVariablesEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_environment_variables().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_environment_variables().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_environment_variables().begin();
          it != this->_internal_environment_variables().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Runtime_EnvironmentVariablesEntry_DoNotUse::Funcs::InternalSerialize(14, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_environment_variables().begin();
          it != this->_internal_environment_variables().end(); ++it) {
        target = Runtime_EnvironmentVariablesEntry_DoNotUse::Funcs::InternalSerialize(14, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> commands = 15 [json_name = "commands"];
  if (!this->_internal_commands().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pipelines.runtime.v1alpha1.Runtime.CommandsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pipelines.runtime.v1alpha1.Runtime.CommandsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_commands().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_commands().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_commands().begin();
          it != this->_internal_commands().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Runtime_CommandsEntry_DoNotUse::Funcs::InternalSerialize(15, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_commands().begin();
          it != this->_internal_commands().end(); ++it) {
        target = Runtime_CommandsEntry_DoNotUse::Funcs::InternalSerialize(15, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> secrets = 16 [json_name = "secrets"];
  if (!this->_internal_secrets().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pipelines.runtime.v1alpha1.Runtime.SecretsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pipelines.runtime.v1alpha1.Runtime.SecretsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_secrets().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_secrets().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Runtime_SecretsEntry_DoNotUse::Funcs::InternalSerialize(16, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_secrets().begin();
          it != this->_internal_secrets().end(); ++it) {
        target = Runtime_SecretsEntry_DoNotUse::Funcs::InternalSerialize(16, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // map<string, string> extra_args = 17 [json_name = "extraArgs"];
  if (!this->_internal_extra_args().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pipelines.runtime.v1alpha1.Runtime.ExtraArgsEntry.key");
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->second.data(), static_cast<int>(p->second.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "pipelines.runtime.v1alpha1.Runtime.ExtraArgsEntry.value");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_extra_args().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_extra_args().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_extra_args().begin();
          it != this->_internal_extra_args().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Runtime_ExtraArgsEntry_DoNotUse::Funcs::InternalSerialize(17, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
          it = this->_internal_extra_args().begin();
          it != this->_internal_extra_args().end(); ++it) {
        target = Runtime_ExtraArgsEntry_DoNotUse::Funcs::InternalSerialize(17, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  // .pipelines.runtime.v1alpha1.TrafficType traffic_type = 18 [json_name = "trafficType"];
  if (this->_internal_traffic_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      18, this->_internal_traffic_type(), target);
  }

  // string response_message = 19 [json_name = "responseMessage"];
  if (!this->_internal_response_message().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response_message().data(), static_cast<int>(this->_internal_response_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.response_message");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_response_message(), target);
  }

  // string environment_name = 20 [json_name = "environmentName"];
  if (!this->_internal_environment_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_environment_name().data(), static_cast<int>(this->_internal_environment_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.environment_name");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_environment_name(), target);
  }

  // string environment_internal_name = 21 [json_name = "environmentInternalName"];
  if (!this->_internal_environment_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_environment_internal_name().data(), static_cast<int>(this->_internal_environment_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.environment_internal_name");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_environment_internal_name(), target);
  }

  // string application_name = 22 [json_name = "applicationName"];
  if (!this->_internal_application_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_application_name().data(), static_cast<int>(this->_internal_application_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.application_name");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_application_name(), target);
  }

  // uint32 storage_used = 23 [json_name = "storageUsed"];
  if (this->_internal_storage_used() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_storage_used(), target);
  }

  // uint32 storage_limit = 24 [json_name = "storageLimit"];
  if (this->_internal_storage_limit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_storage_limit(), target);
  }

  // string integration_id = 25 [json_name = "integrationId"];
  if (!this->_internal_integration_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_integration_id().data(), static_cast<int>(this->_internal_integration_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.integration_id");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_integration_id(), target);
  }

  // .pipelines.runtime.v1alpha1.Application application_data = 26 [json_name = "applicationData"];
  if (this->_internal_has_application_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::application_data(this), target, stream);
  }

  // bool custom_pipeline = 27 [json_name = "customPipeline"];
  if (this->_internal_custom_pipeline() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(27, this->_internal_custom_pipeline(), target);
  }

  // repeated .pipelines.tekton.v1alpha1.Task before_deploy_tasks = 28 [json_name = "beforeDeployTasks"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_before_deploy_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, this->_internal_before_deploy_tasks(i), target, stream);
  }

  // repeated .pipelines.tekton.v1alpha1.Task after_deploy_tasks = 29 [json_name = "afterDeployTasks"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_after_deploy_tasks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, this->_internal_after_deploy_tasks(i), target, stream);
  }

  // string pod_ingress_cert = 30 [json_name = "podIngressCert"];
  if (!this->_internal_pod_ingress_cert().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pod_ingress_cert().data(), static_cast<int>(this->_internal_pod_ingress_cert().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.pod_ingress_cert");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_pod_ingress_cert(), target);
  }

  // bool is_not_exist_dockerfile = 31 [json_name = "isNotExistDockerfile"];
  if (this->_internal_is_not_exist_dockerfile() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(31, this->_internal_is_not_exist_dockerfile(), target);
  }

  // repeated .pipelines.tekton.v1alpha1.Params params = 32 [json_name = "params"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_params_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_params(i), target, stream);
  }

  // .pipelines.tekton.v1alpha1.PipelineRun pipeline_run = 33 [json_name = "pipelineRun"];
  if (this->_internal_has_pipeline_run()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::pipeline_run(this), target, stream);
  }

  // string host_url = 34 [json_name = "hostUrl"];
  if (!this->_internal_host_url().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_host_url().data(), static_cast<int>(this->_internal_host_url().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.host_url");
    target = stream->WriteStringMaybeAliased(
        34, this->_internal_host_url(), target);
  }

  // string app_label = 35 [json_name = "appLabel"];
  if (!this->_internal_app_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_app_label().data(), static_cast<int>(this->_internal_app_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.app_label");
    target = stream->WriteStringMaybeAliased(
        35, this->_internal_app_label(), target);
  }

  // string created_at = 36 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_created_at().data(), static_cast<int>(this->_internal_created_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.created_at");
    target = stream->WriteStringMaybeAliased(
        36, this->_internal_created_at(), target);
  }

  // string updated_at = 37 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_updated_at().data(), static_cast<int>(this->_internal_updated_at().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.updated_at");
    target = stream->WriteStringMaybeAliased(
        37, this->_internal_updated_at(), target);
  }

  // bool is_enabled_application = 38 [json_name = "isEnabledApplication"];
  if (this->_internal_is_enabled_application() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(38, this->_internal_is_enabled_application(), target);
  }

  // bool is_enabled = 39 [json_name = "isEnabled"];
  if (this->_internal_is_enabled() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(39, this->_internal_is_enabled(), target);
  }

  // .pipelines.runtime.v1alpha1.Configuration configuration = 40 [json_name = "configuration"];
  if (this->_internal_has_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        40, _Internal::configuration(this), target, stream);
  }

  // .pipelines.runtime.v1alpha1.Scaling scaling = 41 [json_name = "scaling"];
  if (this->_internal_has_scaling()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        41, _Internal::scaling(this), target, stream);
  }

  // string tag_name = 42 [json_name = "tagName"];
  if (!this->_internal_tag_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_tag_name().data(), static_cast<int>(this->_internal_tag_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.tag_name");
    target = stream->WriteStringMaybeAliased(
        42, this->_internal_tag_name(), target);
  }

  // string user_id = 43 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_user_id().data(), static_cast<int>(this->_internal_user_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Runtime.user_id");
    target = stream->WriteStringMaybeAliased(
        43, this->_internal_user_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.runtime.v1alpha1.Runtime)
  return target;
}

size_t Runtime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.runtime.v1alpha1.Runtime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pipelines.runtime.v1alpha1.IntanceType instance_types = 3 [json_name = "instanceTypes"];
  total_size += 1UL * this->_internal_instance_types_size();
  for (const auto& msg : this->instance_types_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<string, string> integration = 13 [json_name = "integration"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_integration_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_integration().begin();
      it != this->_internal_integration().end(); ++it) {
    total_size += Runtime_IntegrationEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> environment_variables = 14 [json_name = "environmentVariables"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_environment_variables_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_environment_variables().begin();
      it != this->_internal_environment_variables().end(); ++it) {
    total_size += Runtime_EnvironmentVariablesEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> commands = 15 [json_name = "commands"];
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_commands_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_commands().begin();
      it != this->_internal_commands().end(); ++it) {
    total_size += Runtime_CommandsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> secrets = 16 [json_name = "secrets"];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_secrets_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_secrets().begin();
      it != this->_internal_secrets().end(); ++it) {
    total_size += Runtime_SecretsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<string, string> extra_args = 17 [json_name = "extraArgs"];
  total_size += 2 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_extra_args_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >::const_iterator
      it = this->_internal_extra_args().begin();
      it != this->_internal_extra_args().end(); ++it) {
    total_size += Runtime_ExtraArgsEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated .pipelines.tekton.v1alpha1.Task before_deploy_tasks = 28 [json_name = "beforeDeployTasks"];
  total_size += 2UL * this->_internal_before_deploy_tasks_size();
  for (const auto& msg : this->before_deploy_tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pipelines.tekton.v1alpha1.Task after_deploy_tasks = 29 [json_name = "afterDeployTasks"];
  total_size += 2UL * this->_internal_after_deploy_tasks_size();
  for (const auto& msg : this->after_deploy_tasks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pipelines.tekton.v1alpha1.Params params = 32 [json_name = "params"];
  total_size += 2UL * this->_internal_params_size();
  for (const auto& msg : this->params_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string organization_id = 4 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  // string project_id = 5 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_id());
  }

  // string name_project = 6 [json_name = "nameProject"];
  if (!this->_internal_name_project().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name_project());
  }

  // string application_id = 7 [json_name = "applicationId"];
  if (!this->_internal_application_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_application_id());
  }

  // string workspace_id = 8 [json_name = "workspaceId"];
  if (!this->_internal_workspace_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_workspace_id());
  }

  // string environment_id = 9 [json_name = "environmentId"];
  if (!this->_internal_environment_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_environment_id());
  }

  // string scaler = 10 [json_name = "scaler"];
  if (!this->_internal_scaler().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_scaler());
  }

  // string pod_status = 11 [json_name = "podStatus"];
  if (!this->_internal_pod_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pod_status());
  }

  // string pod_status_msg = 12 [json_name = "podStatusMsg"];
  if (!this->_internal_pod_status_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pod_status_msg());
  }

  // string response_message = 19 [json_name = "responseMessage"];
  if (!this->_internal_response_message().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response_message());
  }

  // string environment_name = 20 [json_name = "environmentName"];
  if (!this->_internal_environment_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_environment_name());
  }

  // string environment_internal_name = 21 [json_name = "environmentInternalName"];
  if (!this->_internal_environment_internal_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_environment_internal_name());
  }

  // string application_name = 22 [json_name = "applicationName"];
  if (!this->_internal_application_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_application_name());
  }

  // string integration_id = 25 [json_name = "integrationId"];
  if (!this->_internal_integration_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_integration_id());
  }

  // string pod_ingress_cert = 30 [json_name = "podIngressCert"];
  if (!this->_internal_pod_ingress_cert().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pod_ingress_cert());
  }

  // string host_url = 34 [json_name = "hostUrl"];
  if (!this->_internal_host_url().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_host_url());
  }

  // string app_label = 35 [json_name = "appLabel"];
  if (!this->_internal_app_label().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_app_label());
  }

  // string created_at = 36 [json_name = "createdAt"];
  if (!this->_internal_created_at().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_created_at());
  }

  // string updated_at = 37 [json_name = "updatedAt"];
  if (!this->_internal_updated_at().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updated_at());
  }

  // string tag_name = 42 [json_name = "tagName"];
  if (!this->_internal_tag_name().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tag_name());
  }

  // string user_id = 43 [json_name = "userId"];
  if (!this->_internal_user_id().empty()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_user_id());
  }

  // .pipelines.runtime.v1alpha1.Application application_data = 26 [json_name = "applicationData"];
  if (this->_internal_has_application_data()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *application_data_);
  }

  // .pipelines.tekton.v1alpha1.PipelineRun pipeline_run = 33 [json_name = "pipelineRun"];
  if (this->_internal_has_pipeline_run()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pipeline_run_);
  }

  // .pipelines.runtime.v1alpha1.Configuration configuration = 40 [json_name = "configuration"];
  if (this->_internal_has_configuration()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *configuration_);
  }

  // .pipelines.runtime.v1alpha1.Scaling scaling = 41 [json_name = "scaling"];
  if (this->_internal_has_scaling()) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scaling_);
  }

  // .pipelines.runtime.v1alpha1.TrafficType traffic_type = 18 [json_name = "trafficType"];
  if (this->_internal_traffic_type() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_traffic_type());
  }

  // uint32 storage_used = 23 [json_name = "storageUsed"];
  if (this->_internal_storage_used() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_storage_used());
  }

  // uint32 storage_limit = 24 [json_name = "storageLimit"];
  if (this->_internal_storage_limit() != 0) {
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_storage_limit());
  }

  // bool custom_pipeline = 27 [json_name = "customPipeline"];
  if (this->_internal_custom_pipeline() != 0) {
    total_size += 2 + 1;
  }

  // bool is_not_exist_dockerfile = 31 [json_name = "isNotExistDockerfile"];
  if (this->_internal_is_not_exist_dockerfile() != 0) {
    total_size += 2 + 1;
  }

  // bool is_enabled_application = 38 [json_name = "isEnabledApplication"];
  if (this->_internal_is_enabled_application() != 0) {
    total_size += 2 + 1;
  }

  // bool is_enabled = 39 [json_name = "isEnabled"];
  if (this->_internal_is_enabled() != 0) {
    total_size += 2 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Runtime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Runtime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Runtime::GetClassData() const { return &_class_data_; }

void Runtime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Runtime *>(to)->MergeFrom(
      static_cast<const Runtime &>(from));
}


void Runtime::MergeFrom(const Runtime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.runtime.v1alpha1.Runtime)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  instance_types_.MergeFrom(from.instance_types_);
  integration_.MergeFrom(from.integration_);
  environment_variables_.MergeFrom(from.environment_variables_);
  commands_.MergeFrom(from.commands_);
  secrets_.MergeFrom(from.secrets_);
  extra_args_.MergeFrom(from.extra_args_);
  before_deploy_tasks_.MergeFrom(from.before_deploy_tasks_);
  after_deploy_tasks_.MergeFrom(from.after_deploy_tasks_);
  params_.MergeFrom(from.params_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_organization_id().empty()) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (!from._internal_project_id().empty()) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (!from._internal_name_project().empty()) {
    _internal_set_name_project(from._internal_name_project());
  }
  if (!from._internal_application_id().empty()) {
    _internal_set_application_id(from._internal_application_id());
  }
  if (!from._internal_workspace_id().empty()) {
    _internal_set_workspace_id(from._internal_workspace_id());
  }
  if (!from._internal_environment_id().empty()) {
    _internal_set_environment_id(from._internal_environment_id());
  }
  if (!from._internal_scaler().empty()) {
    _internal_set_scaler(from._internal_scaler());
  }
  if (!from._internal_pod_status().empty()) {
    _internal_set_pod_status(from._internal_pod_status());
  }
  if (!from._internal_pod_status_msg().empty()) {
    _internal_set_pod_status_msg(from._internal_pod_status_msg());
  }
  if (!from._internal_response_message().empty()) {
    _internal_set_response_message(from._internal_response_message());
  }
  if (!from._internal_environment_name().empty()) {
    _internal_set_environment_name(from._internal_environment_name());
  }
  if (!from._internal_environment_internal_name().empty()) {
    _internal_set_environment_internal_name(from._internal_environment_internal_name());
  }
  if (!from._internal_application_name().empty()) {
    _internal_set_application_name(from._internal_application_name());
  }
  if (!from._internal_integration_id().empty()) {
    _internal_set_integration_id(from._internal_integration_id());
  }
  if (!from._internal_pod_ingress_cert().empty()) {
    _internal_set_pod_ingress_cert(from._internal_pod_ingress_cert());
  }
  if (!from._internal_host_url().empty()) {
    _internal_set_host_url(from._internal_host_url());
  }
  if (!from._internal_app_label().empty()) {
    _internal_set_app_label(from._internal_app_label());
  }
  if (!from._internal_created_at().empty()) {
    _internal_set_created_at(from._internal_created_at());
  }
  if (!from._internal_updated_at().empty()) {
    _internal_set_updated_at(from._internal_updated_at());
  }
  if (!from._internal_tag_name().empty()) {
    _internal_set_tag_name(from._internal_tag_name());
  }
  if (!from._internal_user_id().empty()) {
    _internal_set_user_id(from._internal_user_id());
  }
  if (from._internal_has_application_data()) {
    _internal_mutable_application_data()->::pipelines::runtime::v1alpha1::Application::MergeFrom(from._internal_application_data());
  }
  if (from._internal_has_pipeline_run()) {
    _internal_mutable_pipeline_run()->::pipelines::tekton::v1alpha1::PipelineRun::MergeFrom(from._internal_pipeline_run());
  }
  if (from._internal_has_configuration()) {
    _internal_mutable_configuration()->::pipelines::runtime::v1alpha1::Configuration::MergeFrom(from._internal_configuration());
  }
  if (from._internal_has_scaling()) {
    _internal_mutable_scaling()->::pipelines::runtime::v1alpha1::Scaling::MergeFrom(from._internal_scaling());
  }
  if (from._internal_traffic_type() != 0) {
    _internal_set_traffic_type(from._internal_traffic_type());
  }
  if (from._internal_storage_used() != 0) {
    _internal_set_storage_used(from._internal_storage_used());
  }
  if (from._internal_storage_limit() != 0) {
    _internal_set_storage_limit(from._internal_storage_limit());
  }
  if (from._internal_custom_pipeline() != 0) {
    _internal_set_custom_pipeline(from._internal_custom_pipeline());
  }
  if (from._internal_is_not_exist_dockerfile() != 0) {
    _internal_set_is_not_exist_dockerfile(from._internal_is_not_exist_dockerfile());
  }
  if (from._internal_is_enabled_application() != 0) {
    _internal_set_is_enabled_application(from._internal_is_enabled_application());
  }
  if (from._internal_is_enabled() != 0) {
    _internal_set_is_enabled(from._internal_is_enabled());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Runtime::CopyFrom(const Runtime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.runtime.v1alpha1.Runtime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Runtime::IsInitialized() const {
  return true;
}

void Runtime::InternalSwap(Runtime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  instance_types_.InternalSwap(&other->instance_types_);
  integration_.InternalSwap(&other->integration_);
  environment_variables_.InternalSwap(&other->environment_variables_);
  commands_.InternalSwap(&other->commands_);
  secrets_.InternalSwap(&other->secrets_);
  extra_args_.InternalSwap(&other->extra_args_);
  before_deploy_tasks_.InternalSwap(&other->before_deploy_tasks_);
  after_deploy_tasks_.InternalSwap(&other->after_deploy_tasks_);
  params_.InternalSwap(&other->params_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_id_, GetArenaForAllocation(),
      &other->organization_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_id_, GetArenaForAllocation(),
      &other->project_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_project_, GetArenaForAllocation(),
      &other->name_project_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &application_id_, GetArenaForAllocation(),
      &other->application_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &workspace_id_, GetArenaForAllocation(),
      &other->workspace_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &environment_id_, GetArenaForAllocation(),
      &other->environment_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &scaler_, GetArenaForAllocation(),
      &other->scaler_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pod_status_, GetArenaForAllocation(),
      &other->pod_status_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pod_status_msg_, GetArenaForAllocation(),
      &other->pod_status_msg_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &response_message_, GetArenaForAllocation(),
      &other->response_message_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &environment_name_, GetArenaForAllocation(),
      &other->environment_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &environment_internal_name_, GetArenaForAllocation(),
      &other->environment_internal_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &application_name_, GetArenaForAllocation(),
      &other->application_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &integration_id_, GetArenaForAllocation(),
      &other->integration_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pod_ingress_cert_, GetArenaForAllocation(),
      &other->pod_ingress_cert_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &host_url_, GetArenaForAllocation(),
      &other->host_url_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &app_label_, GetArenaForAllocation(),
      &other->app_label_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &created_at_, GetArenaForAllocation(),
      &other->created_at_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &updated_at_, GetArenaForAllocation(),
      &other->updated_at_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &tag_name_, GetArenaForAllocation(),
      &other->tag_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &user_id_, GetArenaForAllocation(),
      &other->user_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Runtime, is_enabled_)
      + sizeof(Runtime::is_enabled_)
      - PROTOBUF_FIELD_OFFSET(Runtime, application_data_)>(
          reinterpret_cast<char*>(&application_data_),
          reinterpret_cast<char*>(&other->application_data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Runtime::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[14]);
}

// ===================================================================

class UpdateRuntime::_Internal {
 public:
  static const ::pipelines::runtime::v1alpha1::ConfigurationUpdate& configuration(const UpdateRuntime* msg);
  static const ::pipelines::runtime::v1alpha1::Scaling& scaling(const UpdateRuntime* msg);
};

const ::pipelines::runtime::v1alpha1::ConfigurationUpdate&
UpdateRuntime::_Internal::configuration(const UpdateRuntime* msg) {
  return *msg->configuration_;
}
const ::pipelines::runtime::v1alpha1::Scaling&
UpdateRuntime::_Internal::scaling(const UpdateRuntime* msg) {
  return *msg->scaling_;
}
UpdateRuntime::UpdateRuntime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.runtime.v1alpha1.UpdateRuntime)
}
UpdateRuntime::UpdateRuntime(const UpdateRuntime& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_application_id().empty()) {
    application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_application_id(), 
      GetArenaForAllocation());
  }
  branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_branch().empty()) {
    branch_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_branch(), 
      GetArenaForAllocation());
  }
  organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_organization_id().empty()) {
    organization_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_organization_id(), 
      GetArenaForAllocation());
  }
  project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_project_id().empty()) {
    project_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_project_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_configuration()) {
    configuration_ = new ::pipelines::runtime::v1alpha1::ConfigurationUpdate(*from.configuration_);
  } else {
    configuration_ = nullptr;
  }
  if (from._internal_has_scaling()) {
    scaling_ = new ::pipelines::runtime::v1alpha1::Scaling(*from.scaling_);
  } else {
    scaling_ = nullptr;
  }
  traffic_type_ = from.traffic_type_;
  // @@protoc_insertion_point(copy_constructor:pipelines.runtime.v1alpha1.UpdateRuntime)
}

inline void UpdateRuntime::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
application_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
branch_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
organization_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
project_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&configuration_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&traffic_type_) -
    reinterpret_cast<char*>(&configuration_)) + sizeof(traffic_type_));
}

UpdateRuntime::~UpdateRuntime() {
  // @@protoc_insertion_point(destructor:pipelines.runtime.v1alpha1.UpdateRuntime)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void UpdateRuntime::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  application_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  branch_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  organization_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  project_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete configuration_;
  if (this != internal_default_instance()) delete scaling_;
}

void UpdateRuntime::ArenaDtor(void* object) {
  UpdateRuntime* _this = reinterpret_cast< UpdateRuntime* >(object);
  (void)_this;
}
void UpdateRuntime::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpdateRuntime::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void UpdateRuntime::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.runtime.v1alpha1.UpdateRuntime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  id_.ClearToEmpty();
  application_id_.ClearToEmpty();
  branch_.ClearToEmpty();
  organization_id_.ClearToEmpty();
  project_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && configuration_ != nullptr) {
    delete configuration_;
  }
  configuration_ = nullptr;
  if (GetArenaForAllocation() == nullptr && scaling_ != nullptr) {
    delete scaling_;
  }
  scaling_ = nullptr;
  traffic_type_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpdateRuntime::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.UpdateRuntime.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string application_id = 2 [json_name = "applicationId"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_application_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.UpdateRuntime.application_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pipelines.runtime.v1alpha1.TrafficType traffic_type = 3 [json_name = "trafficType"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_traffic_type(static_cast<::pipelines::runtime::v1alpha1::TrafficType>(val));
        } else goto handle_unusual;
        continue;
      // .pipelines.runtime.v1alpha1.ConfigurationUpdate configuration = 4 [json_name = "configuration"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_configuration(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .pipelines.runtime.v1alpha1.Scaling scaling = 5 [json_name = "scaling"];
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_scaling(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string branch = 6 [json_name = "branch"];
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_branch();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.UpdateRuntime.branch"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string organization_id = 7 [json_name = "organizationId"];
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_organization_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.UpdateRuntime.organization_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string project_id = 8 [json_name = "projectId"];
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_project_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.UpdateRuntime.project_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpdateRuntime::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.runtime.v1alpha1.UpdateRuntime)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.UpdateRuntime.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string application_id = 2 [json_name = "applicationId"];
  if (!this->_internal_application_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_application_id().data(), static_cast<int>(this->_internal_application_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.UpdateRuntime.application_id");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_application_id(), target);
  }

  // .pipelines.runtime.v1alpha1.TrafficType traffic_type = 3 [json_name = "trafficType"];
  if (this->_internal_traffic_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_traffic_type(), target);
  }

  // .pipelines.runtime.v1alpha1.ConfigurationUpdate configuration = 4 [json_name = "configuration"];
  if (this->_internal_has_configuration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::configuration(this), target, stream);
  }

  // .pipelines.runtime.v1alpha1.Scaling scaling = 5 [json_name = "scaling"];
  if (this->_internal_has_scaling()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::scaling(this), target, stream);
  }

  // string branch = 6 [json_name = "branch"];
  if (!this->_internal_branch().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_branch().data(), static_cast<int>(this->_internal_branch().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.UpdateRuntime.branch");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_branch(), target);
  }

  // string organization_id = 7 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_organization_id().data(), static_cast<int>(this->_internal_organization_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.UpdateRuntime.organization_id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_organization_id(), target);
  }

  // string project_id = 8 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_project_id().data(), static_cast<int>(this->_internal_project_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.UpdateRuntime.project_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_project_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.runtime.v1alpha1.UpdateRuntime)
  return target;
}

size_t UpdateRuntime::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.runtime.v1alpha1.UpdateRuntime)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string application_id = 2 [json_name = "applicationId"];
  if (!this->_internal_application_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_application_id());
  }

  // string branch = 6 [json_name = "branch"];
  if (!this->_internal_branch().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_branch());
  }

  // string organization_id = 7 [json_name = "organizationId"];
  if (!this->_internal_organization_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_organization_id());
  }

  // string project_id = 8 [json_name = "projectId"];
  if (!this->_internal_project_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_project_id());
  }

  // .pipelines.runtime.v1alpha1.ConfigurationUpdate configuration = 4 [json_name = "configuration"];
  if (this->_internal_has_configuration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *configuration_);
  }

  // .pipelines.runtime.v1alpha1.Scaling scaling = 5 [json_name = "scaling"];
  if (this->_internal_has_scaling()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *scaling_);
  }

  // .pipelines.runtime.v1alpha1.TrafficType traffic_type = 3 [json_name = "trafficType"];
  if (this->_internal_traffic_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_traffic_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData UpdateRuntime::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    UpdateRuntime::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*UpdateRuntime::GetClassData() const { return &_class_data_; }

void UpdateRuntime::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<UpdateRuntime *>(to)->MergeFrom(
      static_cast<const UpdateRuntime &>(from));
}


void UpdateRuntime::MergeFrom(const UpdateRuntime& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.runtime.v1alpha1.UpdateRuntime)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_application_id().empty()) {
    _internal_set_application_id(from._internal_application_id());
  }
  if (!from._internal_branch().empty()) {
    _internal_set_branch(from._internal_branch());
  }
  if (!from._internal_organization_id().empty()) {
    _internal_set_organization_id(from._internal_organization_id());
  }
  if (!from._internal_project_id().empty()) {
    _internal_set_project_id(from._internal_project_id());
  }
  if (from._internal_has_configuration()) {
    _internal_mutable_configuration()->::pipelines::runtime::v1alpha1::ConfigurationUpdate::MergeFrom(from._internal_configuration());
  }
  if (from._internal_has_scaling()) {
    _internal_mutable_scaling()->::pipelines::runtime::v1alpha1::Scaling::MergeFrom(from._internal_scaling());
  }
  if (from._internal_traffic_type() != 0) {
    _internal_set_traffic_type(from._internal_traffic_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void UpdateRuntime::CopyFrom(const UpdateRuntime& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.runtime.v1alpha1.UpdateRuntime)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateRuntime::IsInitialized() const {
  return true;
}

void UpdateRuntime::InternalSwap(UpdateRuntime* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &application_id_, GetArenaForAllocation(),
      &other->application_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &branch_, GetArenaForAllocation(),
      &other->branch_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &organization_id_, GetArenaForAllocation(),
      &other->organization_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &project_id_, GetArenaForAllocation(),
      &other->project_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpdateRuntime, traffic_type_)
      + sizeof(UpdateRuntime::traffic_type_)
      - PROTOBUF_FIELD_OFFSET(UpdateRuntime, configuration_)>(
          reinterpret_cast<char*>(&configuration_),
          reinterpret_cast<char*>(&other->configuration_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpdateRuntime::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[15]);
}

// ===================================================================

class RuntimeList::_Internal {
 public:
};

RuntimeList::RuntimeList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  items_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.runtime.v1alpha1.RuntimeList)
}
RuntimeList::RuntimeList(const RuntimeList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      items_(from.items_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pipelines.runtime.v1alpha1.RuntimeList)
}

inline void RuntimeList::SharedCtor() {
}

RuntimeList::~RuntimeList() {
  // @@protoc_insertion_point(destructor:pipelines.runtime.v1alpha1.RuntimeList)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void RuntimeList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RuntimeList::ArenaDtor(void* object) {
  RuntimeList* _this = reinterpret_cast< RuntimeList* >(object);
  (void)_this;
}
void RuntimeList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RuntimeList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RuntimeList::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.runtime.v1alpha1.RuntimeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  items_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RuntimeList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pipelines.runtime.v1alpha1.Runtime items = 1 [json_name = "items"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_items(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RuntimeList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.runtime.v1alpha1.RuntimeList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pipelines.runtime.v1alpha1.Runtime items = 1 [json_name = "items"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_items_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_items(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.runtime.v1alpha1.RuntimeList)
  return target;
}

size_t RuntimeList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.runtime.v1alpha1.RuntimeList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pipelines.runtime.v1alpha1.Runtime items = 1 [json_name = "items"];
  total_size += 1UL * this->_internal_items_size();
  for (const auto& msg : this->items_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData RuntimeList::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    RuntimeList::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*RuntimeList::GetClassData() const { return &_class_data_; }

void RuntimeList::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<RuntimeList *>(to)->MergeFrom(
      static_cast<const RuntimeList &>(from));
}


void RuntimeList::MergeFrom(const RuntimeList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.runtime.v1alpha1.RuntimeList)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  items_.MergeFrom(from.items_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void RuntimeList::CopyFrom(const RuntimeList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.runtime.v1alpha1.RuntimeList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RuntimeList::IsInitialized() const {
  return true;
}

void RuntimeList::InternalSwap(RuntimeList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  items_.InternalSwap(&other->items_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RuntimeList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[16]);
}

// ===================================================================

class IntanceType::_Internal {
 public:
};

IntanceType::IntanceType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  resources_rules_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.runtime.v1alpha1.IntanceType)
}
IntanceType::IntanceType(const IntanceType& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      resources_rules_(from.resources_rules_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_id().empty()) {
    id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_id(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.runtime.v1alpha1.IntanceType)
}

inline void IntanceType::SharedCtor() {
id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IntanceType::~IntanceType() {
  // @@protoc_insertion_point(destructor:pipelines.runtime.v1alpha1.IntanceType)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IntanceType::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IntanceType::ArenaDtor(void* object) {
  IntanceType* _this = reinterpret_cast< IntanceType* >(object);
  (void)_this;
}
void IntanceType::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IntanceType::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IntanceType::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.runtime.v1alpha1.IntanceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  resources_rules_.Clear();
  id_.ClearToEmpty();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IntanceType::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string id = 1 [json_name = "id"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.IntanceType.id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string name = 2 [json_name = "name"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.IntanceType.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .pipelines.runtime.v1alpha1.ResourcesRules resources_rules = 3 [json_name = "resourcesRules"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_resources_rules(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IntanceType::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.runtime.v1alpha1.IntanceType)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.IntanceType.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.IntanceType.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // repeated .pipelines.runtime.v1alpha1.ResourcesRules resources_rules = 3 [json_name = "resourcesRules"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_resources_rules_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_resources_rules(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.runtime.v1alpha1.IntanceType)
  return target;
}

size_t IntanceType::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.runtime.v1alpha1.IntanceType)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pipelines.runtime.v1alpha1.ResourcesRules resources_rules = 3 [json_name = "resourcesRules"];
  total_size += 1UL * this->_internal_resources_rules_size();
  for (const auto& msg : this->resources_rules_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string id = 1 [json_name = "id"];
  if (!this->_internal_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  // string name = 2 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IntanceType::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IntanceType::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IntanceType::GetClassData() const { return &_class_data_; }

void IntanceType::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<IntanceType *>(to)->MergeFrom(
      static_cast<const IntanceType &>(from));
}


void IntanceType::MergeFrom(const IntanceType& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.runtime.v1alpha1.IntanceType)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  resources_rules_.MergeFrom(from.resources_rules_);
  if (!from._internal_id().empty()) {
    _internal_set_id(from._internal_id());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IntanceType::CopyFrom(const IntanceType& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.runtime.v1alpha1.IntanceType)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntanceType::IsInitialized() const {
  return true;
}

void IntanceType::InternalSwap(IntanceType* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  resources_rules_.InternalSwap(&other->resources_rules_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &id_, GetArenaForAllocation(),
      &other->id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata IntanceType::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[17]);
}

// ===================================================================

class ResourcesRules::_Internal {
 public:
};

ResourcesRules::ResourcesRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  limit_(arena),
  request_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.runtime.v1alpha1.ResourcesRules)
}
ResourcesRules::ResourcesRules(const ResourcesRules& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      limit_(from.limit_),
      request_(from.request_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:pipelines.runtime.v1alpha1.ResourcesRules)
}

inline void ResourcesRules::SharedCtor() {
}

ResourcesRules::~ResourcesRules() {
  // @@protoc_insertion_point(destructor:pipelines.runtime.v1alpha1.ResourcesRules)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ResourcesRules::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ResourcesRules::ArenaDtor(void* object) {
  ResourcesRules* _this = reinterpret_cast< ResourcesRules* >(object);
  (void)_this;
}
void ResourcesRules::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ResourcesRules::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ResourcesRules::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.runtime.v1alpha1.ResourcesRules)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  limit_.Clear();
  request_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ResourcesRules::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .pipelines.runtime.v1alpha1.Limit limit = 1 [json_name = "limit"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_limit(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .pipelines.runtime.v1alpha1.Request request = 2 [json_name = "request"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_request(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ResourcesRules::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.runtime.v1alpha1.ResourcesRules)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .pipelines.runtime.v1alpha1.Limit limit = 1 [json_name = "limit"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_limit_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_limit(i), target, stream);
  }

  // repeated .pipelines.runtime.v1alpha1.Request request = 2 [json_name = "request"];
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_request_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_request(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.runtime.v1alpha1.ResourcesRules)
  return target;
}

size_t ResourcesRules::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.runtime.v1alpha1.ResourcesRules)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .pipelines.runtime.v1alpha1.Limit limit = 1 [json_name = "limit"];
  total_size += 1UL * this->_internal_limit_size();
  for (const auto& msg : this->limit_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .pipelines.runtime.v1alpha1.Request request = 2 [json_name = "request"];
  total_size += 1UL * this->_internal_request_size();
  for (const auto& msg : this->request_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ResourcesRules::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ResourcesRules::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ResourcesRules::GetClassData() const { return &_class_data_; }

void ResourcesRules::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<ResourcesRules *>(to)->MergeFrom(
      static_cast<const ResourcesRules &>(from));
}


void ResourcesRules::MergeFrom(const ResourcesRules& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.runtime.v1alpha1.ResourcesRules)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  limit_.MergeFrom(from.limit_);
  request_.MergeFrom(from.request_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ResourcesRules::CopyFrom(const ResourcesRules& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.runtime.v1alpha1.ResourcesRules)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResourcesRules::IsInitialized() const {
  return true;
}

void ResourcesRules::InternalSwap(ResourcesRules* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  limit_.InternalSwap(&other->limit_);
  request_.InternalSwap(&other->request_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ResourcesRules::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[18]);
}

// ===================================================================

class Limit::_Internal {
 public:
};

Limit::Limit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.runtime.v1alpha1.Limit)
}
Limit::Limit(const Limit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cpu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cpu().empty()) {
    cpu_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cpu(), 
      GetArenaForAllocation());
  }
  ram_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ram().empty()) {
    ram_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ram(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.runtime.v1alpha1.Limit)
}

inline void Limit::SharedCtor() {
cpu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ram_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Limit::~Limit() {
  // @@protoc_insertion_point(destructor:pipelines.runtime.v1alpha1.Limit)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Limit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cpu_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ram_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Limit::ArenaDtor(void* object) {
  Limit* _this = reinterpret_cast< Limit* >(object);
  (void)_this;
}
void Limit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Limit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Limit::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.runtime.v1alpha1.Limit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cpu_.ClearToEmpty();
  ram_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Limit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cpu = 1 [json_name = "cpu"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cpu();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Limit.cpu"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ram = 2 [json_name = "ram"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ram();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Limit.ram"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Limit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.runtime.v1alpha1.Limit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cpu = 1 [json_name = "cpu"];
  if (!this->_internal_cpu().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpu().data(), static_cast<int>(this->_internal_cpu().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Limit.cpu");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cpu(), target);
  }

  // string ram = 2 [json_name = "ram"];
  if (!this->_internal_ram().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ram().data(), static_cast<int>(this->_internal_ram().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Limit.ram");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ram(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.runtime.v1alpha1.Limit)
  return target;
}

size_t Limit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.runtime.v1alpha1.Limit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cpu = 1 [json_name = "cpu"];
  if (!this->_internal_cpu().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpu());
  }

  // string ram = 2 [json_name = "ram"];
  if (!this->_internal_ram().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ram());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Limit::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Limit::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Limit::GetClassData() const { return &_class_data_; }

void Limit::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Limit *>(to)->MergeFrom(
      static_cast<const Limit &>(from));
}


void Limit::MergeFrom(const Limit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.runtime.v1alpha1.Limit)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cpu().empty()) {
    _internal_set_cpu(from._internal_cpu());
  }
  if (!from._internal_ram().empty()) {
    _internal_set_ram(from._internal_ram());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Limit::CopyFrom(const Limit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.runtime.v1alpha1.Limit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Limit::IsInitialized() const {
  return true;
}

void Limit::InternalSwap(Limit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cpu_, GetArenaForAllocation(),
      &other->cpu_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ram_, GetArenaForAllocation(),
      &other->ram_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Limit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[19]);
}

// ===================================================================

class Request::_Internal {
 public:
};

Request::Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.runtime.v1alpha1.Request)
}
Request::Request(const Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  cpu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_cpu().empty()) {
    cpu_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_cpu(), 
      GetArenaForAllocation());
  }
  ram_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ram().empty()) {
    ram_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ram(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.runtime.v1alpha1.Request)
}

inline void Request::SharedCtor() {
cpu_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ram_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

Request::~Request() {
  // @@protoc_insertion_point(destructor:pipelines.runtime.v1alpha1.Request)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Request::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  cpu_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ram_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Request::ArenaDtor(void* object) {
  Request* _this = reinterpret_cast< Request* >(object);
  (void)_this;
}
void Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Request::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.runtime.v1alpha1.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cpu_.ClearToEmpty();
  ram_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string cpu = 1 [json_name = "cpu"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_cpu();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Request.cpu"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string ram = 2 [json_name = "ram"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ram();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.Request.ram"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.runtime.v1alpha1.Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string cpu = 1 [json_name = "cpu"];
  if (!this->_internal_cpu().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_cpu().data(), static_cast<int>(this->_internal_cpu().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Request.cpu");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_cpu(), target);
  }

  // string ram = 2 [json_name = "ram"];
  if (!this->_internal_ram().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_ram().data(), static_cast<int>(this->_internal_ram().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.Request.ram");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ram(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.runtime.v1alpha1.Request)
  return target;
}

size_t Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.runtime.v1alpha1.Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string cpu = 1 [json_name = "cpu"];
  if (!this->_internal_cpu().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_cpu());
  }

  // string ram = 2 [json_name = "ram"];
  if (!this->_internal_ram().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ram());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Request::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Request::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Request::GetClassData() const { return &_class_data_; }

void Request::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Request *>(to)->MergeFrom(
      static_cast<const Request &>(from));
}


void Request::MergeFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.runtime.v1alpha1.Request)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_cpu().empty()) {
    _internal_set_cpu(from._internal_cpu());
  }
  if (!from._internal_ram().empty()) {
    _internal_set_ram(from._internal_ram());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Request::CopyFrom(const Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.runtime.v1alpha1.Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Request::IsInitialized() const {
  return true;
}

void Request::InternalSwap(Request* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &cpu_, GetArenaForAllocation(),
      &other->cpu_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ram_, GetArenaForAllocation(),
      &other->ram_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Request::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[20]);
}

// ===================================================================

class PipelineRun::_Internal {
 public:
};

PipelineRun::PipelineRun(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:pipelines.runtime.v1alpha1.PipelineRun)
}
PipelineRun::PipelineRun(const PipelineRun& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_label().empty()) {
    label_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_label(), 
      GetArenaForAllocation());
  }
  namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_namespace_().empty()) {
    namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_namespace_(), 
      GetArenaForAllocation());
  }
  pipeline_run_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pipeline_run_status().empty()) {
    pipeline_run_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_pipeline_run_status(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:pipelines.runtime.v1alpha1.PipelineRun)
}

inline void PipelineRun::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
label_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
namespace__.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
pipeline_run_status_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PipelineRun::~PipelineRun() {
  // @@protoc_insertion_point(destructor:pipelines.runtime.v1alpha1.PipelineRun)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PipelineRun::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  label_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pipeline_run_status_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PipelineRun::ArenaDtor(void* object) {
  PipelineRun* _this = reinterpret_cast< PipelineRun* >(object);
  (void)_this;
}
void PipelineRun::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PipelineRun::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PipelineRun::Clear() {
// @@protoc_insertion_point(message_clear_start:pipelines.runtime.v1alpha1.PipelineRun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  label_.ClearToEmpty();
  namespace__.ClearToEmpty();
  pipeline_run_status_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PipelineRun::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [json_name = "name"];
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.PipelineRun.name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string label = 2 [json_name = "label"];
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_label();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.PipelineRun.label"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string namespace = 3 [json_name = "namespace"];
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_namespace_();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.PipelineRun.namespace"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string pipeline_run_status = 4 [json_name = "pipelineRunStatus"];
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_pipeline_run_status();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "pipelines.runtime.v1alpha1.PipelineRun.pipeline_run_status"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PipelineRun::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pipelines.runtime.v1alpha1.PipelineRun)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.PipelineRun.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string label = 2 [json_name = "label"];
  if (!this->_internal_label().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_label().data(), static_cast<int>(this->_internal_label().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.PipelineRun.label");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_label(), target);
  }

  // string namespace = 3 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_namespace_().data(), static_cast<int>(this->_internal_namespace_().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.PipelineRun.namespace");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_namespace_(), target);
  }

  // string pipeline_run_status = 4 [json_name = "pipelineRunStatus"];
  if (!this->_internal_pipeline_run_status().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_pipeline_run_status().data(), static_cast<int>(this->_internal_pipeline_run_status().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pipelines.runtime.v1alpha1.PipelineRun.pipeline_run_status");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_pipeline_run_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pipelines.runtime.v1alpha1.PipelineRun)
  return target;
}

size_t PipelineRun::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pipelines.runtime.v1alpha1.PipelineRun)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 1 [json_name = "name"];
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string label = 2 [json_name = "label"];
  if (!this->_internal_label().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_label());
  }

  // string namespace = 3 [json_name = "namespace"];
  if (!this->_internal_namespace_().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_namespace_());
  }

  // string pipeline_run_status = 4 [json_name = "pipelineRunStatus"];
  if (!this->_internal_pipeline_run_status().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_pipeline_run_status());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PipelineRun::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PipelineRun::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PipelineRun::GetClassData() const { return &_class_data_; }

void PipelineRun::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<PipelineRun *>(to)->MergeFrom(
      static_cast<const PipelineRun &>(from));
}


void PipelineRun::MergeFrom(const PipelineRun& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pipelines.runtime.v1alpha1.PipelineRun)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_label().empty()) {
    _internal_set_label(from._internal_label());
  }
  if (!from._internal_namespace_().empty()) {
    _internal_set_namespace_(from._internal_namespace_());
  }
  if (!from._internal_pipeline_run_status().empty()) {
    _internal_set_pipeline_run_status(from._internal_pipeline_run_status());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PipelineRun::CopyFrom(const PipelineRun& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pipelines.runtime.v1alpha1.PipelineRun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PipelineRun::IsInitialized() const {
  return true;
}

void PipelineRun::InternalSwap(PipelineRun* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &label_, GetArenaForAllocation(),
      &other->label_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &namespace__, GetArenaForAllocation(),
      &other->namespace__, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &pipeline_run_status_, GetArenaForAllocation(),
      &other->pipeline_run_status_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PipelineRun::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_getter, &descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto_once,
      file_level_metadata_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto[21]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1alpha1
}  // namespace runtime
}  // namespace pipelines
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::Branch* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::Branch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::Branch >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::Repository* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::Repository >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::Repository >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::Command* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::Command >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::Command >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::Env* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::Env >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::Env >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::Configuration* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::Configuration >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::Configuration >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::ConfigurationUpdate* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::ConfigurationUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::ConfigurationUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::Scaling* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::Scaling >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::Scaling >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::ContainerRegistry* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::ContainerRegistry >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::ContainerRegistry >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::Application* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::Application >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::Application >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::Runtime_IntegrationEntry_DoNotUse* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::Runtime_IntegrationEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::Runtime_IntegrationEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::Runtime_EnvironmentVariablesEntry_DoNotUse* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::Runtime_EnvironmentVariablesEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::Runtime_EnvironmentVariablesEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::Runtime_CommandsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::Runtime_CommandsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::Runtime_CommandsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::Runtime_SecretsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::Runtime_SecretsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::Runtime_SecretsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::Runtime_ExtraArgsEntry_DoNotUse* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::Runtime_ExtraArgsEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::Runtime_ExtraArgsEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::Runtime* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::Runtime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::Runtime >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::UpdateRuntime* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::UpdateRuntime >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::UpdateRuntime >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::RuntimeList* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::RuntimeList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::RuntimeList >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::IntanceType* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::IntanceType >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::IntanceType >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::ResourcesRules* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::ResourcesRules >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::ResourcesRules >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::Limit* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::Limit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::Limit >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::Request* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::Request >(arena);
}
template<> PROTOBUF_NOINLINE ::pipelines::runtime::v1alpha1::PipelineRun* Arena::CreateMaybeMessage< ::pipelines::runtime::v1alpha1::PipelineRun >(Arena* arena) {
  return Arena::CreateMessageInternal< ::pipelines::runtime::v1alpha1::PipelineRun >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
