// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipelines/runtime/v1alpha1/runtime.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto;
namespace pipelines {
namespace runtime {
namespace v1alpha1 {
class Runtime;
struct RuntimeDefaultTypeInternal;
extern RuntimeDefaultTypeInternal _Runtime_default_instance_;
class Runtime_CommandsEntry_DoNotUse;
struct Runtime_CommandsEntry_DoNotUseDefaultTypeInternal;
extern Runtime_CommandsEntry_DoNotUseDefaultTypeInternal _Runtime_CommandsEntry_DoNotUse_default_instance_;
class Runtime_EnvVariablesEntry_DoNotUse;
struct Runtime_EnvVariablesEntry_DoNotUseDefaultTypeInternal;
extern Runtime_EnvVariablesEntry_DoNotUseDefaultTypeInternal _Runtime_EnvVariablesEntry_DoNotUse_default_instance_;
class Runtime_IntegrationEntry_DoNotUse;
struct Runtime_IntegrationEntry_DoNotUseDefaultTypeInternal;
extern Runtime_IntegrationEntry_DoNotUseDefaultTypeInternal _Runtime_IntegrationEntry_DoNotUse_default_instance_;
}  // namespace v1alpha1
}  // namespace runtime
}  // namespace pipelines
PROTOBUF_NAMESPACE_OPEN
template<> ::pipelines::runtime::v1alpha1::Runtime* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime>(Arena*);
template<> ::pipelines::runtime::v1alpha1::Runtime_CommandsEntry_DoNotUse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime_CommandsEntry_DoNotUse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::Runtime_EnvVariablesEntry_DoNotUse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime_EnvVariablesEntry_DoNotUse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::Runtime_IntegrationEntry_DoNotUse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime_IntegrationEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pipelines {
namespace runtime {
namespace v1alpha1 {

// ===================================================================

class Runtime_IntegrationEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Runtime_IntegrationEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Runtime_IntegrationEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Runtime_IntegrationEntry_DoNotUse();
  explicit constexpr Runtime_IntegrationEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Runtime_IntegrationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Runtime_IntegrationEntry_DoNotUse& other);
  static const Runtime_IntegrationEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Runtime_IntegrationEntry_DoNotUse*>(&_Runtime_IntegrationEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.runtime.v1alpha1.Runtime.IntegrationEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.runtime.v1alpha1.Runtime.IntegrationEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Runtime_EnvVariablesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Runtime_EnvVariablesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Runtime_EnvVariablesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Runtime_EnvVariablesEntry_DoNotUse();
  explicit constexpr Runtime_EnvVariablesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Runtime_EnvVariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Runtime_EnvVariablesEntry_DoNotUse& other);
  static const Runtime_EnvVariablesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Runtime_EnvVariablesEntry_DoNotUse*>(&_Runtime_EnvVariablesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.runtime.v1alpha1.Runtime.EnvVariablesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.runtime.v1alpha1.Runtime.EnvVariablesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Runtime_CommandsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Runtime_CommandsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Runtime_CommandsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Runtime_CommandsEntry_DoNotUse();
  explicit constexpr Runtime_CommandsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Runtime_CommandsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Runtime_CommandsEntry_DoNotUse& other);
  static const Runtime_CommandsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Runtime_CommandsEntry_DoNotUse*>(&_Runtime_CommandsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.runtime.v1alpha1.Runtime.CommandsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.runtime.v1alpha1.Runtime.CommandsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Runtime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.Runtime) */ {
 public:
  inline Runtime() : Runtime(nullptr) {}
  ~Runtime() override;
  explicit constexpr Runtime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Runtime(const Runtime& from);
  Runtime(Runtime&& from) noexcept
    : Runtime() {
    *this = ::std::move(from);
  }

  inline Runtime& operator=(const Runtime& from) {
    CopyFrom(from);
    return *this;
  }
  inline Runtime& operator=(Runtime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Runtime& default_instance() {
    return *internal_default_instance();
  }
  static inline const Runtime* internal_default_instance() {
    return reinterpret_cast<const Runtime*>(
               &_Runtime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Runtime& a, Runtime& b) {
    a.Swap(&b);
  }
  inline void Swap(Runtime* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Runtime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Runtime* New() const final {
    return new Runtime();
  }

  Runtime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Runtime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Runtime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Runtime& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Runtime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.Runtime";
  }
  protected:
  explicit Runtime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kIntegrationFieldNumber = 7,
    kEnvVariablesFieldNumber = 8,
    kCommandsFieldNumber = 9,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kNamespaceFieldNumber = 3,
    kApplicationIdFieldNumber = 5,
    kWorkspaceIdFieldNumber = 6,
    kProjectIdFieldNumber = 4,
  };
  // map<string, string> integration = 7 [json_name = "integration"];
  int integration_size() const;
  private:
  int _internal_integration_size() const;
  public:
  void clear_integration();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_integration() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_integration();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      integration() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_integration();

  // map<string, string> env_variables = 8 [json_name = "envVariables"];
  int env_variables_size() const;
  private:
  int _internal_env_variables_size() const;
  public:
  void clear_env_variables();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_env_variables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_env_variables();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      env_variables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_env_variables();

  // map<string, string> commands = 9 [json_name = "commands"];
  int commands_size() const;
  private:
  int _internal_commands_size() const;
  public:
  void clear_commands();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_commands() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_commands();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      commands() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_commands();

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string namespace = 3 [json_name = "namespace"];
  void clear_namespace_();
  const std::string& namespace_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_namespace_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_namespace_();
  PROTOBUF_MUST_USE_RESULT std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string application_id = 5 [json_name = "applicationId"];
  void clear_application_id();
  const std::string& application_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_application_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_application_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_application_id();
  void set_allocated_application_id(std::string* application_id);
  private:
  const std::string& _internal_application_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_id(const std::string& value);
  std::string* _internal_mutable_application_id();
  public:

  // string workspace_id = 6 [json_name = "workspaceId"];
  void clear_workspace_id();
  const std::string& workspace_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workspace_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workspace_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_workspace_id();
  void set_allocated_workspace_id(std::string* workspace_id);
  private:
  const std::string& _internal_workspace_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workspace_id(const std::string& value);
  std::string* _internal_mutable_workspace_id();
  public:

  // uint32 project_id = 4 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.Runtime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Runtime_IntegrationEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> integration_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Runtime_EnvVariablesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> env_variables_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Runtime_CommandsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> commands_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workspace_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Runtime

// string id = 1 [json_name = "id"];
inline void Runtime::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Runtime::id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.id)
}
inline std::string* Runtime::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.id)
  return _s;
}
inline const std::string& Runtime::_internal_id() const {
  return id_.Get();
}
inline void Runtime::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.id)
}

// string name = 2 [json_name = "name"];
inline void Runtime::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Runtime::name() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.name)
}
inline std::string* Runtime::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.name)
  return _s;
}
inline const std::string& Runtime::_internal_name() const {
  return name_.Get();
}
inline void Runtime::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_name() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.name)
}

// string namespace = 3 [json_name = "namespace"];
inline void Runtime::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& Runtime::namespace_() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.namespace)
  return _internal_namespace_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_namespace_(ArgT0&& arg0, ArgT... args) {
 
 namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.namespace)
}
inline std::string* Runtime::mutable_namespace_() {
  std::string* _s = _internal_mutable_namespace_();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.namespace)
  return _s;
}
inline const std::string& Runtime::_internal_namespace_() const {
  return namespace__.Get();
}
inline void Runtime::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_namespace_() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.namespace)
}

// uint32 project_id = 4 [json_name = "projectId"];
inline void Runtime::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Runtime::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Runtime::project_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.project_id)
  return _internal_project_id();
}
inline void Runtime::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void Runtime::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.project_id)
}

// string application_id = 5 [json_name = "applicationId"];
inline void Runtime::clear_application_id() {
  application_id_.ClearToEmpty();
}
inline const std::string& Runtime::application_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.application_id)
  return _internal_application_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_application_id(ArgT0&& arg0, ArgT... args) {
 
 application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.application_id)
}
inline std::string* Runtime::mutable_application_id() {
  std::string* _s = _internal_mutable_application_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.application_id)
  return _s;
}
inline const std::string& Runtime::_internal_application_id() const {
  return application_id_.Get();
}
inline void Runtime::_internal_set_application_id(const std::string& value) {
  
  application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_application_id() {
  
  return application_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_application_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.application_id)
  return application_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_application_id(std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.application_id)
}

// string workspace_id = 6 [json_name = "workspaceId"];
inline void Runtime::clear_workspace_id() {
  workspace_id_.ClearToEmpty();
}
inline const std::string& Runtime::workspace_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.workspace_id)
  return _internal_workspace_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_workspace_id(ArgT0&& arg0, ArgT... args) {
 
 workspace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.workspace_id)
}
inline std::string* Runtime::mutable_workspace_id() {
  std::string* _s = _internal_mutable_workspace_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.workspace_id)
  return _s;
}
inline const std::string& Runtime::_internal_workspace_id() const {
  return workspace_id_.Get();
}
inline void Runtime::_internal_set_workspace_id(const std::string& value) {
  
  workspace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_workspace_id() {
  
  return workspace_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_workspace_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.workspace_id)
  return workspace_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_workspace_id(std::string* workspace_id) {
  if (workspace_id != nullptr) {
    
  } else {
    
  }
  workspace_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workspace_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.workspace_id)
}

// map<string, string> integration = 7 [json_name = "integration"];
inline int Runtime::_internal_integration_size() const {
  return integration_.size();
}
inline int Runtime::integration_size() const {
  return _internal_integration_size();
}
inline void Runtime::clear_integration() {
  integration_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Runtime::_internal_integration() const {
  return integration_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Runtime::integration() const {
  // @@protoc_insertion_point(field_map:pipelines.runtime.v1alpha1.Runtime.integration)
  return _internal_integration();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Runtime::_internal_mutable_integration() {
  return integration_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Runtime::mutable_integration() {
  // @@protoc_insertion_point(field_mutable_map:pipelines.runtime.v1alpha1.Runtime.integration)
  return _internal_mutable_integration();
}

// map<string, string> env_variables = 8 [json_name = "envVariables"];
inline int Runtime::_internal_env_variables_size() const {
  return env_variables_.size();
}
inline int Runtime::env_variables_size() const {
  return _internal_env_variables_size();
}
inline void Runtime::clear_env_variables() {
  env_variables_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Runtime::_internal_env_variables() const {
  return env_variables_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Runtime::env_variables() const {
  // @@protoc_insertion_point(field_map:pipelines.runtime.v1alpha1.Runtime.env_variables)
  return _internal_env_variables();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Runtime::_internal_mutable_env_variables() {
  return env_variables_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Runtime::mutable_env_variables() {
  // @@protoc_insertion_point(field_mutable_map:pipelines.runtime.v1alpha1.Runtime.env_variables)
  return _internal_mutable_env_variables();
}

// map<string, string> commands = 9 [json_name = "commands"];
inline int Runtime::_internal_commands_size() const {
  return commands_.size();
}
inline int Runtime::commands_size() const {
  return _internal_commands_size();
}
inline void Runtime::clear_commands() {
  commands_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Runtime::_internal_commands() const {
  return commands_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Runtime::commands() const {
  // @@protoc_insertion_point(field_map:pipelines.runtime.v1alpha1.Runtime.commands)
  return _internal_commands();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Runtime::_internal_mutable_commands() {
  return commands_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Runtime::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_map:pipelines.runtime.v1alpha1.Runtime.commands)
  return _internal_mutable_commands();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace runtime
}  // namespace pipelines

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto
