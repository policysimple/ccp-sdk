// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipelines/runtime/v1alpha1/runtime.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[11]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto;
namespace pipelines {
namespace runtime {
namespace v1alpha1 {
class IntanceType;
struct IntanceTypeDefaultTypeInternal;
extern IntanceTypeDefaultTypeInternal _IntanceType_default_instance_;
class Limit;
struct LimitDefaultTypeInternal;
extern LimitDefaultTypeInternal _Limit_default_instance_;
class Request;
struct RequestDefaultTypeInternal;
extern RequestDefaultTypeInternal _Request_default_instance_;
class ResourcesRules;
struct ResourcesRulesDefaultTypeInternal;
extern ResourcesRulesDefaultTypeInternal _ResourcesRules_default_instance_;
class Runtime;
struct RuntimeDefaultTypeInternal;
extern RuntimeDefaultTypeInternal _Runtime_default_instance_;
class RuntimeList;
struct RuntimeListDefaultTypeInternal;
extern RuntimeListDefaultTypeInternal _RuntimeList_default_instance_;
class Runtime_CommandsEntry_DoNotUse;
struct Runtime_CommandsEntry_DoNotUseDefaultTypeInternal;
extern Runtime_CommandsEntry_DoNotUseDefaultTypeInternal _Runtime_CommandsEntry_DoNotUse_default_instance_;
class Runtime_EnvironmentVariablesEntry_DoNotUse;
struct Runtime_EnvironmentVariablesEntry_DoNotUseDefaultTypeInternal;
extern Runtime_EnvironmentVariablesEntry_DoNotUseDefaultTypeInternal _Runtime_EnvironmentVariablesEntry_DoNotUse_default_instance_;
class Runtime_ExtraArgsEntry_DoNotUse;
struct Runtime_ExtraArgsEntry_DoNotUseDefaultTypeInternal;
extern Runtime_ExtraArgsEntry_DoNotUseDefaultTypeInternal _Runtime_ExtraArgsEntry_DoNotUse_default_instance_;
class Runtime_IntegrationEntry_DoNotUse;
struct Runtime_IntegrationEntry_DoNotUseDefaultTypeInternal;
extern Runtime_IntegrationEntry_DoNotUseDefaultTypeInternal _Runtime_IntegrationEntry_DoNotUse_default_instance_;
class Runtime_SecretsEntry_DoNotUse;
struct Runtime_SecretsEntry_DoNotUseDefaultTypeInternal;
extern Runtime_SecretsEntry_DoNotUseDefaultTypeInternal _Runtime_SecretsEntry_DoNotUse_default_instance_;
}  // namespace v1alpha1
}  // namespace runtime
}  // namespace pipelines
PROTOBUF_NAMESPACE_OPEN
template<> ::pipelines::runtime::v1alpha1::IntanceType* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::IntanceType>(Arena*);
template<> ::pipelines::runtime::v1alpha1::Limit* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::Limit>(Arena*);
template<> ::pipelines::runtime::v1alpha1::Request* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::Request>(Arena*);
template<> ::pipelines::runtime::v1alpha1::ResourcesRules* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::ResourcesRules>(Arena*);
template<> ::pipelines::runtime::v1alpha1::Runtime* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime>(Arena*);
template<> ::pipelines::runtime::v1alpha1::RuntimeList* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::RuntimeList>(Arena*);
template<> ::pipelines::runtime::v1alpha1::Runtime_CommandsEntry_DoNotUse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime_CommandsEntry_DoNotUse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::Runtime_EnvironmentVariablesEntry_DoNotUse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime_EnvironmentVariablesEntry_DoNotUse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::Runtime_ExtraArgsEntry_DoNotUse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime_ExtraArgsEntry_DoNotUse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::Runtime_IntegrationEntry_DoNotUse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime_IntegrationEntry_DoNotUse>(Arena*);
template<> ::pipelines::runtime::v1alpha1::Runtime_SecretsEntry_DoNotUse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime_SecretsEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pipelines {
namespace runtime {
namespace v1alpha1 {

enum TrafficType : int {
  TRAFFIC_TYPE_UNSPECIFIED = 0,
  TRAFFIC_TYPE_EXTERNAL = 1,
  TRAFFIC_TYPE_INTERNAL = 2,
  TrafficType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  TrafficType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool TrafficType_IsValid(int value);
constexpr TrafficType TrafficType_MIN = TRAFFIC_TYPE_UNSPECIFIED;
constexpr TrafficType TrafficType_MAX = TRAFFIC_TYPE_INTERNAL;
constexpr int TrafficType_ARRAYSIZE = TrafficType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TrafficType_descriptor();
template<typename T>
inline const std::string& TrafficType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TrafficType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TrafficType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TrafficType_descriptor(), enum_t_value);
}
inline bool TrafficType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TrafficType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TrafficType>(
    TrafficType_descriptor(), name, value);
}
// ===================================================================

class Runtime_IntegrationEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Runtime_IntegrationEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Runtime_IntegrationEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Runtime_IntegrationEntry_DoNotUse();
  explicit constexpr Runtime_IntegrationEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Runtime_IntegrationEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Runtime_IntegrationEntry_DoNotUse& other);
  static const Runtime_IntegrationEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Runtime_IntegrationEntry_DoNotUse*>(&_Runtime_IntegrationEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.runtime.v1alpha1.Runtime.IntegrationEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.runtime.v1alpha1.Runtime.IntegrationEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Runtime_EnvironmentVariablesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Runtime_EnvironmentVariablesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Runtime_EnvironmentVariablesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Runtime_EnvironmentVariablesEntry_DoNotUse();
  explicit constexpr Runtime_EnvironmentVariablesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Runtime_EnvironmentVariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Runtime_EnvironmentVariablesEntry_DoNotUse& other);
  static const Runtime_EnvironmentVariablesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Runtime_EnvironmentVariablesEntry_DoNotUse*>(&_Runtime_EnvironmentVariablesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.runtime.v1alpha1.Runtime.EnvironmentVariablesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.runtime.v1alpha1.Runtime.EnvironmentVariablesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Runtime_CommandsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Runtime_CommandsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Runtime_CommandsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Runtime_CommandsEntry_DoNotUse();
  explicit constexpr Runtime_CommandsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Runtime_CommandsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Runtime_CommandsEntry_DoNotUse& other);
  static const Runtime_CommandsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Runtime_CommandsEntry_DoNotUse*>(&_Runtime_CommandsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.runtime.v1alpha1.Runtime.CommandsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.runtime.v1alpha1.Runtime.CommandsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Runtime_SecretsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Runtime_SecretsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Runtime_SecretsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Runtime_SecretsEntry_DoNotUse();
  explicit constexpr Runtime_SecretsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Runtime_SecretsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Runtime_SecretsEntry_DoNotUse& other);
  static const Runtime_SecretsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Runtime_SecretsEntry_DoNotUse*>(&_Runtime_SecretsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.runtime.v1alpha1.Runtime.SecretsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.runtime.v1alpha1.Runtime.SecretsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Runtime_ExtraArgsEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Runtime_ExtraArgsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Runtime_ExtraArgsEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Runtime_ExtraArgsEntry_DoNotUse();
  explicit constexpr Runtime_ExtraArgsEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Runtime_ExtraArgsEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Runtime_ExtraArgsEntry_DoNotUse& other);
  static const Runtime_ExtraArgsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Runtime_ExtraArgsEntry_DoNotUse*>(&_Runtime_ExtraArgsEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.runtime.v1alpha1.Runtime.ExtraArgsEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.runtime.v1alpha1.Runtime.ExtraArgsEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Runtime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.Runtime) */ {
 public:
  inline Runtime() : Runtime(nullptr) {}
  ~Runtime() override;
  explicit constexpr Runtime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Runtime(const Runtime& from);
  Runtime(Runtime&& from) noexcept
    : Runtime() {
    *this = ::std::move(from);
  }

  inline Runtime& operator=(const Runtime& from) {
    CopyFrom(from);
    return *this;
  }
  inline Runtime& operator=(Runtime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Runtime& default_instance() {
    return *internal_default_instance();
  }
  static inline const Runtime* internal_default_instance() {
    return reinterpret_cast<const Runtime*>(
               &_Runtime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(Runtime& a, Runtime& b) {
    a.Swap(&b);
  }
  inline void Swap(Runtime* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Runtime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Runtime* New() const final {
    return new Runtime();
  }

  Runtime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Runtime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Runtime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Runtime& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Runtime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.Runtime";
  }
  protected:
  explicit Runtime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kInstanceTypesFieldNumber = 3,
    kIntegrationFieldNumber = 12,
    kEnvironmentVariablesFieldNumber = 13,
    kCommandsFieldNumber = 14,
    kSecretsFieldNumber = 15,
    kExtraArgsFieldNumber = 16,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kApplicationIdFieldNumber = 6,
    kWorkspaceIdFieldNumber = 7,
    kEnvironmentIdFieldNumber = 8,
    kScalerFieldNumber = 9,
    kPodStatusFieldNumber = 10,
    kPodStatusMsgFieldNumber = 11,
    kResponseMessageFieldNumber = 18,
    kEnvironmentNameFieldNumber = 19,
    kEnvironmentInternalNameFieldNumber = 20,
    kApplicationNameFieldNumber = 21,
    kOrganizationIdFieldNumber = 4,
    kProjectIdFieldNumber = 5,
    kTrafficTypeFieldNumber = 17,
    kStorageUsedFieldNumber = 22,
    kStorageLimitFieldNumber = 23,
  };
  // repeated .pipelines.runtime.v1alpha1.IntanceType instance_types = 3 [json_name = "instanceTypes"];
  int instance_types_size() const;
  private:
  int _internal_instance_types_size() const;
  public:
  void clear_instance_types();
  ::pipelines::runtime::v1alpha1::IntanceType* mutable_instance_types(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::IntanceType >*
      mutable_instance_types();
  private:
  const ::pipelines::runtime::v1alpha1::IntanceType& _internal_instance_types(int index) const;
  ::pipelines::runtime::v1alpha1::IntanceType* _internal_add_instance_types();
  public:
  const ::pipelines::runtime::v1alpha1::IntanceType& instance_types(int index) const;
  ::pipelines::runtime::v1alpha1::IntanceType* add_instance_types();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::IntanceType >&
      instance_types() const;

  // map<string, string> integration = 12 [json_name = "integration"];
  int integration_size() const;
  private:
  int _internal_integration_size() const;
  public:
  void clear_integration();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_integration() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_integration();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      integration() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_integration();

  // map<string, string> environment_variables = 13 [json_name = "environmentVariables"];
  int environment_variables_size() const;
  private:
  int _internal_environment_variables_size() const;
  public:
  void clear_environment_variables();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_environment_variables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_environment_variables();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      environment_variables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_environment_variables();

  // map<string, string> commands = 14 [json_name = "commands"];
  int commands_size() const;
  private:
  int _internal_commands_size() const;
  public:
  void clear_commands();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_commands() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_commands();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      commands() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_commands();

  // map<string, string> secrets = 15 [json_name = "secrets"];
  int secrets_size() const;
  private:
  int _internal_secrets_size() const;
  public:
  void clear_secrets();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_secrets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_secrets();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      secrets() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_secrets();

  // map<string, string> extra_args = 16 [json_name = "extraArgs"];
  int extra_args_size() const;
  private:
  int _internal_extra_args_size() const;
  public:
  void clear_extra_args();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_extra_args() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_extra_args();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      extra_args() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_extra_args();

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string application_id = 6 [json_name = "applicationId"];
  void clear_application_id();
  const std::string& application_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_application_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_application_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_application_id();
  void set_allocated_application_id(std::string* application_id);
  private:
  const std::string& _internal_application_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_id(const std::string& value);
  std::string* _internal_mutable_application_id();
  public:

  // string workspace_id = 7 [json_name = "workspaceId"];
  void clear_workspace_id();
  const std::string& workspace_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workspace_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workspace_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_workspace_id();
  void set_allocated_workspace_id(std::string* workspace_id);
  private:
  const std::string& _internal_workspace_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workspace_id(const std::string& value);
  std::string* _internal_mutable_workspace_id();
  public:

  // string environment_id = 8 [json_name = "environmentId"];
  void clear_environment_id();
  const std::string& environment_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_environment_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_environment_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_environment_id();
  void set_allocated_environment_id(std::string* environment_id);
  private:
  const std::string& _internal_environment_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_environment_id(const std::string& value);
  std::string* _internal_mutable_environment_id();
  public:

  // string scaler = 9 [json_name = "scaler"];
  void clear_scaler();
  const std::string& scaler() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_scaler(ArgT0&& arg0, ArgT... args);
  std::string* mutable_scaler();
  PROTOBUF_MUST_USE_RESULT std::string* release_scaler();
  void set_allocated_scaler(std::string* scaler);
  private:
  const std::string& _internal_scaler() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_scaler(const std::string& value);
  std::string* _internal_mutable_scaler();
  public:

  // string pod_status = 10 [json_name = "podStatus"];
  void clear_pod_status();
  const std::string& pod_status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pod_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pod_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_pod_status();
  void set_allocated_pod_status(std::string* pod_status);
  private:
  const std::string& _internal_pod_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pod_status(const std::string& value);
  std::string* _internal_mutable_pod_status();
  public:

  // string pod_status_msg = 11 [json_name = "podStatusMsg"];
  void clear_pod_status_msg();
  const std::string& pod_status_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pod_status_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pod_status_msg();
  PROTOBUF_MUST_USE_RESULT std::string* release_pod_status_msg();
  void set_allocated_pod_status_msg(std::string* pod_status_msg);
  private:
  const std::string& _internal_pod_status_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pod_status_msg(const std::string& value);
  std::string* _internal_mutable_pod_status_msg();
  public:

  // string response_message = 18 [json_name = "responseMessage"];
  void clear_response_message();
  const std::string& response_message() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_response_message(ArgT0&& arg0, ArgT... args);
  std::string* mutable_response_message();
  PROTOBUF_MUST_USE_RESULT std::string* release_response_message();
  void set_allocated_response_message(std::string* response_message);
  private:
  const std::string& _internal_response_message() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_response_message(const std::string& value);
  std::string* _internal_mutable_response_message();
  public:

  // string environment_name = 19 [json_name = "environmentName"];
  void clear_environment_name();
  const std::string& environment_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_environment_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_environment_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_environment_name();
  void set_allocated_environment_name(std::string* environment_name);
  private:
  const std::string& _internal_environment_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_environment_name(const std::string& value);
  std::string* _internal_mutable_environment_name();
  public:

  // string environment_internal_name = 20 [json_name = "environmentInternalName"];
  void clear_environment_internal_name();
  const std::string& environment_internal_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_environment_internal_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_environment_internal_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_environment_internal_name();
  void set_allocated_environment_internal_name(std::string* environment_internal_name);
  private:
  const std::string& _internal_environment_internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_environment_internal_name(const std::string& value);
  std::string* _internal_mutable_environment_internal_name();
  public:

  // string application_name = 21 [json_name = "applicationName"];
  void clear_application_name();
  const std::string& application_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_application_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_application_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_application_name();
  void set_allocated_application_name(std::string* application_name);
  private:
  const std::string& _internal_application_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_name(const std::string& value);
  std::string* _internal_mutable_application_name();
  public:

  // uint32 organization_id = 4 [json_name = "organizationId"];
  void clear_organization_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id() const;
  void set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_organization_id() const;
  void _internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 project_id = 5 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // .pipelines.runtime.v1alpha1.TrafficType traffic_type = 17 [json_name = "trafficType"];
  void clear_traffic_type();
  ::pipelines::runtime::v1alpha1::TrafficType traffic_type() const;
  void set_traffic_type(::pipelines::runtime::v1alpha1::TrafficType value);
  private:
  ::pipelines::runtime::v1alpha1::TrafficType _internal_traffic_type() const;
  void _internal_set_traffic_type(::pipelines::runtime::v1alpha1::TrafficType value);
  public:

  // uint32 storage_used = 22 [json_name = "storageUsed"];
  void clear_storage_used();
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_used() const;
  void set_storage_used(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_storage_used() const;
  void _internal_set_storage_used(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 storage_limit = 23 [json_name = "storageLimit"];
  void clear_storage_limit();
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_limit() const;
  void set_storage_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_storage_limit() const;
  void _internal_set_storage_limit(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.Runtime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::IntanceType > instance_types_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Runtime_IntegrationEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> integration_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Runtime_EnvironmentVariablesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> environment_variables_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Runtime_CommandsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> commands_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Runtime_SecretsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> secrets_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Runtime_ExtraArgsEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> extra_args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workspace_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr environment_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr scaler_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pod_status_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pod_status_msg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr response_message_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr environment_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr environment_internal_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 organization_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  int traffic_type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_used_;
  ::PROTOBUF_NAMESPACE_ID::uint32 storage_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto;
};
// -------------------------------------------------------------------

class RuntimeList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.RuntimeList) */ {
 public:
  inline RuntimeList() : RuntimeList(nullptr) {}
  ~RuntimeList() override;
  explicit constexpr RuntimeList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RuntimeList(const RuntimeList& from);
  RuntimeList(RuntimeList&& from) noexcept
    : RuntimeList() {
    *this = ::std::move(from);
  }

  inline RuntimeList& operator=(const RuntimeList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RuntimeList& operator=(RuntimeList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RuntimeList& default_instance() {
    return *internal_default_instance();
  }
  static inline const RuntimeList* internal_default_instance() {
    return reinterpret_cast<const RuntimeList*>(
               &_RuntimeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RuntimeList& a, RuntimeList& b) {
    a.Swap(&b);
  }
  inline void Swap(RuntimeList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RuntimeList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RuntimeList* New() const final {
    return new RuntimeList();
  }

  RuntimeList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RuntimeList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const RuntimeList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const RuntimeList& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RuntimeList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.RuntimeList";
  }
  protected:
  explicit RuntimeList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 1,
  };
  // repeated .pipelines.runtime.v1alpha1.Runtime items = 1 [json_name = "items"];
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::pipelines::runtime::v1alpha1::Runtime* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::Runtime >*
      mutable_items();
  private:
  const ::pipelines::runtime::v1alpha1::Runtime& _internal_items(int index) const;
  ::pipelines::runtime::v1alpha1::Runtime* _internal_add_items();
  public:
  const ::pipelines::runtime::v1alpha1::Runtime& items(int index) const;
  ::pipelines::runtime::v1alpha1::Runtime* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::Runtime >&
      items() const;

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.RuntimeList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::Runtime > items_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto;
};
// -------------------------------------------------------------------

class IntanceType final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.IntanceType) */ {
 public:
  inline IntanceType() : IntanceType(nullptr) {}
  ~IntanceType() override;
  explicit constexpr IntanceType(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  IntanceType(const IntanceType& from);
  IntanceType(IntanceType&& from) noexcept
    : IntanceType() {
    *this = ::std::move(from);
  }

  inline IntanceType& operator=(const IntanceType& from) {
    CopyFrom(from);
    return *this;
  }
  inline IntanceType& operator=(IntanceType&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const IntanceType& default_instance() {
    return *internal_default_instance();
  }
  static inline const IntanceType* internal_default_instance() {
    return reinterpret_cast<const IntanceType*>(
               &_IntanceType_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(IntanceType& a, IntanceType& b) {
    a.Swap(&b);
  }
  inline void Swap(IntanceType* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(IntanceType* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline IntanceType* New() const final {
    return new IntanceType();
  }

  IntanceType* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<IntanceType>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const IntanceType& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const IntanceType& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntanceType* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.IntanceType";
  }
  protected:
  explicit IntanceType(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourcesRulesFieldNumber = 3,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // repeated .pipelines.runtime.v1alpha1.ResourcesRules resources_rules = 3 [json_name = "resourcesRules"];
  int resources_rules_size() const;
  private:
  int _internal_resources_rules_size() const;
  public:
  void clear_resources_rules();
  ::pipelines::runtime::v1alpha1::ResourcesRules* mutable_resources_rules(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::ResourcesRules >*
      mutable_resources_rules();
  private:
  const ::pipelines::runtime::v1alpha1::ResourcesRules& _internal_resources_rules(int index) const;
  ::pipelines::runtime::v1alpha1::ResourcesRules* _internal_add_resources_rules();
  public:
  const ::pipelines::runtime::v1alpha1::ResourcesRules& resources_rules(int index) const;
  ::pipelines::runtime::v1alpha1::ResourcesRules* add_resources_rules();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::ResourcesRules >&
      resources_rules() const;

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.IntanceType)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::ResourcesRules > resources_rules_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto;
};
// -------------------------------------------------------------------

class ResourcesRules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.ResourcesRules) */ {
 public:
  inline ResourcesRules() : ResourcesRules(nullptr) {}
  ~ResourcesRules() override;
  explicit constexpr ResourcesRules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ResourcesRules(const ResourcesRules& from);
  ResourcesRules(ResourcesRules&& from) noexcept
    : ResourcesRules() {
    *this = ::std::move(from);
  }

  inline ResourcesRules& operator=(const ResourcesRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline ResourcesRules& operator=(ResourcesRules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ResourcesRules& default_instance() {
    return *internal_default_instance();
  }
  static inline const ResourcesRules* internal_default_instance() {
    return reinterpret_cast<const ResourcesRules*>(
               &_ResourcesRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ResourcesRules& a, ResourcesRules& b) {
    a.Swap(&b);
  }
  inline void Swap(ResourcesRules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ResourcesRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ResourcesRules* New() const final {
    return new ResourcesRules();
  }

  ResourcesRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ResourcesRules>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ResourcesRules& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ResourcesRules& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourcesRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.ResourcesRules";
  }
  protected:
  explicit ResourcesRules(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLimitFieldNumber = 1,
    kRequestFieldNumber = 2,
  };
  // repeated .pipelines.runtime.v1alpha1.Limit limit = 1 [json_name = "limit"];
  int limit_size() const;
  private:
  int _internal_limit_size() const;
  public:
  void clear_limit();
  ::pipelines::runtime::v1alpha1::Limit* mutable_limit(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::Limit >*
      mutable_limit();
  private:
  const ::pipelines::runtime::v1alpha1::Limit& _internal_limit(int index) const;
  ::pipelines::runtime::v1alpha1::Limit* _internal_add_limit();
  public:
  const ::pipelines::runtime::v1alpha1::Limit& limit(int index) const;
  ::pipelines::runtime::v1alpha1::Limit* add_limit();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::Limit >&
      limit() const;

  // repeated .pipelines.runtime.v1alpha1.Request request = 2 [json_name = "request"];
  int request_size() const;
  private:
  int _internal_request_size() const;
  public:
  void clear_request();
  ::pipelines::runtime::v1alpha1::Request* mutable_request(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::Request >*
      mutable_request();
  private:
  const ::pipelines::runtime::v1alpha1::Request& _internal_request(int index) const;
  ::pipelines::runtime::v1alpha1::Request* _internal_add_request();
  public:
  const ::pipelines::runtime::v1alpha1::Request& request(int index) const;
  ::pipelines::runtime::v1alpha1::Request* add_request();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::Request >&
      request() const;

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.ResourcesRules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::Limit > limit_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::Request > request_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto;
};
// -------------------------------------------------------------------

class Limit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.Limit) */ {
 public:
  inline Limit() : Limit(nullptr) {}
  ~Limit() override;
  explicit constexpr Limit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Limit(const Limit& from);
  Limit(Limit&& from) noexcept
    : Limit() {
    *this = ::std::move(from);
  }

  inline Limit& operator=(const Limit& from) {
    CopyFrom(from);
    return *this;
  }
  inline Limit& operator=(Limit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Limit& default_instance() {
    return *internal_default_instance();
  }
  static inline const Limit* internal_default_instance() {
    return reinterpret_cast<const Limit*>(
               &_Limit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Limit& a, Limit& b) {
    a.Swap(&b);
  }
  inline void Swap(Limit* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Limit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Limit* New() const final {
    return new Limit();
  }

  Limit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Limit>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Limit& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Limit& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Limit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.Limit";
  }
  protected:
  explicit Limit(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuFieldNumber = 1,
    kRamFieldNumber = 2,
  };
  // string cpu = 1 [json_name = "cpu"];
  void clear_cpu();
  const std::string& cpu() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpu(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpu();
  PROTOBUF_MUST_USE_RESULT std::string* release_cpu();
  void set_allocated_cpu(std::string* cpu);
  private:
  const std::string& _internal_cpu() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpu(const std::string& value);
  std::string* _internal_mutable_cpu();
  public:

  // string ram = 2 [json_name = "ram"];
  void clear_ram();
  const std::string& ram() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ram(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ram();
  PROTOBUF_MUST_USE_RESULT std::string* release_ram();
  void set_allocated_ram(std::string* ram);
  private:
  const std::string& _internal_ram() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ram(const std::string& value);
  std::string* _internal_mutable_ram();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.Limit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpu_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ram_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto;
};
// -------------------------------------------------------------------

class Request final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.Request) */ {
 public:
  inline Request() : Request(nullptr) {}
  ~Request() override;
  explicit constexpr Request(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Request(const Request& from);
  Request(Request&& from) noexcept
    : Request() {
    *this = ::std::move(from);
  }

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Request& operator=(Request&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Request& default_instance() {
    return *internal_default_instance();
  }
  static inline const Request* internal_default_instance() {
    return reinterpret_cast<const Request*>(
               &_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Request& a, Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Request* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Request* New() const final {
    return new Request();
  }

  Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Request>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Request& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Request& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.Request";
  }
  protected:
  explicit Request(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCpuFieldNumber = 1,
    kRamFieldNumber = 2,
  };
  // string cpu = 1 [json_name = "cpu"];
  void clear_cpu();
  const std::string& cpu() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cpu(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cpu();
  PROTOBUF_MUST_USE_RESULT std::string* release_cpu();
  void set_allocated_cpu(std::string* cpu);
  private:
  const std::string& _internal_cpu() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cpu(const std::string& value);
  std::string* _internal_mutable_cpu();
  public:

  // string ram = 2 [json_name = "ram"];
  void clear_ram();
  const std::string& ram() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ram(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ram();
  PROTOBUF_MUST_USE_RESULT std::string* release_ram();
  void set_allocated_ram(std::string* ram);
  private:
  const std::string& _internal_ram() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ram(const std::string& value);
  std::string* _internal_mutable_ram();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cpu_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ram_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Runtime

// string id = 1 [json_name = "id"];
inline void Runtime::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Runtime::id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.id)
}
inline std::string* Runtime::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.id)
  return _s;
}
inline const std::string& Runtime::_internal_id() const {
  return id_.Get();
}
inline void Runtime::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.id)
}

// string name = 2 [json_name = "name"];
inline void Runtime::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Runtime::name() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.name)
}
inline std::string* Runtime::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.name)
  return _s;
}
inline const std::string& Runtime::_internal_name() const {
  return name_.Get();
}
inline void Runtime::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_name() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.name)
}

// repeated .pipelines.runtime.v1alpha1.IntanceType instance_types = 3 [json_name = "instanceTypes"];
inline int Runtime::_internal_instance_types_size() const {
  return instance_types_.size();
}
inline int Runtime::instance_types_size() const {
  return _internal_instance_types_size();
}
inline void Runtime::clear_instance_types() {
  instance_types_.Clear();
}
inline ::pipelines::runtime::v1alpha1::IntanceType* Runtime::mutable_instance_types(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.instance_types)
  return instance_types_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::IntanceType >*
Runtime::mutable_instance_types() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.runtime.v1alpha1.Runtime.instance_types)
  return &instance_types_;
}
inline const ::pipelines::runtime::v1alpha1::IntanceType& Runtime::_internal_instance_types(int index) const {
  return instance_types_.Get(index);
}
inline const ::pipelines::runtime::v1alpha1::IntanceType& Runtime::instance_types(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.instance_types)
  return _internal_instance_types(index);
}
inline ::pipelines::runtime::v1alpha1::IntanceType* Runtime::_internal_add_instance_types() {
  return instance_types_.Add();
}
inline ::pipelines::runtime::v1alpha1::IntanceType* Runtime::add_instance_types() {
  ::pipelines::runtime::v1alpha1::IntanceType* _add = _internal_add_instance_types();
  // @@protoc_insertion_point(field_add:pipelines.runtime.v1alpha1.Runtime.instance_types)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::IntanceType >&
Runtime::instance_types() const {
  // @@protoc_insertion_point(field_list:pipelines.runtime.v1alpha1.Runtime.instance_types)
  return instance_types_;
}

// uint32 organization_id = 4 [json_name = "organizationId"];
inline void Runtime::clear_organization_id() {
  organization_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Runtime::_internal_organization_id() const {
  return organization_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Runtime::organization_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.organization_id)
  return _internal_organization_id();
}
inline void Runtime::_internal_set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  organization_id_ = value;
}
inline void Runtime::set_organization_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_organization_id(value);
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.organization_id)
}

// uint32 project_id = 5 [json_name = "projectId"];
inline void Runtime::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Runtime::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Runtime::project_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.project_id)
  return _internal_project_id();
}
inline void Runtime::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void Runtime::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.project_id)
}

// string application_id = 6 [json_name = "applicationId"];
inline void Runtime::clear_application_id() {
  application_id_.ClearToEmpty();
}
inline const std::string& Runtime::application_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.application_id)
  return _internal_application_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_application_id(ArgT0&& arg0, ArgT... args) {
 
 application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.application_id)
}
inline std::string* Runtime::mutable_application_id() {
  std::string* _s = _internal_mutable_application_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.application_id)
  return _s;
}
inline const std::string& Runtime::_internal_application_id() const {
  return application_id_.Get();
}
inline void Runtime::_internal_set_application_id(const std::string& value) {
  
  application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_application_id() {
  
  return application_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_application_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.application_id)
  return application_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_application_id(std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.application_id)
}

// string workspace_id = 7 [json_name = "workspaceId"];
inline void Runtime::clear_workspace_id() {
  workspace_id_.ClearToEmpty();
}
inline const std::string& Runtime::workspace_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.workspace_id)
  return _internal_workspace_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_workspace_id(ArgT0&& arg0, ArgT... args) {
 
 workspace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.workspace_id)
}
inline std::string* Runtime::mutable_workspace_id() {
  std::string* _s = _internal_mutable_workspace_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.workspace_id)
  return _s;
}
inline const std::string& Runtime::_internal_workspace_id() const {
  return workspace_id_.Get();
}
inline void Runtime::_internal_set_workspace_id(const std::string& value) {
  
  workspace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_workspace_id() {
  
  return workspace_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_workspace_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.workspace_id)
  return workspace_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_workspace_id(std::string* workspace_id) {
  if (workspace_id != nullptr) {
    
  } else {
    
  }
  workspace_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workspace_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.workspace_id)
}

// string environment_id = 8 [json_name = "environmentId"];
inline void Runtime::clear_environment_id() {
  environment_id_.ClearToEmpty();
}
inline const std::string& Runtime::environment_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.environment_id)
  return _internal_environment_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_environment_id(ArgT0&& arg0, ArgT... args) {
 
 environment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.environment_id)
}
inline std::string* Runtime::mutable_environment_id() {
  std::string* _s = _internal_mutable_environment_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.environment_id)
  return _s;
}
inline const std::string& Runtime::_internal_environment_id() const {
  return environment_id_.Get();
}
inline void Runtime::_internal_set_environment_id(const std::string& value) {
  
  environment_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_environment_id() {
  
  return environment_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_environment_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.environment_id)
  return environment_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_environment_id(std::string* environment_id) {
  if (environment_id != nullptr) {
    
  } else {
    
  }
  environment_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), environment_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.environment_id)
}

// string scaler = 9 [json_name = "scaler"];
inline void Runtime::clear_scaler() {
  scaler_.ClearToEmpty();
}
inline const std::string& Runtime::scaler() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.scaler)
  return _internal_scaler();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_scaler(ArgT0&& arg0, ArgT... args) {
 
 scaler_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.scaler)
}
inline std::string* Runtime::mutable_scaler() {
  std::string* _s = _internal_mutable_scaler();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.scaler)
  return _s;
}
inline const std::string& Runtime::_internal_scaler() const {
  return scaler_.Get();
}
inline void Runtime::_internal_set_scaler(const std::string& value) {
  
  scaler_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_scaler() {
  
  return scaler_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_scaler() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.scaler)
  return scaler_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_scaler(std::string* scaler) {
  if (scaler != nullptr) {
    
  } else {
    
  }
  scaler_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), scaler,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.scaler)
}

// string pod_status = 10 [json_name = "podStatus"];
inline void Runtime::clear_pod_status() {
  pod_status_.ClearToEmpty();
}
inline const std::string& Runtime::pod_status() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.pod_status)
  return _internal_pod_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_pod_status(ArgT0&& arg0, ArgT... args) {
 
 pod_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.pod_status)
}
inline std::string* Runtime::mutable_pod_status() {
  std::string* _s = _internal_mutable_pod_status();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.pod_status)
  return _s;
}
inline const std::string& Runtime::_internal_pod_status() const {
  return pod_status_.Get();
}
inline void Runtime::_internal_set_pod_status(const std::string& value) {
  
  pod_status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_pod_status() {
  
  return pod_status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_pod_status() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.pod_status)
  return pod_status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_pod_status(std::string* pod_status) {
  if (pod_status != nullptr) {
    
  } else {
    
  }
  pod_status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pod_status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.pod_status)
}

// string pod_status_msg = 11 [json_name = "podStatusMsg"];
inline void Runtime::clear_pod_status_msg() {
  pod_status_msg_.ClearToEmpty();
}
inline const std::string& Runtime::pod_status_msg() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.pod_status_msg)
  return _internal_pod_status_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_pod_status_msg(ArgT0&& arg0, ArgT... args) {
 
 pod_status_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.pod_status_msg)
}
inline std::string* Runtime::mutable_pod_status_msg() {
  std::string* _s = _internal_mutable_pod_status_msg();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.pod_status_msg)
  return _s;
}
inline const std::string& Runtime::_internal_pod_status_msg() const {
  return pod_status_msg_.Get();
}
inline void Runtime::_internal_set_pod_status_msg(const std::string& value) {
  
  pod_status_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_pod_status_msg() {
  
  return pod_status_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_pod_status_msg() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.pod_status_msg)
  return pod_status_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_pod_status_msg(std::string* pod_status_msg) {
  if (pod_status_msg != nullptr) {
    
  } else {
    
  }
  pod_status_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pod_status_msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.pod_status_msg)
}

// map<string, string> integration = 12 [json_name = "integration"];
inline int Runtime::_internal_integration_size() const {
  return integration_.size();
}
inline int Runtime::integration_size() const {
  return _internal_integration_size();
}
inline void Runtime::clear_integration() {
  integration_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Runtime::_internal_integration() const {
  return integration_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Runtime::integration() const {
  // @@protoc_insertion_point(field_map:pipelines.runtime.v1alpha1.Runtime.integration)
  return _internal_integration();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Runtime::_internal_mutable_integration() {
  return integration_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Runtime::mutable_integration() {
  // @@protoc_insertion_point(field_mutable_map:pipelines.runtime.v1alpha1.Runtime.integration)
  return _internal_mutable_integration();
}

// map<string, string> environment_variables = 13 [json_name = "environmentVariables"];
inline int Runtime::_internal_environment_variables_size() const {
  return environment_variables_.size();
}
inline int Runtime::environment_variables_size() const {
  return _internal_environment_variables_size();
}
inline void Runtime::clear_environment_variables() {
  environment_variables_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Runtime::_internal_environment_variables() const {
  return environment_variables_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Runtime::environment_variables() const {
  // @@protoc_insertion_point(field_map:pipelines.runtime.v1alpha1.Runtime.environment_variables)
  return _internal_environment_variables();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Runtime::_internal_mutable_environment_variables() {
  return environment_variables_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Runtime::mutable_environment_variables() {
  // @@protoc_insertion_point(field_mutable_map:pipelines.runtime.v1alpha1.Runtime.environment_variables)
  return _internal_mutable_environment_variables();
}

// map<string, string> commands = 14 [json_name = "commands"];
inline int Runtime::_internal_commands_size() const {
  return commands_.size();
}
inline int Runtime::commands_size() const {
  return _internal_commands_size();
}
inline void Runtime::clear_commands() {
  commands_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Runtime::_internal_commands() const {
  return commands_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Runtime::commands() const {
  // @@protoc_insertion_point(field_map:pipelines.runtime.v1alpha1.Runtime.commands)
  return _internal_commands();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Runtime::_internal_mutable_commands() {
  return commands_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Runtime::mutable_commands() {
  // @@protoc_insertion_point(field_mutable_map:pipelines.runtime.v1alpha1.Runtime.commands)
  return _internal_mutable_commands();
}

// map<string, string> secrets = 15 [json_name = "secrets"];
inline int Runtime::_internal_secrets_size() const {
  return secrets_.size();
}
inline int Runtime::secrets_size() const {
  return _internal_secrets_size();
}
inline void Runtime::clear_secrets() {
  secrets_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Runtime::_internal_secrets() const {
  return secrets_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Runtime::secrets() const {
  // @@protoc_insertion_point(field_map:pipelines.runtime.v1alpha1.Runtime.secrets)
  return _internal_secrets();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Runtime::_internal_mutable_secrets() {
  return secrets_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Runtime::mutable_secrets() {
  // @@protoc_insertion_point(field_mutable_map:pipelines.runtime.v1alpha1.Runtime.secrets)
  return _internal_mutable_secrets();
}

// map<string, string> extra_args = 16 [json_name = "extraArgs"];
inline int Runtime::_internal_extra_args_size() const {
  return extra_args_.size();
}
inline int Runtime::extra_args_size() const {
  return _internal_extra_args_size();
}
inline void Runtime::clear_extra_args() {
  extra_args_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Runtime::_internal_extra_args() const {
  return extra_args_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Runtime::extra_args() const {
  // @@protoc_insertion_point(field_map:pipelines.runtime.v1alpha1.Runtime.extra_args)
  return _internal_extra_args();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Runtime::_internal_mutable_extra_args() {
  return extra_args_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Runtime::mutable_extra_args() {
  // @@protoc_insertion_point(field_mutable_map:pipelines.runtime.v1alpha1.Runtime.extra_args)
  return _internal_mutable_extra_args();
}

// .pipelines.runtime.v1alpha1.TrafficType traffic_type = 17 [json_name = "trafficType"];
inline void Runtime::clear_traffic_type() {
  traffic_type_ = 0;
}
inline ::pipelines::runtime::v1alpha1::TrafficType Runtime::_internal_traffic_type() const {
  return static_cast< ::pipelines::runtime::v1alpha1::TrafficType >(traffic_type_);
}
inline ::pipelines::runtime::v1alpha1::TrafficType Runtime::traffic_type() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.traffic_type)
  return _internal_traffic_type();
}
inline void Runtime::_internal_set_traffic_type(::pipelines::runtime::v1alpha1::TrafficType value) {
  
  traffic_type_ = value;
}
inline void Runtime::set_traffic_type(::pipelines::runtime::v1alpha1::TrafficType value) {
  _internal_set_traffic_type(value);
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.traffic_type)
}

// string response_message = 18 [json_name = "responseMessage"];
inline void Runtime::clear_response_message() {
  response_message_.ClearToEmpty();
}
inline const std::string& Runtime::response_message() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.response_message)
  return _internal_response_message();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_response_message(ArgT0&& arg0, ArgT... args) {
 
 response_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.response_message)
}
inline std::string* Runtime::mutable_response_message() {
  std::string* _s = _internal_mutable_response_message();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.response_message)
  return _s;
}
inline const std::string& Runtime::_internal_response_message() const {
  return response_message_.Get();
}
inline void Runtime::_internal_set_response_message(const std::string& value) {
  
  response_message_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_response_message() {
  
  return response_message_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_response_message() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.response_message)
  return response_message_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_response_message(std::string* response_message) {
  if (response_message != nullptr) {
    
  } else {
    
  }
  response_message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), response_message,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.response_message)
}

// string environment_name = 19 [json_name = "environmentName"];
inline void Runtime::clear_environment_name() {
  environment_name_.ClearToEmpty();
}
inline const std::string& Runtime::environment_name() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.environment_name)
  return _internal_environment_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_environment_name(ArgT0&& arg0, ArgT... args) {
 
 environment_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.environment_name)
}
inline std::string* Runtime::mutable_environment_name() {
  std::string* _s = _internal_mutable_environment_name();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.environment_name)
  return _s;
}
inline const std::string& Runtime::_internal_environment_name() const {
  return environment_name_.Get();
}
inline void Runtime::_internal_set_environment_name(const std::string& value) {
  
  environment_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_environment_name() {
  
  return environment_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_environment_name() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.environment_name)
  return environment_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_environment_name(std::string* environment_name) {
  if (environment_name != nullptr) {
    
  } else {
    
  }
  environment_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), environment_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.environment_name)
}

// string environment_internal_name = 20 [json_name = "environmentInternalName"];
inline void Runtime::clear_environment_internal_name() {
  environment_internal_name_.ClearToEmpty();
}
inline const std::string& Runtime::environment_internal_name() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.environment_internal_name)
  return _internal_environment_internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_environment_internal_name(ArgT0&& arg0, ArgT... args) {
 
 environment_internal_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.environment_internal_name)
}
inline std::string* Runtime::mutable_environment_internal_name() {
  std::string* _s = _internal_mutable_environment_internal_name();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.environment_internal_name)
  return _s;
}
inline const std::string& Runtime::_internal_environment_internal_name() const {
  return environment_internal_name_.Get();
}
inline void Runtime::_internal_set_environment_internal_name(const std::string& value) {
  
  environment_internal_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_environment_internal_name() {
  
  return environment_internal_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_environment_internal_name() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.environment_internal_name)
  return environment_internal_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_environment_internal_name(std::string* environment_internal_name) {
  if (environment_internal_name != nullptr) {
    
  } else {
    
  }
  environment_internal_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), environment_internal_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.environment_internal_name)
}

// string application_name = 21 [json_name = "applicationName"];
inline void Runtime::clear_application_name() {
  application_name_.ClearToEmpty();
}
inline const std::string& Runtime::application_name() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.application_name)
  return _internal_application_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_application_name(ArgT0&& arg0, ArgT... args) {
 
 application_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.application_name)
}
inline std::string* Runtime::mutable_application_name() {
  std::string* _s = _internal_mutable_application_name();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.application_name)
  return _s;
}
inline const std::string& Runtime::_internal_application_name() const {
  return application_name_.Get();
}
inline void Runtime::_internal_set_application_name(const std::string& value) {
  
  application_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_application_name() {
  
  return application_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_application_name() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.application_name)
  return application_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_application_name(std::string* application_name) {
  if (application_name != nullptr) {
    
  } else {
    
  }
  application_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.application_name)
}

// uint32 storage_used = 22 [json_name = "storageUsed"];
inline void Runtime::clear_storage_used() {
  storage_used_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Runtime::_internal_storage_used() const {
  return storage_used_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Runtime::storage_used() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.storage_used)
  return _internal_storage_used();
}
inline void Runtime::_internal_set_storage_used(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  storage_used_ = value;
}
inline void Runtime::set_storage_used(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_storage_used(value);
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.storage_used)
}

// uint32 storage_limit = 23 [json_name = "storageLimit"];
inline void Runtime::clear_storage_limit() {
  storage_limit_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Runtime::_internal_storage_limit() const {
  return storage_limit_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Runtime::storage_limit() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.storage_limit)
  return _internal_storage_limit();
}
inline void Runtime::_internal_set_storage_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  storage_limit_ = value;
}
inline void Runtime::set_storage_limit(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_storage_limit(value);
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.storage_limit)
}

// -------------------------------------------------------------------

// RuntimeList

// repeated .pipelines.runtime.v1alpha1.Runtime items = 1 [json_name = "items"];
inline int RuntimeList::_internal_items_size() const {
  return items_.size();
}
inline int RuntimeList::items_size() const {
  return _internal_items_size();
}
inline void RuntimeList::clear_items() {
  items_.Clear();
}
inline ::pipelines::runtime::v1alpha1::Runtime* RuntimeList::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.RuntimeList.items)
  return items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::Runtime >*
RuntimeList::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.runtime.v1alpha1.RuntimeList.items)
  return &items_;
}
inline const ::pipelines::runtime::v1alpha1::Runtime& RuntimeList::_internal_items(int index) const {
  return items_.Get(index);
}
inline const ::pipelines::runtime::v1alpha1::Runtime& RuntimeList::items(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.RuntimeList.items)
  return _internal_items(index);
}
inline ::pipelines::runtime::v1alpha1::Runtime* RuntimeList::_internal_add_items() {
  return items_.Add();
}
inline ::pipelines::runtime::v1alpha1::Runtime* RuntimeList::add_items() {
  ::pipelines::runtime::v1alpha1::Runtime* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:pipelines.runtime.v1alpha1.RuntimeList.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::Runtime >&
RuntimeList::items() const {
  // @@protoc_insertion_point(field_list:pipelines.runtime.v1alpha1.RuntimeList.items)
  return items_;
}

// -------------------------------------------------------------------

// IntanceType

// string id = 1 [json_name = "id"];
inline void IntanceType::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& IntanceType::id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.IntanceType.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IntanceType::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.IntanceType.id)
}
inline std::string* IntanceType::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.IntanceType.id)
  return _s;
}
inline const std::string& IntanceType::_internal_id() const {
  return id_.Get();
}
inline void IntanceType::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IntanceType::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IntanceType::release_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.IntanceType.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IntanceType::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.IntanceType.id)
}

// string name = 2 [json_name = "name"];
inline void IntanceType::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& IntanceType::name() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.IntanceType.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void IntanceType::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.IntanceType.name)
}
inline std::string* IntanceType::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.IntanceType.name)
  return _s;
}
inline const std::string& IntanceType::_internal_name() const {
  return name_.Get();
}
inline void IntanceType::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* IntanceType::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* IntanceType::release_name() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.IntanceType.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void IntanceType::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.IntanceType.name)
}

// repeated .pipelines.runtime.v1alpha1.ResourcesRules resources_rules = 3 [json_name = "resourcesRules"];
inline int IntanceType::_internal_resources_rules_size() const {
  return resources_rules_.size();
}
inline int IntanceType::resources_rules_size() const {
  return _internal_resources_rules_size();
}
inline void IntanceType::clear_resources_rules() {
  resources_rules_.Clear();
}
inline ::pipelines::runtime::v1alpha1::ResourcesRules* IntanceType::mutable_resources_rules(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.IntanceType.resources_rules)
  return resources_rules_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::ResourcesRules >*
IntanceType::mutable_resources_rules() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.runtime.v1alpha1.IntanceType.resources_rules)
  return &resources_rules_;
}
inline const ::pipelines::runtime::v1alpha1::ResourcesRules& IntanceType::_internal_resources_rules(int index) const {
  return resources_rules_.Get(index);
}
inline const ::pipelines::runtime::v1alpha1::ResourcesRules& IntanceType::resources_rules(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.IntanceType.resources_rules)
  return _internal_resources_rules(index);
}
inline ::pipelines::runtime::v1alpha1::ResourcesRules* IntanceType::_internal_add_resources_rules() {
  return resources_rules_.Add();
}
inline ::pipelines::runtime::v1alpha1::ResourcesRules* IntanceType::add_resources_rules() {
  ::pipelines::runtime::v1alpha1::ResourcesRules* _add = _internal_add_resources_rules();
  // @@protoc_insertion_point(field_add:pipelines.runtime.v1alpha1.IntanceType.resources_rules)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::ResourcesRules >&
IntanceType::resources_rules() const {
  // @@protoc_insertion_point(field_list:pipelines.runtime.v1alpha1.IntanceType.resources_rules)
  return resources_rules_;
}

// -------------------------------------------------------------------

// ResourcesRules

// repeated .pipelines.runtime.v1alpha1.Limit limit = 1 [json_name = "limit"];
inline int ResourcesRules::_internal_limit_size() const {
  return limit_.size();
}
inline int ResourcesRules::limit_size() const {
  return _internal_limit_size();
}
inline void ResourcesRules::clear_limit() {
  limit_.Clear();
}
inline ::pipelines::runtime::v1alpha1::Limit* ResourcesRules::mutable_limit(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.ResourcesRules.limit)
  return limit_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::Limit >*
ResourcesRules::mutable_limit() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.runtime.v1alpha1.ResourcesRules.limit)
  return &limit_;
}
inline const ::pipelines::runtime::v1alpha1::Limit& ResourcesRules::_internal_limit(int index) const {
  return limit_.Get(index);
}
inline const ::pipelines::runtime::v1alpha1::Limit& ResourcesRules::limit(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.ResourcesRules.limit)
  return _internal_limit(index);
}
inline ::pipelines::runtime::v1alpha1::Limit* ResourcesRules::_internal_add_limit() {
  return limit_.Add();
}
inline ::pipelines::runtime::v1alpha1::Limit* ResourcesRules::add_limit() {
  ::pipelines::runtime::v1alpha1::Limit* _add = _internal_add_limit();
  // @@protoc_insertion_point(field_add:pipelines.runtime.v1alpha1.ResourcesRules.limit)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::Limit >&
ResourcesRules::limit() const {
  // @@protoc_insertion_point(field_list:pipelines.runtime.v1alpha1.ResourcesRules.limit)
  return limit_;
}

// repeated .pipelines.runtime.v1alpha1.Request request = 2 [json_name = "request"];
inline int ResourcesRules::_internal_request_size() const {
  return request_.size();
}
inline int ResourcesRules::request_size() const {
  return _internal_request_size();
}
inline void ResourcesRules::clear_request() {
  request_.Clear();
}
inline ::pipelines::runtime::v1alpha1::Request* ResourcesRules::mutable_request(int index) {
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.ResourcesRules.request)
  return request_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::Request >*
ResourcesRules::mutable_request() {
  // @@protoc_insertion_point(field_mutable_list:pipelines.runtime.v1alpha1.ResourcesRules.request)
  return &request_;
}
inline const ::pipelines::runtime::v1alpha1::Request& ResourcesRules::_internal_request(int index) const {
  return request_.Get(index);
}
inline const ::pipelines::runtime::v1alpha1::Request& ResourcesRules::request(int index) const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.ResourcesRules.request)
  return _internal_request(index);
}
inline ::pipelines::runtime::v1alpha1::Request* ResourcesRules::_internal_add_request() {
  return request_.Add();
}
inline ::pipelines::runtime::v1alpha1::Request* ResourcesRules::add_request() {
  ::pipelines::runtime::v1alpha1::Request* _add = _internal_add_request();
  // @@protoc_insertion_point(field_add:pipelines.runtime.v1alpha1.ResourcesRules.request)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::pipelines::runtime::v1alpha1::Request >&
ResourcesRules::request() const {
  // @@protoc_insertion_point(field_list:pipelines.runtime.v1alpha1.ResourcesRules.request)
  return request_;
}

// -------------------------------------------------------------------

// Limit

// string cpu = 1 [json_name = "cpu"];
inline void Limit::clear_cpu() {
  cpu_.ClearToEmpty();
}
inline const std::string& Limit::cpu() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Limit.cpu)
  return _internal_cpu();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Limit::set_cpu(ArgT0&& arg0, ArgT... args) {
 
 cpu_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Limit.cpu)
}
inline std::string* Limit::mutable_cpu() {
  std::string* _s = _internal_mutable_cpu();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Limit.cpu)
  return _s;
}
inline const std::string& Limit::_internal_cpu() const {
  return cpu_.Get();
}
inline void Limit::_internal_set_cpu(const std::string& value) {
  
  cpu_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Limit::_internal_mutable_cpu() {
  
  return cpu_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Limit::release_cpu() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Limit.cpu)
  return cpu_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Limit::set_allocated_cpu(std::string* cpu) {
  if (cpu != nullptr) {
    
  } else {
    
  }
  cpu_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpu,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Limit.cpu)
}

// string ram = 2 [json_name = "ram"];
inline void Limit::clear_ram() {
  ram_.ClearToEmpty();
}
inline const std::string& Limit::ram() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Limit.ram)
  return _internal_ram();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Limit::set_ram(ArgT0&& arg0, ArgT... args) {
 
 ram_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Limit.ram)
}
inline std::string* Limit::mutable_ram() {
  std::string* _s = _internal_mutable_ram();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Limit.ram)
  return _s;
}
inline const std::string& Limit::_internal_ram() const {
  return ram_.Get();
}
inline void Limit::_internal_set_ram(const std::string& value) {
  
  ram_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Limit::_internal_mutable_ram() {
  
  return ram_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Limit::release_ram() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Limit.ram)
  return ram_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Limit::set_allocated_ram(std::string* ram) {
  if (ram != nullptr) {
    
  } else {
    
  }
  ram_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ram,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Limit.ram)
}

// -------------------------------------------------------------------

// Request

// string cpu = 1 [json_name = "cpu"];
inline void Request::clear_cpu() {
  cpu_.ClearToEmpty();
}
inline const std::string& Request::cpu() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Request.cpu)
  return _internal_cpu();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_cpu(ArgT0&& arg0, ArgT... args) {
 
 cpu_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Request.cpu)
}
inline std::string* Request::mutable_cpu() {
  std::string* _s = _internal_mutable_cpu();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Request.cpu)
  return _s;
}
inline const std::string& Request::_internal_cpu() const {
  return cpu_.Get();
}
inline void Request::_internal_set_cpu(const std::string& value) {
  
  cpu_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_cpu() {
  
  return cpu_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Request::release_cpu() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Request.cpu)
  return cpu_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Request::set_allocated_cpu(std::string* cpu) {
  if (cpu != nullptr) {
    
  } else {
    
  }
  cpu_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cpu,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Request.cpu)
}

// string ram = 2 [json_name = "ram"];
inline void Request::clear_ram() {
  ram_.ClearToEmpty();
}
inline const std::string& Request::ram() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Request.ram)
  return _internal_ram();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Request::set_ram(ArgT0&& arg0, ArgT... args) {
 
 ram_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Request.ram)
}
inline std::string* Request::mutable_ram() {
  std::string* _s = _internal_mutable_ram();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Request.ram)
  return _s;
}
inline const std::string& Request::_internal_ram() const {
  return ram_.Get();
}
inline void Request::_internal_set_ram(const std::string& value) {
  
  ram_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Request::_internal_mutable_ram() {
  
  return ram_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Request::release_ram() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Request.ram)
  return ram_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Request::set_allocated_ram(std::string* ram) {
  if (ram != nullptr) {
    
  } else {
    
  }
  ram_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ram,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Request.ram)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace runtime
}  // namespace pipelines

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::pipelines::runtime::v1alpha1::TrafficType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::pipelines::runtime::v1alpha1::TrafficType>() {
  return ::pipelines::runtime::v1alpha1::TrafficType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto
