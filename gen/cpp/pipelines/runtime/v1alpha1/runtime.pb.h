// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipelines/runtime/v1alpha1/runtime.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto;
namespace pipelines {
namespace runtime {
namespace v1alpha1 {
class Commands;
struct CommandsDefaultTypeInternal;
extern CommandsDefaultTypeInternal _Commands_default_instance_;
class Integration;
struct IntegrationDefaultTypeInternal;
extern IntegrationDefaultTypeInternal _Integration_default_instance_;
class Runtime;
struct RuntimeDefaultTypeInternal;
extern RuntimeDefaultTypeInternal _Runtime_default_instance_;
class Runtime_EnvVariablesEntry_DoNotUse;
struct Runtime_EnvVariablesEntry_DoNotUseDefaultTypeInternal;
extern Runtime_EnvVariablesEntry_DoNotUseDefaultTypeInternal _Runtime_EnvVariablesEntry_DoNotUse_default_instance_;
}  // namespace v1alpha1
}  // namespace runtime
}  // namespace pipelines
PROTOBUF_NAMESPACE_OPEN
template<> ::pipelines::runtime::v1alpha1::Commands* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::Commands>(Arena*);
template<> ::pipelines::runtime::v1alpha1::Integration* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::Integration>(Arena*);
template<> ::pipelines::runtime::v1alpha1::Runtime* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime>(Arena*);
template<> ::pipelines::runtime::v1alpha1::Runtime_EnvVariablesEntry_DoNotUse* Arena::CreateMaybeMessage<::pipelines::runtime::v1alpha1::Runtime_EnvVariablesEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pipelines {
namespace runtime {
namespace v1alpha1 {

// ===================================================================

class Integration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.Integration) */ {
 public:
  inline Integration() : Integration(nullptr) {}
  ~Integration() override;
  explicit constexpr Integration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Integration(const Integration& from);
  Integration(Integration&& from) noexcept
    : Integration() {
    *this = ::std::move(from);
  }

  inline Integration& operator=(const Integration& from) {
    CopyFrom(from);
    return *this;
  }
  inline Integration& operator=(Integration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Integration& default_instance() {
    return *internal_default_instance();
  }
  static inline const Integration* internal_default_instance() {
    return reinterpret_cast<const Integration*>(
               &_Integration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Integration& a, Integration& b) {
    a.Swap(&b);
  }
  inline void Swap(Integration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Integration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Integration* New() const final {
    return new Integration();
  }

  Integration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Integration>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Integration& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Integration& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Integration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.Integration";
  }
  protected:
  explicit Integration(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIntegrationNameFieldNumber = 1,
    kRepositoryUrlFieldNumber = 2,
  };
  // string integration_name = 1 [json_name = "integrationName"];
  void clear_integration_name();
  const std::string& integration_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_integration_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_integration_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_integration_name();
  void set_allocated_integration_name(std::string* integration_name);
  private:
  const std::string& _internal_integration_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_integration_name(const std::string& value);
  std::string* _internal_mutable_integration_name();
  public:

  // string repository_url = 2 [json_name = "repositoryUrl"];
  void clear_repository_url();
  const std::string& repository_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_repository_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_repository_url();
  PROTOBUF_MUST_USE_RESULT std::string* release_repository_url();
  void set_allocated_repository_url(std::string* repository_url);
  private:
  const std::string& _internal_repository_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_repository_url(const std::string& value);
  std::string* _internal_mutable_repository_url();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.Integration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr integration_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr repository_url_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto;
};
// -------------------------------------------------------------------

class Commands final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.Commands) */ {
 public:
  inline Commands() : Commands(nullptr) {}
  ~Commands() override;
  explicit constexpr Commands(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Commands(const Commands& from);
  Commands(Commands&& from) noexcept
    : Commands() {
    *this = ::std::move(from);
  }

  inline Commands& operator=(const Commands& from) {
    CopyFrom(from);
    return *this;
  }
  inline Commands& operator=(Commands&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Commands& default_instance() {
    return *internal_default_instance();
  }
  static inline const Commands* internal_default_instance() {
    return reinterpret_cast<const Commands*>(
               &_Commands_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Commands& a, Commands& b) {
    a.Swap(&b);
  }
  inline void Swap(Commands* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Commands* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Commands* New() const final {
    return new Commands();
  }

  Commands* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Commands>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Commands& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Commands& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Commands* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.Commands";
  }
  protected:
  explicit Commands(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildCommandFieldNumber = 1,
    kRunCommandFieldNumber = 2,
    kPortFieldNumber = 3,
  };
  // string build_command = 1 [json_name = "buildCommand"];
  void clear_build_command();
  const std::string& build_command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_build_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_build_command();
  PROTOBUF_MUST_USE_RESULT std::string* release_build_command();
  void set_allocated_build_command(std::string* build_command);
  private:
  const std::string& _internal_build_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_build_command(const std::string& value);
  std::string* _internal_mutable_build_command();
  public:

  // string run_command = 2 [json_name = "runCommand"];
  void clear_run_command();
  const std::string& run_command() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_run_command(ArgT0&& arg0, ArgT... args);
  std::string* mutable_run_command();
  PROTOBUF_MUST_USE_RESULT std::string* release_run_command();
  void set_allocated_run_command(std::string* run_command);
  private:
  const std::string& _internal_run_command() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_run_command(const std::string& value);
  std::string* _internal_mutable_run_command();
  public:

  // string port = 3 [json_name = "port"];
  void clear_port();
  const std::string& port() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_port(ArgT0&& arg0, ArgT... args);
  std::string* mutable_port();
  PROTOBUF_MUST_USE_RESULT std::string* release_port();
  void set_allocated_port(std::string* port);
  private:
  const std::string& _internal_port() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_port(const std::string& value);
  std::string* _internal_mutable_port();
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.Commands)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr build_command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr run_command_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto;
};
// -------------------------------------------------------------------

class Runtime_EnvVariablesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Runtime_EnvVariablesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Runtime_EnvVariablesEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  Runtime_EnvVariablesEntry_DoNotUse();
  explicit constexpr Runtime_EnvVariablesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Runtime_EnvVariablesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Runtime_EnvVariablesEntry_DoNotUse& other);
  static const Runtime_EnvVariablesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Runtime_EnvVariablesEntry_DoNotUse*>(&_Runtime_EnvVariablesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.runtime.v1alpha1.Runtime.EnvVariablesEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "pipelines.runtime.v1alpha1.Runtime.EnvVariablesEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Runtime final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.runtime.v1alpha1.Runtime) */ {
 public:
  inline Runtime() : Runtime(nullptr) {}
  ~Runtime() override;
  explicit constexpr Runtime(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Runtime(const Runtime& from);
  Runtime(Runtime&& from) noexcept
    : Runtime() {
    *this = ::std::move(from);
  }

  inline Runtime& operator=(const Runtime& from) {
    CopyFrom(from);
    return *this;
  }
  inline Runtime& operator=(Runtime&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Runtime& default_instance() {
    return *internal_default_instance();
  }
  static inline const Runtime* internal_default_instance() {
    return reinterpret_cast<const Runtime*>(
               &_Runtime_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Runtime& a, Runtime& b) {
    a.Swap(&b);
  }
  inline void Swap(Runtime* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Runtime* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Runtime* New() const final {
    return new Runtime();
  }

  Runtime* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Runtime>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Runtime& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Runtime& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Runtime* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.runtime.v1alpha1.Runtime";
  }
  protected:
  explicit Runtime(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEnvVariablesFieldNumber = 8,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kNamespaceFieldNumber = 3,
    kApplicationIdFieldNumber = 5,
    kWorkspaceIdFieldNumber = 6,
    kIntegrationFieldNumber = 7,
    kCommandsFieldNumber = 9,
    kProjectIdFieldNumber = 4,
  };
  // map<string, string> env_variables = 8 [json_name = "envVariables"];
  int env_variables_size() const;
  private:
  int _internal_env_variables_size() const;
  public:
  void clear_env_variables();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_env_variables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_env_variables();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      env_variables() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_env_variables();

  // string id = 1 [json_name = "id"];
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2 [json_name = "name"];
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string namespace = 3 [json_name = "namespace"];
  void clear_namespace_();
  const std::string& namespace_() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_namespace_(ArgT0&& arg0, ArgT... args);
  std::string* mutable_namespace_();
  PROTOBUF_MUST_USE_RESULT std::string* release_namespace_();
  void set_allocated_namespace_(std::string* namespace_);
  private:
  const std::string& _internal_namespace_() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_namespace_(const std::string& value);
  std::string* _internal_mutable_namespace_();
  public:

  // string application_id = 5 [json_name = "applicationId"];
  void clear_application_id();
  const std::string& application_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_application_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_application_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_application_id();
  void set_allocated_application_id(std::string* application_id);
  private:
  const std::string& _internal_application_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_application_id(const std::string& value);
  std::string* _internal_mutable_application_id();
  public:

  // string workspace_id = 6 [json_name = "workspaceId"];
  void clear_workspace_id();
  const std::string& workspace_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_workspace_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_workspace_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_workspace_id();
  void set_allocated_workspace_id(std::string* workspace_id);
  private:
  const std::string& _internal_workspace_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_workspace_id(const std::string& value);
  std::string* _internal_mutable_workspace_id();
  public:

  // .pipelines.runtime.v1alpha1.Integration integration = 7 [json_name = "integration"];
  bool has_integration() const;
  private:
  bool _internal_has_integration() const;
  public:
  void clear_integration();
  const ::pipelines::runtime::v1alpha1::Integration& integration() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::runtime::v1alpha1::Integration* release_integration();
  ::pipelines::runtime::v1alpha1::Integration* mutable_integration();
  void set_allocated_integration(::pipelines::runtime::v1alpha1::Integration* integration);
  private:
  const ::pipelines::runtime::v1alpha1::Integration& _internal_integration() const;
  ::pipelines::runtime::v1alpha1::Integration* _internal_mutable_integration();
  public:
  void unsafe_arena_set_allocated_integration(
      ::pipelines::runtime::v1alpha1::Integration* integration);
  ::pipelines::runtime::v1alpha1::Integration* unsafe_arena_release_integration();

  // .pipelines.runtime.v1alpha1.Commands commands = 9 [json_name = "commands"];
  bool has_commands() const;
  private:
  bool _internal_has_commands() const;
  public:
  void clear_commands();
  const ::pipelines::runtime::v1alpha1::Commands& commands() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::runtime::v1alpha1::Commands* release_commands();
  ::pipelines::runtime::v1alpha1::Commands* mutable_commands();
  void set_allocated_commands(::pipelines::runtime::v1alpha1::Commands* commands);
  private:
  const ::pipelines::runtime::v1alpha1::Commands& _internal_commands() const;
  ::pipelines::runtime::v1alpha1::Commands* _internal_mutable_commands();
  public:
  void unsafe_arena_set_allocated_commands(
      ::pipelines::runtime::v1alpha1::Commands* commands);
  ::pipelines::runtime::v1alpha1::Commands* unsafe_arena_release_commands();

  // uint32 project_id = 4 [json_name = "projectId"];
  void clear_project_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id() const;
  void set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_project_id() const;
  void _internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:pipelines.runtime.v1alpha1.Runtime)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Runtime_EnvVariablesEntry_DoNotUse,
      std::string, std::string,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> env_variables_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr namespace__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr application_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr workspace_id_;
  ::pipelines::runtime::v1alpha1::Integration* integration_;
  ::pipelines::runtime::v1alpha1::Commands* commands_;
  ::PROTOBUF_NAMESPACE_ID::uint32 project_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Integration

// string integration_name = 1 [json_name = "integrationName"];
inline void Integration::clear_integration_name() {
  integration_name_.ClearToEmpty();
}
inline const std::string& Integration::integration_name() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Integration.integration_name)
  return _internal_integration_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Integration::set_integration_name(ArgT0&& arg0, ArgT... args) {
 
 integration_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Integration.integration_name)
}
inline std::string* Integration::mutable_integration_name() {
  std::string* _s = _internal_mutable_integration_name();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Integration.integration_name)
  return _s;
}
inline const std::string& Integration::_internal_integration_name() const {
  return integration_name_.Get();
}
inline void Integration::_internal_set_integration_name(const std::string& value) {
  
  integration_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Integration::_internal_mutable_integration_name() {
  
  return integration_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Integration::release_integration_name() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Integration.integration_name)
  return integration_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Integration::set_allocated_integration_name(std::string* integration_name) {
  if (integration_name != nullptr) {
    
  } else {
    
  }
  integration_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), integration_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Integration.integration_name)
}

// string repository_url = 2 [json_name = "repositoryUrl"];
inline void Integration::clear_repository_url() {
  repository_url_.ClearToEmpty();
}
inline const std::string& Integration::repository_url() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Integration.repository_url)
  return _internal_repository_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Integration::set_repository_url(ArgT0&& arg0, ArgT... args) {
 
 repository_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Integration.repository_url)
}
inline std::string* Integration::mutable_repository_url() {
  std::string* _s = _internal_mutable_repository_url();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Integration.repository_url)
  return _s;
}
inline const std::string& Integration::_internal_repository_url() const {
  return repository_url_.Get();
}
inline void Integration::_internal_set_repository_url(const std::string& value) {
  
  repository_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Integration::_internal_mutable_repository_url() {
  
  return repository_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Integration::release_repository_url() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Integration.repository_url)
  return repository_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Integration::set_allocated_repository_url(std::string* repository_url) {
  if (repository_url != nullptr) {
    
  } else {
    
  }
  repository_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), repository_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Integration.repository_url)
}

// -------------------------------------------------------------------

// Commands

// string build_command = 1 [json_name = "buildCommand"];
inline void Commands::clear_build_command() {
  build_command_.ClearToEmpty();
}
inline const std::string& Commands::build_command() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Commands.build_command)
  return _internal_build_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Commands::set_build_command(ArgT0&& arg0, ArgT... args) {
 
 build_command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Commands.build_command)
}
inline std::string* Commands::mutable_build_command() {
  std::string* _s = _internal_mutable_build_command();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Commands.build_command)
  return _s;
}
inline const std::string& Commands::_internal_build_command() const {
  return build_command_.Get();
}
inline void Commands::_internal_set_build_command(const std::string& value) {
  
  build_command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Commands::_internal_mutable_build_command() {
  
  return build_command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Commands::release_build_command() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Commands.build_command)
  return build_command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Commands::set_allocated_build_command(std::string* build_command) {
  if (build_command != nullptr) {
    
  } else {
    
  }
  build_command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), build_command,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Commands.build_command)
}

// string run_command = 2 [json_name = "runCommand"];
inline void Commands::clear_run_command() {
  run_command_.ClearToEmpty();
}
inline const std::string& Commands::run_command() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Commands.run_command)
  return _internal_run_command();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Commands::set_run_command(ArgT0&& arg0, ArgT... args) {
 
 run_command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Commands.run_command)
}
inline std::string* Commands::mutable_run_command() {
  std::string* _s = _internal_mutable_run_command();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Commands.run_command)
  return _s;
}
inline const std::string& Commands::_internal_run_command() const {
  return run_command_.Get();
}
inline void Commands::_internal_set_run_command(const std::string& value) {
  
  run_command_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Commands::_internal_mutable_run_command() {
  
  return run_command_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Commands::release_run_command() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Commands.run_command)
  return run_command_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Commands::set_allocated_run_command(std::string* run_command) {
  if (run_command != nullptr) {
    
  } else {
    
  }
  run_command_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), run_command,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Commands.run_command)
}

// string port = 3 [json_name = "port"];
inline void Commands::clear_port() {
  port_.ClearToEmpty();
}
inline const std::string& Commands::port() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Commands.port)
  return _internal_port();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Commands::set_port(ArgT0&& arg0, ArgT... args) {
 
 port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Commands.port)
}
inline std::string* Commands::mutable_port() {
  std::string* _s = _internal_mutable_port();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Commands.port)
  return _s;
}
inline const std::string& Commands::_internal_port() const {
  return port_.Get();
}
inline void Commands::_internal_set_port(const std::string& value) {
  
  port_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Commands::_internal_mutable_port() {
  
  return port_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Commands::release_port() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Commands.port)
  return port_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Commands::set_allocated_port(std::string* port) {
  if (port != nullptr) {
    
  } else {
    
  }
  port_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Commands.port)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Runtime

// string id = 1 [json_name = "id"];
inline void Runtime::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& Runtime::id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.id)
}
inline std::string* Runtime::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.id)
  return _s;
}
inline const std::string& Runtime::_internal_id() const {
  return id_.Get();
}
inline void Runtime::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.id)
}

// string name = 2 [json_name = "name"];
inline void Runtime::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Runtime::name() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.name)
}
inline std::string* Runtime::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.name)
  return _s;
}
inline const std::string& Runtime::_internal_name() const {
  return name_.Get();
}
inline void Runtime::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_name() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.name)
}

// string namespace = 3 [json_name = "namespace"];
inline void Runtime::clear_namespace_() {
  namespace__.ClearToEmpty();
}
inline const std::string& Runtime::namespace_() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.namespace)
  return _internal_namespace_();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_namespace_(ArgT0&& arg0, ArgT... args) {
 
 namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.namespace)
}
inline std::string* Runtime::mutable_namespace_() {
  std::string* _s = _internal_mutable_namespace_();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.namespace)
  return _s;
}
inline const std::string& Runtime::_internal_namespace_() const {
  return namespace__.Get();
}
inline void Runtime::_internal_set_namespace_(const std::string& value) {
  
  namespace__.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_namespace_() {
  
  return namespace__.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_namespace_() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.namespace)
  return namespace__.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_namespace_(std::string* namespace_) {
  if (namespace_ != nullptr) {
    
  } else {
    
  }
  namespace__.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), namespace_,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.namespace)
}

// uint32 project_id = 4 [json_name = "projectId"];
inline void Runtime::clear_project_id() {
  project_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Runtime::_internal_project_id() const {
  return project_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Runtime::project_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.project_id)
  return _internal_project_id();
}
inline void Runtime::_internal_set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  project_id_ = value;
}
inline void Runtime::set_project_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_project_id(value);
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.project_id)
}

// string application_id = 5 [json_name = "applicationId"];
inline void Runtime::clear_application_id() {
  application_id_.ClearToEmpty();
}
inline const std::string& Runtime::application_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.application_id)
  return _internal_application_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_application_id(ArgT0&& arg0, ArgT... args) {
 
 application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.application_id)
}
inline std::string* Runtime::mutable_application_id() {
  std::string* _s = _internal_mutable_application_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.application_id)
  return _s;
}
inline const std::string& Runtime::_internal_application_id() const {
  return application_id_.Get();
}
inline void Runtime::_internal_set_application_id(const std::string& value) {
  
  application_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_application_id() {
  
  return application_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_application_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.application_id)
  return application_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_application_id(std::string* application_id) {
  if (application_id != nullptr) {
    
  } else {
    
  }
  application_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), application_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.application_id)
}

// string workspace_id = 6 [json_name = "workspaceId"];
inline void Runtime::clear_workspace_id() {
  workspace_id_.ClearToEmpty();
}
inline const std::string& Runtime::workspace_id() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.workspace_id)
  return _internal_workspace_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Runtime::set_workspace_id(ArgT0&& arg0, ArgT... args) {
 
 workspace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.runtime.v1alpha1.Runtime.workspace_id)
}
inline std::string* Runtime::mutable_workspace_id() {
  std::string* _s = _internal_mutable_workspace_id();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.workspace_id)
  return _s;
}
inline const std::string& Runtime::_internal_workspace_id() const {
  return workspace_id_.Get();
}
inline void Runtime::_internal_set_workspace_id(const std::string& value) {
  
  workspace_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Runtime::_internal_mutable_workspace_id() {
  
  return workspace_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Runtime::release_workspace_id() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.workspace_id)
  return workspace_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Runtime::set_allocated_workspace_id(std::string* workspace_id) {
  if (workspace_id != nullptr) {
    
  } else {
    
  }
  workspace_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), workspace_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.workspace_id)
}

// .pipelines.runtime.v1alpha1.Integration integration = 7 [json_name = "integration"];
inline bool Runtime::_internal_has_integration() const {
  return this != internal_default_instance() && integration_ != nullptr;
}
inline bool Runtime::has_integration() const {
  return _internal_has_integration();
}
inline void Runtime::clear_integration() {
  if (GetArenaForAllocation() == nullptr && integration_ != nullptr) {
    delete integration_;
  }
  integration_ = nullptr;
}
inline const ::pipelines::runtime::v1alpha1::Integration& Runtime::_internal_integration() const {
  const ::pipelines::runtime::v1alpha1::Integration* p = integration_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::runtime::v1alpha1::Integration&>(
      ::pipelines::runtime::v1alpha1::_Integration_default_instance_);
}
inline const ::pipelines::runtime::v1alpha1::Integration& Runtime::integration() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.integration)
  return _internal_integration();
}
inline void Runtime::unsafe_arena_set_allocated_integration(
    ::pipelines::runtime::v1alpha1::Integration* integration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(integration_);
  }
  integration_ = integration;
  if (integration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.runtime.v1alpha1.Runtime.integration)
}
inline ::pipelines::runtime::v1alpha1::Integration* Runtime::release_integration() {
  
  ::pipelines::runtime::v1alpha1::Integration* temp = integration_;
  integration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Integration* Runtime::unsafe_arena_release_integration() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.integration)
  
  ::pipelines::runtime::v1alpha1::Integration* temp = integration_;
  integration_ = nullptr;
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Integration* Runtime::_internal_mutable_integration() {
  
  if (integration_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::runtime::v1alpha1::Integration>(GetArenaForAllocation());
    integration_ = p;
  }
  return integration_;
}
inline ::pipelines::runtime::v1alpha1::Integration* Runtime::mutable_integration() {
  ::pipelines::runtime::v1alpha1::Integration* _msg = _internal_mutable_integration();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.integration)
  return _msg;
}
inline void Runtime::set_allocated_integration(::pipelines::runtime::v1alpha1::Integration* integration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete integration_;
  }
  if (integration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pipelines::runtime::v1alpha1::Integration>::GetOwningArena(integration);
    if (message_arena != submessage_arena) {
      integration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, integration, submessage_arena);
    }
    
  } else {
    
  }
  integration_ = integration;
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.integration)
}

// map<string, string> env_variables = 8 [json_name = "envVariables"];
inline int Runtime::_internal_env_variables_size() const {
  return env_variables_.size();
}
inline int Runtime::env_variables_size() const {
  return _internal_env_variables_size();
}
inline void Runtime::clear_env_variables() {
  env_variables_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Runtime::_internal_env_variables() const {
  return env_variables_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
Runtime::env_variables() const {
  // @@protoc_insertion_point(field_map:pipelines.runtime.v1alpha1.Runtime.env_variables)
  return _internal_env_variables();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Runtime::_internal_mutable_env_variables() {
  return env_variables_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
Runtime::mutable_env_variables() {
  // @@protoc_insertion_point(field_mutable_map:pipelines.runtime.v1alpha1.Runtime.env_variables)
  return _internal_mutable_env_variables();
}

// .pipelines.runtime.v1alpha1.Commands commands = 9 [json_name = "commands"];
inline bool Runtime::_internal_has_commands() const {
  return this != internal_default_instance() && commands_ != nullptr;
}
inline bool Runtime::has_commands() const {
  return _internal_has_commands();
}
inline void Runtime::clear_commands() {
  if (GetArenaForAllocation() == nullptr && commands_ != nullptr) {
    delete commands_;
  }
  commands_ = nullptr;
}
inline const ::pipelines::runtime::v1alpha1::Commands& Runtime::_internal_commands() const {
  const ::pipelines::runtime::v1alpha1::Commands* p = commands_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::runtime::v1alpha1::Commands&>(
      ::pipelines::runtime::v1alpha1::_Commands_default_instance_);
}
inline const ::pipelines::runtime::v1alpha1::Commands& Runtime::commands() const {
  // @@protoc_insertion_point(field_get:pipelines.runtime.v1alpha1.Runtime.commands)
  return _internal_commands();
}
inline void Runtime::unsafe_arena_set_allocated_commands(
    ::pipelines::runtime::v1alpha1::Commands* commands) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(commands_);
  }
  commands_ = commands;
  if (commands) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.runtime.v1alpha1.Runtime.commands)
}
inline ::pipelines::runtime::v1alpha1::Commands* Runtime::release_commands() {
  
  ::pipelines::runtime::v1alpha1::Commands* temp = commands_;
  commands_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Commands* Runtime::unsafe_arena_release_commands() {
  // @@protoc_insertion_point(field_release:pipelines.runtime.v1alpha1.Runtime.commands)
  
  ::pipelines::runtime::v1alpha1::Commands* temp = commands_;
  commands_ = nullptr;
  return temp;
}
inline ::pipelines::runtime::v1alpha1::Commands* Runtime::_internal_mutable_commands() {
  
  if (commands_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::runtime::v1alpha1::Commands>(GetArenaForAllocation());
    commands_ = p;
  }
  return commands_;
}
inline ::pipelines::runtime::v1alpha1::Commands* Runtime::mutable_commands() {
  ::pipelines::runtime::v1alpha1::Commands* _msg = _internal_mutable_commands();
  // @@protoc_insertion_point(field_mutable:pipelines.runtime.v1alpha1.Runtime.commands)
  return _msg;
}
inline void Runtime::set_allocated_commands(::pipelines::runtime::v1alpha1::Commands* commands) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete commands_;
  }
  if (commands) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::pipelines::runtime::v1alpha1::Commands>::GetOwningArena(commands);
    if (message_arena != submessage_arena) {
      commands = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, commands, submessage_arena);
    }
    
  } else {
    
  }
  commands_ = commands;
  // @@protoc_insertion_point(field_set_allocated:pipelines.runtime.v1alpha1.Runtime.commands)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace runtime
}  // namespace pipelines

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pipelines_2fruntime_2fv1alpha1_2fruntime_2eproto
