// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pipelines/environment/v1alpha1/environment_api.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pipelines_2fenvironment_2fv1alpha1_2fenvironment_5fapi_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pipelines_2fenvironment_2fv1alpha1_2fenvironment_5fapi_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "pipelines/environment/v1alpha1/environment.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pipelines_2fenvironment_2fv1alpha1_2fenvironment_5fapi_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pipelines_2fenvironment_2fv1alpha1_2fenvironment_5fapi_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pipelines_2fenvironment_2fv1alpha1_2fenvironment_5fapi_2eproto;
namespace pipelines {
namespace environment {
namespace v1alpha1 {
class CreateEnvironmentRequest;
struct CreateEnvironmentRequestDefaultTypeInternal;
extern CreateEnvironmentRequestDefaultTypeInternal _CreateEnvironmentRequest_default_instance_;
class CreateEnvironmentResponse;
struct CreateEnvironmentResponseDefaultTypeInternal;
extern CreateEnvironmentResponseDefaultTypeInternal _CreateEnvironmentResponse_default_instance_;
}  // namespace v1alpha1
}  // namespace environment
}  // namespace pipelines
PROTOBUF_NAMESPACE_OPEN
template<> ::pipelines::environment::v1alpha1::CreateEnvironmentRequest* Arena::CreateMaybeMessage<::pipelines::environment::v1alpha1::CreateEnvironmentRequest>(Arena*);
template<> ::pipelines::environment::v1alpha1::CreateEnvironmentResponse* Arena::CreateMaybeMessage<::pipelines::environment::v1alpha1::CreateEnvironmentResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pipelines {
namespace environment {
namespace v1alpha1 {

// ===================================================================

class CreateEnvironmentRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.environment.v1alpha1.CreateEnvironmentRequest) */ {
 public:
  inline CreateEnvironmentRequest() : CreateEnvironmentRequest(nullptr) {}
  ~CreateEnvironmentRequest() override;
  explicit constexpr CreateEnvironmentRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateEnvironmentRequest(const CreateEnvironmentRequest& from);
  CreateEnvironmentRequest(CreateEnvironmentRequest&& from) noexcept
    : CreateEnvironmentRequest() {
    *this = ::std::move(from);
  }

  inline CreateEnvironmentRequest& operator=(const CreateEnvironmentRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateEnvironmentRequest& operator=(CreateEnvironmentRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateEnvironmentRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateEnvironmentRequest* internal_default_instance() {
    return reinterpret_cast<const CreateEnvironmentRequest*>(
               &_CreateEnvironmentRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(CreateEnvironmentRequest& a, CreateEnvironmentRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateEnvironmentRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateEnvironmentRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateEnvironmentRequest* New() const final {
    return new CreateEnvironmentRequest();
  }

  CreateEnvironmentRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateEnvironmentRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateEnvironmentRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateEnvironmentRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateEnvironmentRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.environment.v1alpha1.CreateEnvironmentRequest";
  }
  protected:
  explicit CreateEnvironmentRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnvironmentFieldNumber = 1,
  };
  // .pipelines.environment.v1alpha1.Environment environment = 1 [json_name = "environment"];
  bool has_environment() const;
  private:
  bool _internal_has_environment() const;
  public:
  void clear_environment();
  const ::pipelines::environment::v1alpha1::Environment& environment() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::environment::v1alpha1::Environment* release_environment();
  ::pipelines::environment::v1alpha1::Environment* mutable_environment();
  void set_allocated_environment(::pipelines::environment::v1alpha1::Environment* environment);
  private:
  const ::pipelines::environment::v1alpha1::Environment& _internal_environment() const;
  ::pipelines::environment::v1alpha1::Environment* _internal_mutable_environment();
  public:
  void unsafe_arena_set_allocated_environment(
      ::pipelines::environment::v1alpha1::Environment* environment);
  ::pipelines::environment::v1alpha1::Environment* unsafe_arena_release_environment();

  // @@protoc_insertion_point(class_scope:pipelines.environment.v1alpha1.CreateEnvironmentRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::pipelines::environment::v1alpha1::Environment* environment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fenvironment_2fv1alpha1_2fenvironment_5fapi_2eproto;
};
// -------------------------------------------------------------------

class CreateEnvironmentResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pipelines.environment.v1alpha1.CreateEnvironmentResponse) */ {
 public:
  inline CreateEnvironmentResponse() : CreateEnvironmentResponse(nullptr) {}
  ~CreateEnvironmentResponse() override;
  explicit constexpr CreateEnvironmentResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateEnvironmentResponse(const CreateEnvironmentResponse& from);
  CreateEnvironmentResponse(CreateEnvironmentResponse&& from) noexcept
    : CreateEnvironmentResponse() {
    *this = ::std::move(from);
  }

  inline CreateEnvironmentResponse& operator=(const CreateEnvironmentResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateEnvironmentResponse& operator=(CreateEnvironmentResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateEnvironmentResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateEnvironmentResponse* internal_default_instance() {
    return reinterpret_cast<const CreateEnvironmentResponse*>(
               &_CreateEnvironmentResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(CreateEnvironmentResponse& a, CreateEnvironmentResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateEnvironmentResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateEnvironmentResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CreateEnvironmentResponse* New() const final {
    return new CreateEnvironmentResponse();
  }

  CreateEnvironmentResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CreateEnvironmentResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateEnvironmentResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const CreateEnvironmentResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateEnvironmentResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pipelines.environment.v1alpha1.CreateEnvironmentResponse";
  }
  protected:
  explicit CreateEnvironmentResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStatusFieldNumber = 2,
    kEnvironmentFieldNumber = 1,
  };
  // string status = 2 [json_name = "status"];
  void clear_status();
  const std::string& status() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_status(ArgT0&& arg0, ArgT... args);
  std::string* mutable_status();
  PROTOBUF_MUST_USE_RESULT std::string* release_status();
  void set_allocated_status(std::string* status);
  private:
  const std::string& _internal_status() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_status(const std::string& value);
  std::string* _internal_mutable_status();
  public:

  // .pipelines.environment.v1alpha1.Environment environment = 1 [json_name = "environment"];
  bool has_environment() const;
  private:
  bool _internal_has_environment() const;
  public:
  void clear_environment();
  const ::pipelines::environment::v1alpha1::Environment& environment() const;
  PROTOBUF_MUST_USE_RESULT ::pipelines::environment::v1alpha1::Environment* release_environment();
  ::pipelines::environment::v1alpha1::Environment* mutable_environment();
  void set_allocated_environment(::pipelines::environment::v1alpha1::Environment* environment);
  private:
  const ::pipelines::environment::v1alpha1::Environment& _internal_environment() const;
  ::pipelines::environment::v1alpha1::Environment* _internal_mutable_environment();
  public:
  void unsafe_arena_set_allocated_environment(
      ::pipelines::environment::v1alpha1::Environment* environment);
  ::pipelines::environment::v1alpha1::Environment* unsafe_arena_release_environment();

  // @@protoc_insertion_point(class_scope:pipelines.environment.v1alpha1.CreateEnvironmentResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr status_;
  ::pipelines::environment::v1alpha1::Environment* environment_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pipelines_2fenvironment_2fv1alpha1_2fenvironment_5fapi_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CreateEnvironmentRequest

// .pipelines.environment.v1alpha1.Environment environment = 1 [json_name = "environment"];
inline bool CreateEnvironmentRequest::_internal_has_environment() const {
  return this != internal_default_instance() && environment_ != nullptr;
}
inline bool CreateEnvironmentRequest::has_environment() const {
  return _internal_has_environment();
}
inline const ::pipelines::environment::v1alpha1::Environment& CreateEnvironmentRequest::_internal_environment() const {
  const ::pipelines::environment::v1alpha1::Environment* p = environment_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::environment::v1alpha1::Environment&>(
      ::pipelines::environment::v1alpha1::_Environment_default_instance_);
}
inline const ::pipelines::environment::v1alpha1::Environment& CreateEnvironmentRequest::environment() const {
  // @@protoc_insertion_point(field_get:pipelines.environment.v1alpha1.CreateEnvironmentRequest.environment)
  return _internal_environment();
}
inline void CreateEnvironmentRequest::unsafe_arena_set_allocated_environment(
    ::pipelines::environment::v1alpha1::Environment* environment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(environment_);
  }
  environment_ = environment;
  if (environment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.environment.v1alpha1.CreateEnvironmentRequest.environment)
}
inline ::pipelines::environment::v1alpha1::Environment* CreateEnvironmentRequest::release_environment() {
  
  ::pipelines::environment::v1alpha1::Environment* temp = environment_;
  environment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::environment::v1alpha1::Environment* CreateEnvironmentRequest::unsafe_arena_release_environment() {
  // @@protoc_insertion_point(field_release:pipelines.environment.v1alpha1.CreateEnvironmentRequest.environment)
  
  ::pipelines::environment::v1alpha1::Environment* temp = environment_;
  environment_ = nullptr;
  return temp;
}
inline ::pipelines::environment::v1alpha1::Environment* CreateEnvironmentRequest::_internal_mutable_environment() {
  
  if (environment_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::environment::v1alpha1::Environment>(GetArenaForAllocation());
    environment_ = p;
  }
  return environment_;
}
inline ::pipelines::environment::v1alpha1::Environment* CreateEnvironmentRequest::mutable_environment() {
  ::pipelines::environment::v1alpha1::Environment* _msg = _internal_mutable_environment();
  // @@protoc_insertion_point(field_mutable:pipelines.environment.v1alpha1.CreateEnvironmentRequest.environment)
  return _msg;
}
inline void CreateEnvironmentRequest::set_allocated_environment(::pipelines::environment::v1alpha1::Environment* environment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(environment_);
  }
  if (environment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(environment));
    if (message_arena != submessage_arena) {
      environment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, environment, submessage_arena);
    }
    
  } else {
    
  }
  environment_ = environment;
  // @@protoc_insertion_point(field_set_allocated:pipelines.environment.v1alpha1.CreateEnvironmentRequest.environment)
}

// -------------------------------------------------------------------

// CreateEnvironmentResponse

// .pipelines.environment.v1alpha1.Environment environment = 1 [json_name = "environment"];
inline bool CreateEnvironmentResponse::_internal_has_environment() const {
  return this != internal_default_instance() && environment_ != nullptr;
}
inline bool CreateEnvironmentResponse::has_environment() const {
  return _internal_has_environment();
}
inline const ::pipelines::environment::v1alpha1::Environment& CreateEnvironmentResponse::_internal_environment() const {
  const ::pipelines::environment::v1alpha1::Environment* p = environment_;
  return p != nullptr ? *p : reinterpret_cast<const ::pipelines::environment::v1alpha1::Environment&>(
      ::pipelines::environment::v1alpha1::_Environment_default_instance_);
}
inline const ::pipelines::environment::v1alpha1::Environment& CreateEnvironmentResponse::environment() const {
  // @@protoc_insertion_point(field_get:pipelines.environment.v1alpha1.CreateEnvironmentResponse.environment)
  return _internal_environment();
}
inline void CreateEnvironmentResponse::unsafe_arena_set_allocated_environment(
    ::pipelines::environment::v1alpha1::Environment* environment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(environment_);
  }
  environment_ = environment;
  if (environment) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:pipelines.environment.v1alpha1.CreateEnvironmentResponse.environment)
}
inline ::pipelines::environment::v1alpha1::Environment* CreateEnvironmentResponse::release_environment() {
  
  ::pipelines::environment::v1alpha1::Environment* temp = environment_;
  environment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::pipelines::environment::v1alpha1::Environment* CreateEnvironmentResponse::unsafe_arena_release_environment() {
  // @@protoc_insertion_point(field_release:pipelines.environment.v1alpha1.CreateEnvironmentResponse.environment)
  
  ::pipelines::environment::v1alpha1::Environment* temp = environment_;
  environment_ = nullptr;
  return temp;
}
inline ::pipelines::environment::v1alpha1::Environment* CreateEnvironmentResponse::_internal_mutable_environment() {
  
  if (environment_ == nullptr) {
    auto* p = CreateMaybeMessage<::pipelines::environment::v1alpha1::Environment>(GetArenaForAllocation());
    environment_ = p;
  }
  return environment_;
}
inline ::pipelines::environment::v1alpha1::Environment* CreateEnvironmentResponse::mutable_environment() {
  ::pipelines::environment::v1alpha1::Environment* _msg = _internal_mutable_environment();
  // @@protoc_insertion_point(field_mutable:pipelines.environment.v1alpha1.CreateEnvironmentResponse.environment)
  return _msg;
}
inline void CreateEnvironmentResponse::set_allocated_environment(::pipelines::environment::v1alpha1::Environment* environment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(environment_);
  }
  if (environment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(environment));
    if (message_arena != submessage_arena) {
      environment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, environment, submessage_arena);
    }
    
  } else {
    
  }
  environment_ = environment;
  // @@protoc_insertion_point(field_set_allocated:pipelines.environment.v1alpha1.CreateEnvironmentResponse.environment)
}

// string status = 2 [json_name = "status"];
inline void CreateEnvironmentResponse::clear_status() {
  status_.ClearToEmpty();
}
inline const std::string& CreateEnvironmentResponse::status() const {
  // @@protoc_insertion_point(field_get:pipelines.environment.v1alpha1.CreateEnvironmentResponse.status)
  return _internal_status();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateEnvironmentResponse::set_status(ArgT0&& arg0, ArgT... args) {
 
 status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:pipelines.environment.v1alpha1.CreateEnvironmentResponse.status)
}
inline std::string* CreateEnvironmentResponse::mutable_status() {
  std::string* _s = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:pipelines.environment.v1alpha1.CreateEnvironmentResponse.status)
  return _s;
}
inline const std::string& CreateEnvironmentResponse::_internal_status() const {
  return status_.Get();
}
inline void CreateEnvironmentResponse::_internal_set_status(const std::string& value) {
  
  status_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CreateEnvironmentResponse::_internal_mutable_status() {
  
  return status_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CreateEnvironmentResponse::release_status() {
  // @@protoc_insertion_point(field_release:pipelines.environment.v1alpha1.CreateEnvironmentResponse.status)
  return status_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CreateEnvironmentResponse::set_allocated_status(std::string* status) {
  if (status != nullptr) {
    
  } else {
    
  }
  status_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), status,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:pipelines.environment.v1alpha1.CreateEnvironmentResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1alpha1
}  // namespace environment
}  // namespace pipelines

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pipelines_2fenvironment_2fv1alpha1_2fenvironment_5fapi_2eproto
