// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: pipelines/environment/v1alpha1/environment_api.proto
#ifndef GRPC_pipelines_2fenvironment_2fv1alpha1_2fenvironment_5fapi_2eproto__INCLUDED
#define GRPC_pipelines_2fenvironment_2fv1alpha1_2fenvironment_5fapi_2eproto__INCLUDED

#include "pipelines/environment/v1alpha1/environment_api.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc {
class CompletionQueue;
class Channel;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc

namespace pipelines {
namespace environment {
namespace v1alpha1 {

class EnvironmentAPIService final {
 public:
  static constexpr char const* service_full_name() {
    return "pipelines.environment.v1alpha1.EnvironmentAPIService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status CreateEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateEnvironmentRequest& request, ::pipelines::environment::v1alpha1::CreateEnvironmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::CreateEnvironmentResponse>> AsyncCreateEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::CreateEnvironmentResponse>>(AsyncCreateEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::CreateEnvironmentResponse>> PrepareAsyncCreateEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::CreateEnvironmentResponse>>(PrepareAsyncCreateEnvironmentRaw(context, request, cq));
    }
    virtual ::grpc::Status GetOneEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetOneEnvironmentRequest& request, ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse>> AsyncGetOneEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetOneEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse>>(AsyncGetOneEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse>> PrepareAsyncGetOneEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetOneEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse>>(PrepareAsyncGetOneEnvironmentRaw(context, request, cq));
    }
    virtual ::grpc::Status UpdateEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::UpdateEnvironmentRequest& request, ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse>> AsyncUpdateEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::UpdateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse>>(AsyncUpdateEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse>> PrepareAsyncUpdateEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::UpdateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse>>(PrepareAsyncUpdateEnvironmentRaw(context, request, cq));
    }
    virtual ::grpc::Status ListEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListEnvironmentRequest& request, ::pipelines::environment::v1alpha1::ListEnvironmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::ListEnvironmentResponse>> AsyncListEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::ListEnvironmentResponse>>(AsyncListEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::ListEnvironmentResponse>> PrepareAsyncListEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::ListEnvironmentResponse>>(PrepareAsyncListEnvironmentRaw(context, request, cq));
    }
    virtual ::grpc::Status DeleteEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::DeleteEnvironmentRequest& request, ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse>> AsyncDeleteEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::DeleteEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse>>(AsyncDeleteEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse>> PrepareAsyncDeleteEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::DeleteEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse>>(PrepareAsyncDeleteEnvironmentRaw(context, request, cq));
    }
    virtual ::grpc::Status GetByNameEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetByNameEnvironmentRequest& request, ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse>> AsyncGetByNameEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetByNameEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse>>(AsyncGetByNameEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse>> PrepareAsyncGetByNameEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetByNameEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse>>(PrepareAsyncGetByNameEnvironmentRaw(context, request, cq));
    }
    virtual ::grpc::Status CreateVclusterOrganization(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateVclusterOrganizationRequest& request, ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse>> AsyncCreateVclusterOrganization(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateVclusterOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse>>(AsyncCreateVclusterOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse>> PrepareAsyncCreateVclusterOrganization(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateVclusterOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse>>(PrepareAsyncCreateVclusterOrganizationRaw(context, request, cq));
    }
    virtual ::grpc::Status ListAllEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListAllEnvironmentRequest& request, ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse>> AsyncListAllEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListAllEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse>>(AsyncListAllEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse>> PrepareAsyncListAllEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListAllEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse>>(PrepareAsyncListAllEnvironmentRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void CreateEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateEnvironmentRequest* request, ::pipelines::environment::v1alpha1::CreateEnvironmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOneEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetOneEnvironmentRequest* request, ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::UpdateEnvironmentRequest* request, ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListEnvironmentRequest* request, ::pipelines::environment::v1alpha1::ListEnvironmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::DeleteEnvironmentRequest* request, ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetByNameEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetByNameEnvironmentRequest* request, ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateVclusterOrganization(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateVclusterOrganizationRequest* request, ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListAllEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListAllEnvironmentRequest* request, ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse* response, std::function<void(::grpc::Status)>) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::CreateEnvironmentResponse>* AsyncCreateEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::CreateEnvironmentResponse>* PrepareAsyncCreateEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse>* AsyncGetOneEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetOneEnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse>* PrepareAsyncGetOneEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetOneEnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse>* AsyncUpdateEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::UpdateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse>* PrepareAsyncUpdateEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::UpdateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::ListEnvironmentResponse>* AsyncListEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListEnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::ListEnvironmentResponse>* PrepareAsyncListEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListEnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse>* AsyncDeleteEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::DeleteEnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse>* PrepareAsyncDeleteEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::DeleteEnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse>* AsyncGetByNameEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetByNameEnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse>* PrepareAsyncGetByNameEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetByNameEnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse>* AsyncCreateVclusterOrganizationRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateVclusterOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse>* PrepareAsyncCreateVclusterOrganizationRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateVclusterOrganizationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse>* AsyncListAllEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListAllEnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse>* PrepareAsyncListAllEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListAllEnvironmentRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status CreateEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateEnvironmentRequest& request, ::pipelines::environment::v1alpha1::CreateEnvironmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::CreateEnvironmentResponse>> AsyncCreateEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::CreateEnvironmentResponse>>(AsyncCreateEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::CreateEnvironmentResponse>> PrepareAsyncCreateEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::CreateEnvironmentResponse>>(PrepareAsyncCreateEnvironmentRaw(context, request, cq));
    }
    ::grpc::Status GetOneEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetOneEnvironmentRequest& request, ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse>> AsyncGetOneEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetOneEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse>>(AsyncGetOneEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse>> PrepareAsyncGetOneEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetOneEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse>>(PrepareAsyncGetOneEnvironmentRaw(context, request, cq));
    }
    ::grpc::Status UpdateEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::UpdateEnvironmentRequest& request, ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse>> AsyncUpdateEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::UpdateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse>>(AsyncUpdateEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse>> PrepareAsyncUpdateEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::UpdateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse>>(PrepareAsyncUpdateEnvironmentRaw(context, request, cq));
    }
    ::grpc::Status ListEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListEnvironmentRequest& request, ::pipelines::environment::v1alpha1::ListEnvironmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::ListEnvironmentResponse>> AsyncListEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::ListEnvironmentResponse>>(AsyncListEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::ListEnvironmentResponse>> PrepareAsyncListEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::ListEnvironmentResponse>>(PrepareAsyncListEnvironmentRaw(context, request, cq));
    }
    ::grpc::Status DeleteEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::DeleteEnvironmentRequest& request, ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse>> AsyncDeleteEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::DeleteEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse>>(AsyncDeleteEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse>> PrepareAsyncDeleteEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::DeleteEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse>>(PrepareAsyncDeleteEnvironmentRaw(context, request, cq));
    }
    ::grpc::Status GetByNameEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetByNameEnvironmentRequest& request, ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse>> AsyncGetByNameEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetByNameEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse>>(AsyncGetByNameEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse>> PrepareAsyncGetByNameEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetByNameEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse>>(PrepareAsyncGetByNameEnvironmentRaw(context, request, cq));
    }
    ::grpc::Status CreateVclusterOrganization(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateVclusterOrganizationRequest& request, ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse>> AsyncCreateVclusterOrganization(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateVclusterOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse>>(AsyncCreateVclusterOrganizationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse>> PrepareAsyncCreateVclusterOrganization(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateVclusterOrganizationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse>>(PrepareAsyncCreateVclusterOrganizationRaw(context, request, cq));
    }
    ::grpc::Status ListAllEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListAllEnvironmentRequest& request, ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse>> AsyncListAllEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListAllEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse>>(AsyncListAllEnvironmentRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse>> PrepareAsyncListAllEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListAllEnvironmentRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse>>(PrepareAsyncListAllEnvironmentRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void CreateEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateEnvironmentRequest* request, ::pipelines::environment::v1alpha1::CreateEnvironmentResponse* response, std::function<void(::grpc::Status)>) override;
      void GetOneEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetOneEnvironmentRequest* request, ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse* response, std::function<void(::grpc::Status)>) override;
      void UpdateEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::UpdateEnvironmentRequest* request, ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse* response, std::function<void(::grpc::Status)>) override;
      void ListEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListEnvironmentRequest* request, ::pipelines::environment::v1alpha1::ListEnvironmentResponse* response, std::function<void(::grpc::Status)>) override;
      void DeleteEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::DeleteEnvironmentRequest* request, ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse* response, std::function<void(::grpc::Status)>) override;
      void GetByNameEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetByNameEnvironmentRequest* request, ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse* response, std::function<void(::grpc::Status)>) override;
      void CreateVclusterOrganization(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateVclusterOrganizationRequest* request, ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse* response, std::function<void(::grpc::Status)>) override;
      void ListAllEnvironment(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListAllEnvironmentRequest* request, ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse* response, std::function<void(::grpc::Status)>) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::CreateEnvironmentResponse>* AsyncCreateEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::CreateEnvironmentResponse>* PrepareAsyncCreateEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse>* AsyncGetOneEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetOneEnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse>* PrepareAsyncGetOneEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetOneEnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse>* AsyncUpdateEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::UpdateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse>* PrepareAsyncUpdateEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::UpdateEnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::ListEnvironmentResponse>* AsyncListEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListEnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::ListEnvironmentResponse>* PrepareAsyncListEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListEnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse>* AsyncDeleteEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::DeleteEnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse>* PrepareAsyncDeleteEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::DeleteEnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse>* AsyncGetByNameEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetByNameEnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse>* PrepareAsyncGetByNameEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::GetByNameEnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse>* AsyncCreateVclusterOrganizationRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateVclusterOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse>* PrepareAsyncCreateVclusterOrganizationRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::CreateVclusterOrganizationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse>* AsyncListAllEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListAllEnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse>* PrepareAsyncListAllEnvironmentRaw(::grpc::ClientContext* context, const ::pipelines::environment::v1alpha1::ListAllEnvironmentRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_CreateEnvironment_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOneEnvironment_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateEnvironment_;
    const ::grpc::internal::RpcMethod rpcmethod_ListEnvironment_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteEnvironment_;
    const ::grpc::internal::RpcMethod rpcmethod_GetByNameEnvironment_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateVclusterOrganization_;
    const ::grpc::internal::RpcMethod rpcmethod_ListAllEnvironment_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status CreateEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::CreateEnvironmentRequest* request, ::pipelines::environment::v1alpha1::CreateEnvironmentResponse* response);
    virtual ::grpc::Status GetOneEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::GetOneEnvironmentRequest* request, ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse* response);
    virtual ::grpc::Status UpdateEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::UpdateEnvironmentRequest* request, ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse* response);
    virtual ::grpc::Status ListEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::ListEnvironmentRequest* request, ::pipelines::environment::v1alpha1::ListEnvironmentResponse* response);
    virtual ::grpc::Status DeleteEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::DeleteEnvironmentRequest* request, ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse* response);
    virtual ::grpc::Status GetByNameEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::GetByNameEnvironmentRequest* request, ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse* response);
    virtual ::grpc::Status CreateVclusterOrganization(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::CreateVclusterOrganizationRequest* request, ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse* response);
    virtual ::grpc::Status ListAllEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::ListAllEnvironmentRequest* request, ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateEnvironment() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_CreateEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::CreateEnvironmentRequest* request, ::pipelines::environment::v1alpha1::CreateEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateEnvironment(::grpc::ServerContext* context, ::pipelines::environment::v1alpha1::CreateEnvironmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::pipelines::environment::v1alpha1::CreateEnvironmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOneEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetOneEnvironment() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetOneEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::GetOneEnvironmentRequest* request, ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOneEnvironment(::grpc::ServerContext* context, ::pipelines::environment::v1alpha1::GetOneEnvironmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_UpdateEnvironment() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_UpdateEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::UpdateEnvironmentRequest* request, ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateEnvironment(::grpc::ServerContext* context, ::pipelines::environment::v1alpha1::UpdateEnvironmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListEnvironment() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_ListEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::ListEnvironmentRequest* request, ::pipelines::environment::v1alpha1::ListEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListEnvironment(::grpc::ServerContext* context, ::pipelines::environment::v1alpha1::ListEnvironmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::pipelines::environment::v1alpha1::ListEnvironmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_DeleteEnvironment() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_DeleteEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::DeleteEnvironmentRequest* request, ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteEnvironment(::grpc::ServerContext* context, ::pipelines::environment::v1alpha1::DeleteEnvironmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetByNameEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_GetByNameEnvironment() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_GetByNameEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetByNameEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::GetByNameEnvironmentRequest* request, ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetByNameEnvironment(::grpc::ServerContext* context, ::pipelines::environment::v1alpha1::GetByNameEnvironmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateVclusterOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_CreateVclusterOrganization() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_CreateVclusterOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVclusterOrganization(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::CreateVclusterOrganizationRequest* request, ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateVclusterOrganization(::grpc::ServerContext* context, ::pipelines::environment::v1alpha1::CreateVclusterOrganizationRequest* request, ::grpc::ServerAsyncResponseWriter< ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListAllEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_ListAllEnvironment() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_ListAllEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::ListAllEnvironmentRequest* request, ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAllEnvironment(::grpc::ServerContext* context, ::pipelines::environment::v1alpha1::ListAllEnvironmentRequest* request, ::grpc::ServerAsyncResponseWriter< ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_CreateEnvironment<WithAsyncMethod_GetOneEnvironment<WithAsyncMethod_UpdateEnvironment<WithAsyncMethod_ListEnvironment<WithAsyncMethod_DeleteEnvironment<WithAsyncMethod_GetByNameEnvironment<WithAsyncMethod_CreateVclusterOrganization<WithAsyncMethod_ListAllEnvironment<Service > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithGenericMethod_CreateEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateEnvironment() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_CreateEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::CreateEnvironmentRequest* request, ::pipelines::environment::v1alpha1::CreateEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOneEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetOneEnvironment() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetOneEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::GetOneEnvironmentRequest* request, ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_UpdateEnvironment() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_UpdateEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::UpdateEnvironmentRequest* request, ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListEnvironment() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_ListEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::ListEnvironmentRequest* request, ::pipelines::environment::v1alpha1::ListEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_DeleteEnvironment() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_DeleteEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::DeleteEnvironmentRequest* request, ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetByNameEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_GetByNameEnvironment() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_GetByNameEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetByNameEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::GetByNameEnvironmentRequest* request, ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateVclusterOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_CreateVclusterOrganization() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_CreateVclusterOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVclusterOrganization(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::CreateVclusterOrganizationRequest* request, ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListAllEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_ListAllEnvironment() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_ListAllEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::ListAllEnvironmentRequest* request, ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateEnvironment() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_CreateEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::CreateEnvironmentRequest* request, ::pipelines::environment::v1alpha1::CreateEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateEnvironment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOneEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetOneEnvironment() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetOneEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOneEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::GetOneEnvironmentRequest* request, ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOneEnvironment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_UpdateEnvironment() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_UpdateEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::UpdateEnvironmentRequest* request, ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateEnvironment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListEnvironment() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_ListEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::ListEnvironmentRequest* request, ::pipelines::environment::v1alpha1::ListEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListEnvironment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_DeleteEnvironment() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_DeleteEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::DeleteEnvironmentRequest* request, ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteEnvironment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetByNameEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_GetByNameEnvironment() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_GetByNameEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetByNameEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::GetByNameEnvironmentRequest* request, ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetByNameEnvironment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateVclusterOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_CreateVclusterOrganization() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_CreateVclusterOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateVclusterOrganization(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::CreateVclusterOrganizationRequest* request, ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateVclusterOrganization(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListAllEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_ListAllEnvironment() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_ListAllEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListAllEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::ListAllEnvironmentRequest* request, ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListAllEnvironment(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateEnvironment() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::pipelines::environment::v1alpha1::CreateEnvironmentRequest, ::pipelines::environment::v1alpha1::CreateEnvironmentResponse>(std::bind(&WithStreamedUnaryMethod_CreateEnvironment<BaseClass>::StreamedCreateEnvironment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::CreateEnvironmentRequest* request, ::pipelines::environment::v1alpha1::CreateEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateEnvironment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pipelines::environment::v1alpha1::CreateEnvironmentRequest,::pipelines::environment::v1alpha1::CreateEnvironmentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOneEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetOneEnvironment() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::pipelines::environment::v1alpha1::GetOneEnvironmentRequest, ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse>(std::bind(&WithStreamedUnaryMethod_GetOneEnvironment<BaseClass>::StreamedGetOneEnvironment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetOneEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOneEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::GetOneEnvironmentRequest* request, ::pipelines::environment::v1alpha1::GetOneEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOneEnvironment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pipelines::environment::v1alpha1::GetOneEnvironmentRequest,::pipelines::environment::v1alpha1::GetOneEnvironmentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_UpdateEnvironment() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler< ::pipelines::environment::v1alpha1::UpdateEnvironmentRequest, ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse>(std::bind(&WithStreamedUnaryMethod_UpdateEnvironment<BaseClass>::StreamedUpdateEnvironment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_UpdateEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::UpdateEnvironmentRequest* request, ::pipelines::environment::v1alpha1::UpdateEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateEnvironment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pipelines::environment::v1alpha1::UpdateEnvironmentRequest,::pipelines::environment::v1alpha1::UpdateEnvironmentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListEnvironment() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler< ::pipelines::environment::v1alpha1::ListEnvironmentRequest, ::pipelines::environment::v1alpha1::ListEnvironmentResponse>(std::bind(&WithStreamedUnaryMethod_ListEnvironment<BaseClass>::StreamedListEnvironment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::ListEnvironmentRequest* request, ::pipelines::environment::v1alpha1::ListEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListEnvironment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pipelines::environment::v1alpha1::ListEnvironmentRequest,::pipelines::environment::v1alpha1::ListEnvironmentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_DeleteEnvironment() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler< ::pipelines::environment::v1alpha1::DeleteEnvironmentRequest, ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse>(std::bind(&WithStreamedUnaryMethod_DeleteEnvironment<BaseClass>::StreamedDeleteEnvironment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_DeleteEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::DeleteEnvironmentRequest* request, ::pipelines::environment::v1alpha1::DeleteEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteEnvironment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pipelines::environment::v1alpha1::DeleteEnvironmentRequest,::pipelines::environment::v1alpha1::DeleteEnvironmentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetByNameEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_GetByNameEnvironment() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler< ::pipelines::environment::v1alpha1::GetByNameEnvironmentRequest, ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse>(std::bind(&WithStreamedUnaryMethod_GetByNameEnvironment<BaseClass>::StreamedGetByNameEnvironment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_GetByNameEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetByNameEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::GetByNameEnvironmentRequest* request, ::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetByNameEnvironment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pipelines::environment::v1alpha1::GetByNameEnvironmentRequest,::pipelines::environment::v1alpha1::GetByNameEnvironmentResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateVclusterOrganization : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_CreateVclusterOrganization() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler< ::pipelines::environment::v1alpha1::CreateVclusterOrganizationRequest, ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse>(std::bind(&WithStreamedUnaryMethod_CreateVclusterOrganization<BaseClass>::StreamedCreateVclusterOrganization, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_CreateVclusterOrganization() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateVclusterOrganization(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::CreateVclusterOrganizationRequest* request, ::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateVclusterOrganization(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pipelines::environment::v1alpha1::CreateVclusterOrganizationRequest,::pipelines::environment::v1alpha1::CreateVclusterOrganizationResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListAllEnvironment : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_ListAllEnvironment() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler< ::pipelines::environment::v1alpha1::ListAllEnvironmentRequest, ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse>(std::bind(&WithStreamedUnaryMethod_ListAllEnvironment<BaseClass>::StreamedListAllEnvironment, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_ListAllEnvironment() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListAllEnvironment(::grpc::ServerContext* context, const ::pipelines::environment::v1alpha1::ListAllEnvironmentRequest* request, ::pipelines::environment::v1alpha1::ListAllEnvironmentResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListAllEnvironment(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::pipelines::environment::v1alpha1::ListAllEnvironmentRequest,::pipelines::environment::v1alpha1::ListAllEnvironmentResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_CreateEnvironment<WithStreamedUnaryMethod_GetOneEnvironment<WithStreamedUnaryMethod_UpdateEnvironment<WithStreamedUnaryMethod_ListEnvironment<WithStreamedUnaryMethod_DeleteEnvironment<WithStreamedUnaryMethod_GetByNameEnvironment<WithStreamedUnaryMethod_CreateVclusterOrganization<WithStreamedUnaryMethod_ListAllEnvironment<Service > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_CreateEnvironment<WithStreamedUnaryMethod_GetOneEnvironment<WithStreamedUnaryMethod_UpdateEnvironment<WithStreamedUnaryMethod_ListEnvironment<WithStreamedUnaryMethod_DeleteEnvironment<WithStreamedUnaryMethod_GetByNameEnvironment<WithStreamedUnaryMethod_CreateVclusterOrganization<WithStreamedUnaryMethod_ListAllEnvironment<Service > > > > > > > > StreamedService;
};

}  // namespace v1alpha1
}  // namespace environment
}  // namespace pipelines


#endif  // GRPC_pipelines_2fenvironment_2fv1alpha1_2fenvironment_5fapi_2eproto__INCLUDED
