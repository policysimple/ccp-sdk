
syntax = "proto3";

option go_package = "github.com/cuemby/ccp-sdk/gen/go/source/v1alpha1";

package source.v1alpha1;

service SourceService {

    //PROVIDERS
    rpc CreateProvider(CreateProviderRequest) returns (CreateProviderResponse);
    rpc ListProviders(ListProvidersRequest) returns (ListProvidersResponse);
    rpc GetProvider(GetProviderRequest) returns (GetProviderResponse);
    rpc GetOneProviderByName(GetOneProviderByNameRequest) returns (GetOneProviderByNameResponse);
    rpc UpdateProvider(UpdateProviderRequest) returns (UpdateProviderResponse);
    rpc DeleteProvider(DeleteProviderRequest) returns (DeleteProviderResponse);

    //INTEGRATIONS
    rpc CreateIntegration(CreateIntegrationRequest) returns (CreateIntegrationResponse);
    rpc ListIntegrations(ListIntegrationsRequest) returns (ListIntegrationsResponse);
    rpc GetIntegration(GetIntegrationRequest) returns (GetIntegrationResponse);
    rpc UpdateIntegration(UpdateIntegrationRequest) returns (UpdateIntegrationResponse);
    rpc DeleteIntegration(DeleteIntegrationRequest) returns (DeleteIntegrationResponse);
    rpc DeleteIntegrationsByOrganization(DeleteIntegrationsByOrganizationRequest) returns (DeleteIntegrationsByOrganizationResponse);

    //List Repositories providers by integrations
    rpc ListRepositoriesProvider(ListRepositoriesProviderRequest) returns (ListRepositoriesProviderResponse);
    rpc GetRepositoryProvider(GetRepositoryProviderRequest) returns (GetRepositoryProviderResponse);

    //REPOSITORIES
    rpc CreateRepository(CreateRepositoryRequest) returns (CreateRepositoryResponse);
    rpc ListRepositories(ListRepositoriesRequest) returns (ListRepositoriesResponse);
    rpc GetRepository(GetRepositoryRequest) returns (GetRepositoryResponse);
    rpc DeleteRepository(DeleteRepositoryRequest) returns (DeleteRepositoryResponse);
    rpc UpdateRepository(UpdateRepositoryRequest) returns (UpdateRepositoryResponse);
}

message DeleteIntegrationsByOrganizationRequest {
    string organization_id = 1;
}

message DeleteIntegrationsByOrganizationResponse {
    string msg = 1;
}

/*
    rpc GetOneProviderByName(GetOneProviderByNameRequest) returns (GetOneProviderByNameResponse);
*/

message GetOneProviderByNameRequest {
    string name = 1;
}

message GetOneProviderByNameResponse {
    Provider provider = 1;
}
/*
  CreateProviderRequest is the request for the CreateProvider method.
*/

message Branch {
    string name = 1;
    string sha = 2;
    string url = 3;
}

message ListRepositoriesProviderRequest {
    string integration_id = 1;
}

message ListRepositoriesProviderResponse {
    repeated Repository repositories = 1;
}

message GetRepositoryProviderRequest {
    string integration_id = 1;
    string name = 2;
}

message GetRepositoryProviderResponse {
    repeated Branch branchs = 1;
}

/*
    REPOSITORIES

*/

message DetailRepository {
    string id = 1;
    string name = 2;
    bool private = 3;
    string fullname = 4;
    string description = 5;
    bool fork = 6;
    string clone_url = 7;

    uint32 project_id = 8;
    uint32 organization_id = 9;

    repeated string branchs = 10;
    string integration_id = 11;

}

message ListRepository{
    string id = 1;
    string name = 2;
    bool private = 3;
    string fullname = 4;
    string description = 5;
    string clone_url = 7;
    uint32 project_id = 8;
    uint32 organization_id = 9;
    string integration_id = 11;
}


message CreateDetailRepository {
    string name = 1;
    bool private = 2;
    string fullname = 3;
    string description = 4;
    bool fork = 5;
    string clone_url = 6;

    uint32 project_id = 7;
    uint32 organization_id = 8;
    string integration_id = 9;
}


message CreateRepositoryRequest {
    CreateDetailRepository repository = 1;
    uint32 project_id = 2;
    uint32 organization_id = 3;
}

message CreateRepositoryResponse {
    string msg = 1;
    string error = 2;
}

message ListRepositoriesRequest {
    uint32 project_id = 1;
    uint32 organization_id = 2;
}

message ListRepositoriesResponse {
    repeated ListRepository repositories = 1;
}


message GetRepositoryRequest {
    string repository_id = 1;
}

message  GetRepositoryResponse {
    DetailRepository repository = 1;
    
}

message DeleteRepositoryRequest {
    string repository_id = 1;
}

message DeleteRepositoryResponse {
    string msg = 1;
    string error = 2;
}

message UpdateRepositoryRequest {
    string repository_id = 1;
    DetailRepository repository = 2;
}

message UpdateRepositoryResponse {
    string msg = 1;
    string error = 2;
}

/*
    END

*/


message Integration {
    string id = 1;
    uint32 organization_id = 2;
    string name = 3;
    Provider provider = 4;
    map<string, string> data = 5;
    map<string, string> metadata = 6;
    string user_id = 7;
}

message Repository {
    string name = 1;
    bool private = 2;
    string fullname = 3;
    string description = 4;
    bool fork = 5;
    string clone_url = 6;
    string branch = 7;
}

message CreateIntegrationRequest {
    //string id = 1;
    uint32 organization_id = 2;
    string name = 3;
    //Provider provider = 4;
    map<string, string> data = 5;
    map<string, string> metadata = 6;
    string user_id = 7;
    string provider_id = 8;
}

message CreateIntegrationResponse {
    string msg = 1;
    string error = 2;
    string integration_id = 3;
}

message ListIntegrationsRequest {
    uint32 organization_id = 1;
    string user_id = 2;
}

message ListIntegrationsResponse{
    repeated Integration integrations = 1;
}

message GetIntegrationRequest {
    string id = 1;
}

message GetIntegrationResponse {
    Integration integration = 1;
    //repeated Repository repositories = 2;
}

message UpdateIntegrationRequest {
    string id = 1;
    CreateIntegrationRequest integrations = 2;
}

message UpdateIntegrationResponse {
    string msg = 1;
    string error = 2;
}

message DeleteIntegrationRequest {
    string id = 1;
}

message DeleteIntegrationResponse {
    string msg = 1;
    string error = 2;
}

/*
 END

 */

message Provider{
    string id =1 ;
    string name = 2;
    string description = 3;
    string logo = 4;
    map<string, string> data = 5;
    map<string, string> metadata = 6;


}


message DeleteProviderRequest{
    string id = 1;
}

message DeleteProviderResponse {
    string msg = 1;
    string error = 2;
}

message UpdateProviderRequest {
    string id = 1;
    CreateProviderRequest provider = 2;
}

message UpdateProviderResponse {
    string msg = 1;
    string error = 2;
}


message GetProviderRequest{
    string id = 1;
} 

message GetProviderResponse{
    Provider provider = 1;
}

message CreateProviderRequest {
    string name = 1;
    string description = 2;
    string logo = 3;
    map<string, string> data = 5;
    map<string, string> metadata = 6;


}

message CreateProviderResponse {
    string msg = 1;
    string error = 2;
}

message ListProvidersRequest {
}

message ListProvidersResponse {
    repeated Provider providers = 1;
}